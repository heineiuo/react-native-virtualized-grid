{"version":3,"sources":["docs/Header.tsx","src/Cell.tsx","src/VirtualizedGridContext.tsx","src/VirtualizedGridUtils.tsx","src/VirtualizedGrid.tsx","src/ColumnResizer.tsx","src/RowResizer.tsx","App.tsx"],"names":["Header","View","style","height","flexDirection","justifyContent","alignItems","paddingLeft","Text","fontWeight","fontSize","paddingRight","TouchableOpacity","marginRight","onPress","Linking","openURL","MaterialCommunityIcons","name","size","color","Cell","forwardRef","ref","renderCell","column","row","coordinate","useState","rowIndex","columnIndex","data","setData","useImperativeHandle","update","Animated","position","width","widthAnimated","zIndex","freezed","heightAnimated","transform","translateX","xAnimated","add","x","translateY","yAnimated","y","VirtualizedGridContext","createContext","useGrid","useContext","ColumnObject","move","event","nextX","Math","min","max","minX","deltaX","nextY","minY","deltaY","setValue","this","Value","containerWidthAnimated","containerHeightAnimated","contentWidthAnimated","contentHeightAnimated","minXAnimated","subtract","minYAnimated","JSON","parse","stringify","RowObject","CellObject","createRef","VirtualizedGrid","columnCount","rowCount","onChangeColumn","onChangeRow","getColumnWidth","getRowHeight","showColumnLine","showRowLine","freezedColumns","freezedRows","view","useRef","layoutCount","setLayoutCount","virtualColumns","virtualRows","virtualCells","freezedStartColumns","start","freezedStartRows","end","ValueXY","containerSize","getRange","useCallback","minColumn","current","maxColumn","minRow","maxRow","i","length","onContainerLayout","layout","nativeEvent","virtualColumnsTotalWidth","virtualRowsTotalHeight","rowHeight","push","prev","columnWidth","extraRows","prevRow","extraColumns","prevColumn","j","updateCoordinate","containerWidth","containerHeight","shouldSplitAction","splitAction","finalMaxColumnIndex","finalMinColumnIndex","finalMaxRowIndex","finalMinRowIndex","deltaX0","deltaY0","outsideColumns","outsideRows","outsideCells","console","error","columnValue","unshift","cell","includes","requestAnimationFrame","onWheel","useEffect","Platform","OS","el","addEventListener","removeEventListener","panResponder","useMemo","prevGestureState","PanResponder","create","onPanResponderGrant","gestureState","onMoveShouldSetPanResponder","onPanResponderMove","dx","dy","Provider","value","overflow","onLayout","panHandlers","map","index","backgroundColor","ColumnResizer","rightColumns","onPanResponderTerminate","onPanResponderTerminationRequest","onPanResponderReject","setOffset","item","onPanResponderRelease","flattenOffset","top","right","Pressable","display","state","hovered","RowResizer","bottomRows","bottom","left","App","useWindowDimensions","columnWidthCache","Map","rowHeightCache","updateColumn","set","updateRow","useLayoutEffect","document","body","Number","MAX_SAFE_INTEGER","borderColor","select","web","userSelect","info","has","get","flex","borderTopWidth","borderLeftWidth","padding","borderRightWidth","borderBottomWidth"],"mappings":"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","file":"static/js/app.513cb12c.chunk.js","sourcesContent":["import { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { TouchableOpacity, View, Linking, Text } from \"react-native\";\n\nexport function Header() {\n  return (\n    <View\n      style={{\n        height: 56,\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n      }}\n    >\n      <View style={{ paddingLeft: 20 }}>\n        <Text style={{ fontWeight: \"bold\", fontSize: 20 }}>\n          React Native Virtualized Grid\n        </Text>\n      </View>\n      <View\n        style={{ paddingRight: 20, flexDirection: \"row\", alignItems: \"center\" }}\n      >\n        <TouchableOpacity\n          style={{ marginRight: 12 }}\n          onPress={() => {\n            Linking.openURL(\"https://twitter.com/770hz\");\n          }}\n        >\n          <MaterialCommunityIcons name=\"twitter\" size={24} color=\"#1d9bf0\" />\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={() => {\n            Linking.openURL(\n              \"https://github.com/heineiuo/react-native-virtualized-grid\"\n            );\n          }}\n        >\n          <MaterialCommunityIcons name=\"github\" size={24} color=\"black\" />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n","import { forwardRef, ReactNode, useImperativeHandle, useState } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellMethods } from \"./VirtualizedGridTypes\";\nimport { ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport const Cell = forwardRef<\n  CellMethods,\n  {\n    coordinate: Animated.AnimatedValueXY;\n    column: ColumnObject;\n    row: RowObject;\n    renderCell: (info: {\n      columnIndex: number;\n      rowIndex: number;\n      column: ColumnObject;\n      row: RowObject;\n    }) => ReactNode;\n  }\n>(({ renderCell, column, row, coordinate }, ref) => {\n  const [data, setData] = useState({\n    rowIndex: row.rowIndex,\n    columnIndex: column.columnIndex,\n  });\n\n  useImperativeHandle(\n    ref,\n    () => {\n      return {\n        update: (data) => {\n          setData(data);\n        },\n      } as CellMethods;\n    },\n    []\n  );\n\n  return (\n    <Animated.View\n      style={{\n        position: \"absolute\",\n        width: column.widthAnimated,\n        zIndex: (column.freezed ? 1 : 0) + (row.freezed ? 1 : 0),\n        height: row.heightAnimated,\n        transform: [\n          {\n            translateX: column.freezed\n              ? column.xAnimated\n              : Animated.add(column.xAnimated, coordinate.x),\n          },\n          {\n            translateY: row.freezed\n              ? row.yAnimated\n              : Animated.add(row.yAnimated, coordinate.y),\n          },\n        ],\n      }}\n    >\n      {renderCell({ ...data, column, row })}\n    </Animated.View>\n  );\n});\n","import { createContext, MutableRefObject, useContext } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellObject, ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport type VirtualizedGridState = {\n  virtualColumns: MutableRefObject<ColumnObject[]>;\n  virtualCells: MutableRefObject<CellObject[]>;\n  virtualRows: MutableRefObject<RowObject[]>;\n  coordinate: MutableRefObject<Animated.ValueXY>;\n  containerSize: MutableRefObject<Animated.ValueXY>;\n  updateCoordinate: (event: { deltaX: number; deltaY: number }) => void;\n  onChangeColumn: (column: ColumnObject) => void;\n  onChangeRow: (row: RowObject) => void;\n};\n\nexport const VirtualizedGridContext = createContext({} as VirtualizedGridState);\nexport const useGrid = () => useContext(VirtualizedGridContext);\n","import { createRef, RefObject } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellMethods } from \"./VirtualizedGridTypes\";\n\nexport class CoordinateObject {\n  constructor() {\n    this.xAnimated = new Animated.Value(0);\n    this.yAnimated = new Animated.Value(0);\n    this.containerWidthAnimated = new Animated.Value(0);\n    this.containerHeightAnimated = new Animated.Value(0);\n    this.contentWidthAnimated = new Animated.Value(0);\n    this.contentHeightAnimated = new Animated.Value(0);\n    this.minXAnimated = Animated.subtract(\n      this.containerWidthAnimated,\n      this.contentWidthAnimated\n    );\n    this.minYAnimated = Animated.subtract(\n      this.containerWidthAnimated,\n      this.contentWidthAnimated\n    );\n  }\n\n  xAnimated: Animated.Value;\n  yAnimated: Animated.Value;\n  minXAnimated: Animated.AnimatedSubtraction;\n  minYAnimated: Animated.AnimatedSubtraction;\n  containerWidthAnimated: Animated.Value;\n  containerHeightAnimated: Animated.Value;\n  contentWidthAnimated: Animated.Value;\n  contentHeightAnimated: Animated.Value;\n\n  move = (event: WheelEvent) => {\n    const nextX = Math.min(0, Math.max(this.minX, this.x - event.deltaX));\n    const nextY = Math.min(0, Math.max(this.minY, this.y - event.deltaY));\n\n    this.xAnimated.setValue(nextX);\n    this.yAnimated.setValue(nextY);\n  };\n\n  get minX(): number {\n    return JSON.parse(JSON.stringify(this.minXAnimated));\n  }\n  get minY(): number {\n    return JSON.parse(JSON.stringify(this.minYAnimated));\n  }\n\n  get x(): number {\n    return JSON.parse(JSON.stringify(this.xAnimated));\n  }\n  get y(): number {\n    return JSON.parse(JSON.stringify(this.yAnimated));\n  }\n  get contentWidth(): number {\n    return JSON.parse(JSON.stringify(this.contentWidthAnimated));\n  }\n  get contentHeight(): number {\n    return JSON.parse(JSON.stringify(this.contentHeightAnimated));\n  }\n  get containerWidth(): number {\n    return JSON.parse(JSON.stringify(this.containerWidthAnimated));\n  }\n  get containerHeight(): number {\n    return JSON.parse(JSON.stringify(this.containerHeightAnimated));\n  }\n}\n\nexport class ColumnObject {\n  constructor({\n    x,\n    width,\n    columnIndex,\n    freezed = false,\n  }: {\n    x: number;\n    width: number;\n    columnIndex: number;\n    freezed?: boolean;\n  }) {\n    this.xAnimated = new Animated.Value(x);\n    this.widthAnimated = new Animated.Value(width);\n    this.columnIndex = columnIndex;\n    this.freezed = freezed;\n  }\n\n  columnIndex: number;\n  xAnimated: Animated.Value;\n  widthAnimated: Animated.Value;\n  freezed: boolean;\n\n  get x(): number {\n    return JSON.parse(JSON.stringify(this.xAnimated));\n  }\n  get width(): number {\n    return JSON.parse(JSON.stringify(this.widthAnimated));\n  }\n}\n\nexport class RowObject {\n  constructor({\n    y,\n    height,\n    rowIndex,\n    freezed = false,\n  }: {\n    y: number;\n    height: number;\n    rowIndex: number;\n    freezed?: boolean;\n  }) {\n    this.yAnimated = new Animated.Value(y);\n    this.heightAnimated = new Animated.Value(height);\n    this.rowIndex = rowIndex;\n    this.freezed = freezed;\n  }\n\n  rowIndex: number;\n  yAnimated: Animated.Value;\n  heightAnimated: Animated.Value;\n  freezed: boolean;\n\n  get y(): number {\n    return JSON.parse(JSON.stringify(this.yAnimated));\n  }\n\n  get height(): number {\n    return JSON.parse(JSON.stringify(this.heightAnimated));\n  }\n}\n\nexport class CellObject {\n  constructor({ column, row }: { column: ColumnObject; row: RowObject }) {\n    this.column = column;\n    this.row = row;\n    this.ref = createRef();\n  }\n\n  ref: RefObject<CellMethods>;\n  column: ColumnObject;\n  row: RowObject;\n\n  get x() {\n    return this.column.x;\n  }\n\n  get y() {\n    return this.row.y;\n  }\n\n  get width() {\n    return this.column.width;\n  }\n  get height() {\n    return this.row.height;\n  }\n}\n","import {\n  Fragment,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { Animated, Platform, View, PanResponder } from \"react-native\";\n\nimport { Cell } from \"./Cell\";\nimport { VirtualizedGridContext } from \"./VirtualizedGridContext\";\nimport { VirtualizedGridProps } from \"./VirtualizedGridTypes\";\nimport { CellObject, ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport function VirtualizedGrid({\n  style,\n  columnCount,\n  rowCount,\n  renderCell,\n  onChangeColumn = (column: ColumnObject) => undefined,\n  onChangeRow = (row: RowObject) => undefined,\n  getColumnWidth = () => 100,\n  getRowHeight = () => 40,\n  showColumnLine = false,\n  showRowLine = false,\n  freezedColumns = {},\n  freezedRows = {},\n}: VirtualizedGridProps) {\n  const view = useRef<View>(null);\n  const [layoutCount, setLayoutCount] = useState(0);\n  const virtualColumns = useRef<ColumnObject[]>([]);\n  const virtualRows = useRef<RowObject[]>([]);\n  const virtualCells = useRef<CellObject[]>([]);\n\n  const freezedStartColumns = freezedColumns.start ?? 0;\n  const freezedEndColumns = freezedColumns.end ?? 0;\n  const freezedStartRows = freezedRows.start ?? 0;\n  const freezedEndRows = freezedRows.end ?? 0;\n\n  /**\n   * 左上角的坐标\n   */\n  const coordinate = useRef(new Animated.ValueXY({ x: 0, y: 0 }));\n  const containerSize = useRef(new Animated.ValueXY({ x: 0, y: 0 }));\n\n  /**\n   * 获取当前的rowIndex范围和columnIndex范围\n   */\n  const getRange = useCallback(() => {\n    let minColumn = virtualColumns.current[0];\n    let maxColumn = virtualColumns.current[0];\n    let minRow = virtualRows.current[0];\n    let maxRow = virtualRows.current[0];\n\n    for (let i = 0; i < virtualColumns.current.length; i++) {\n      const column = virtualColumns.current[i];\n      if (column.freezed) {\n        continue;\n      }\n      if (minColumn.freezed) {\n        minColumn = column;\n        continue;\n      }\n      if (column.columnIndex < minColumn.columnIndex) {\n        minColumn = column;\n      }\n      if (column.columnIndex > maxColumn.columnIndex) {\n        maxColumn = column;\n      }\n    }\n\n    for (let i = 0; i < virtualRows.current.length; i++) {\n      const row = virtualRows.current[i];\n      if (row.freezed) {\n        continue;\n      }\n      if (minRow.freezed) {\n        minRow = row;\n        continue;\n      }\n      if (row.rowIndex < minRow.rowIndex) {\n        minRow = row;\n      }\n      if (row.rowIndex > maxRow.rowIndex) {\n        maxRow = row;\n      }\n    }\n    return { minColumn, minRow, maxColumn, maxRow };\n  }, []);\n\n  /**\n   * init containerSize, virtualColumns, virtualRows\n   */\n  const onContainerLayout = useCallback(\n    (event) => {\n      const { layout } = event.nativeEvent;\n      containerSize.current.setValue({ x: layout.width, y: layout.height });\n\n      let virtualColumnsTotalWidth = 0;\n      let virtualRowsTotalHeight = 0;\n\n      for (const column of virtualColumns.current) {\n        virtualColumnsTotalWidth += column.width;\n      }\n      for (const row of virtualRows.current) {\n        virtualRowsTotalHeight += row.height;\n      }\n\n      const { maxRow, maxColumn } = getRange();\n\n      /**\n       * 填满virtualRows和virtualColumns\n       */\n      let rowIndex = maxRow?.rowIndex ?? -1;\n      while (virtualRowsTotalHeight < layout.height) {\n        if (rowIndex >= rowCount - 1) {\n          break;\n        }\n        rowIndex++;\n        const rowHeight = getRowHeight({ rowIndex });\n        virtualRowsTotalHeight += rowHeight;\n        if (virtualRows.current.length === 0) {\n          virtualRows.current.push(\n            new RowObject({\n              y: 0,\n              height: rowHeight,\n              rowIndex,\n              freezed: rowIndex < freezedStartRows,\n            })\n          );\n        } else {\n          const prev = virtualRows.current[virtualRows.current.length - 1];\n          virtualRows.current.push(\n            new RowObject({\n              y: prev.y + prev.height,\n              height: rowHeight,\n              rowIndex,\n              freezed: rowIndex < freezedStartRows,\n            })\n          );\n        }\n      }\n      let columnIndex = maxColumn?.columnIndex ?? -1;\n      while (virtualColumnsTotalWidth < layout.width) {\n        if (columnIndex >= columnCount - 1) {\n          break;\n        }\n        columnIndex++;\n        const columnWidth = getColumnWidth({ columnIndex });\n        virtualColumnsTotalWidth += columnWidth;\n        if (virtualColumns.current.length === 0) {\n          virtualColumns.current.push(\n            new ColumnObject({\n              x: 0,\n              width: columnWidth,\n              columnIndex,\n              freezed: columnIndex < freezedStartColumns,\n            })\n          );\n        } else {\n          const prev =\n            virtualColumns.current[virtualColumns.current.length - 1];\n          virtualColumns.current.push(\n            new ColumnObject({\n              width: columnWidth,\n              x: prev.x + prev.width,\n              columnIndex,\n              freezed: columnIndex < freezedStartColumns,\n            })\n          );\n        }\n      }\n\n      /**\n       * 增加额外的column和row,\n       * 1. 避免出现空白列/行\n       * 2. 补充freezed的空缺\n       */\n      let extraRows = freezedStartRows + 1;\n      while (extraRows > 0) {\n        if (rowIndex >= rowCount - 1) {\n          break;\n        }\n        rowIndex++;\n        const rowHeight = getRowHeight({ rowIndex });\n        const prevRow = virtualRows.current[virtualRows.current.length - 1];\n        virtualRows.current.push(\n          new RowObject({\n            y: prevRow.y + prevRow.height,\n            height: rowHeight,\n            rowIndex,\n          })\n        );\n        extraRows--;\n      }\n\n      let extraColumns = freezedStartColumns + 1;\n      while (extraColumns > 0) {\n        if (columnIndex >= columnCount - 1) {\n          break;\n        }\n        columnIndex++;\n        const prevColumn =\n          virtualColumns.current[virtualColumns.current.length - 1];\n        const columnWidth = getColumnWidth({ columnIndex });\n        virtualColumns.current.push(\n          new ColumnObject({\n            width: columnWidth,\n            x: prevColumn.x + prevColumn.width,\n            columnIndex,\n          })\n        );\n\n        extraColumns--;\n      }\n\n      /**\n       * 重置cells\n       * cells的数量是 (rowCount+1) * (columnCount+1)，因为\n       * 会出现左边的cell还没消失\n       */\n      virtualCells.current = [];\n      for (let i = 0; i < virtualRows.current.length; i++) {\n        const row = virtualRows.current[i];\n        for (let j = 0; j < virtualColumns.current.length; j++) {\n          const column = virtualColumns.current[j];\n          virtualCells.current.push(\n            new CellObject({\n              column,\n              row,\n            })\n          );\n        }\n      }\n\n      setLayoutCount((prev) => prev + 1);\n    },\n    [\n      rowCount,\n      columnCount,\n      getColumnWidth,\n      getRowHeight,\n      getRange,\n      freezedStartColumns,\n      freezedStartRows,\n    ]\n  );\n\n  const updateCoordinate = useCallback(\n    (event: { deltaX: number; deltaY: number }) => {\n      const { x, y } = JSON.parse(JSON.stringify(coordinate.current));\n      const { x: containerWidth, y: containerHeight } = JSON.parse(\n        JSON.stringify(containerSize.current)\n      );\n\n      /**\n       * 如果移动过快，超过了逐次迁移元素的速度，那么拆分成多次操作，重复\n       * 调用updateCoordinate\n       */\n      let shouldSplitAction = false;\n      const splitAction = { deltaX: 0, deltaY: 0 };\n\n      /**\n       * (1/5)\n       * 获取当前的rowIndex范围和columnIndex范围\n       * 如果现在已经到最左边column或最右边column了，那就不再继续移动column，\n       * 同时coordinate.x最小值不能小于 containerWidth - (maxColumn.x+column.width)\n       * 也就是说coordinate.x区间是：[containerWidth - (maxColumn.x+column.width), 0]\n       *\n       * row同理\n       */\n      let { minColumn, maxColumn, minRow, maxRow } = getRange();\n\n      /**\n       * (2/5)\n       * 计算出minX,minY\n       * 根据deltaX位移计算需要展示的column,\n       * 逐个通过消耗deltaX，通过getColumnWidth获取宽度，直到deltaX额度用完\n       * 1. 判断maxColumn是否已经完全展示，\n       *    a. 未完全展示：deltaX -= maxColumn未完全展示的部分(deltaX等于0结束)\n       *       nextX -= maxColumn未完全展示的部分；-> 2\n       *    b. 完全展示：-> 2\n       * 2. 获取下一个maxColumn，判断deltaX剩余额度是否大于maxColumn宽度\n       *    a. 大于: deltaX -= maxColumn宽度，\n       *            nextX -= maxColumn宽度，-> 2\n       *    b. 小于等于：结束\n       *\n       * deltaY同理\n       *\n       * deltaX > 0 左移\n       * deltaX < 0 右移\n       * deltaY > 0 上移\n       * deltaY < 0 下移\n       */\n\n      let deltaX = event.deltaX;\n      let deltaY = event.deltaY;\n      let finalMaxColumnIndex = maxColumn.columnIndex;\n      let finalMinColumnIndex = minColumn.columnIndex;\n      let finalMaxRowIndex = maxRow.rowIndex;\n      let finalMinRowIndex = minRow.rowIndex;\n\n      // 右移补头\n      if (deltaX < 0) {\n        // minColumn.x + x 修正maxColumn位置误差\n        // let deltaX0 = -containerWidth;\n        let deltaX0 = x + minColumn.x - containerWidth;\n\n        while (deltaX < deltaX0) {\n          if (finalMinColumnIndex === 0) {\n            break;\n          }\n          finalMinColumnIndex--;\n          if (\n            minColumn.columnIndex - finalMinColumnIndex >=\n            virtualColumns.current.length - 2\n          ) {\n            shouldSplitAction = true;\n            break;\n          }\n          const minColumnWidth = getColumnWidth({\n            columnIndex: finalMinColumnIndex,\n          });\n          deltaX0 += minColumnWidth;\n        }\n        deltaX = Math.max(deltaX0, deltaX);\n        if (shouldSplitAction) {\n          splitAction.deltaX = event.deltaX - deltaX;\n        }\n      }\n      // 左移补尾\n      if (deltaX > 0) {\n        // 修正位置误差: x + maxColumn.x + maxColumn.width\n        // let deltaX0 = containerWidth;\n        let deltaX0 = maxColumn.x + maxColumn.width + x - containerWidth;\n        while (deltaX > deltaX0) {\n          if (finalMaxColumnIndex >= columnCount - 1) {\n            break;\n          }\n          finalMaxColumnIndex++;\n          if (\n            finalMaxColumnIndex - maxColumn.columnIndex >=\n            virtualColumns.current.length - 2\n          ) {\n            shouldSplitAction = true;\n            break;\n          }\n          const maxColumnWidth = getColumnWidth({\n            columnIndex: finalMaxColumnIndex,\n          });\n          deltaX0 += maxColumnWidth;\n        }\n        deltaX = Math.min(deltaX0, deltaX);\n        if (shouldSplitAction) {\n          splitAction.deltaX = event.deltaX - deltaX;\n        }\n      }\n\n      // 下移补头\n      if (deltaY < 0) {\n        // minRow.y !== -y，因为minRow有可能一半在屏幕外面，\n        // 所以这里要修正这个误差\n        let deltaY0 = y + minRow.y - containerHeight;\n\n        while (deltaY < deltaY0) {\n          if (finalMinRowIndex === 0) {\n            break;\n          }\n          finalMinRowIndex--;\n          if (\n            minRow.rowIndex - finalMinRowIndex >=\n            virtualRows.current.length - 2\n          ) {\n            shouldSplitAction = true;\n            break;\n          }\n          const minRowHeight = getRowHeight({\n            rowIndex: finalMinRowIndex,\n          });\n          deltaY0 += minRowHeight;\n        }\n        deltaY = Math.max(deltaY0, deltaY);\n        if (shouldSplitAction) {\n          splitAction.deltaY = event.deltaY - deltaY;\n        }\n      }\n\n      // 上移补尾\n      if (deltaY > 0) {\n        let deltaY0 = maxRow.y + maxRow.height + y - containerHeight;\n\n        while (deltaY > deltaY0) {\n          if (finalMaxRowIndex >= rowCount - 1) {\n            break;\n          }\n          finalMaxRowIndex++;\n          if (\n            finalMaxRowIndex - maxRow.rowIndex >=\n            virtualRows.current.length - 2\n          ) {\n            shouldSplitAction = true;\n            break;\n          }\n          const maxRowHeight = getRowHeight({\n            rowIndex: finalMaxRowIndex,\n          });\n          deltaY0 += maxRowHeight;\n        }\n        deltaY = Math.min(deltaY0, deltaY);\n        if (shouldSplitAction) {\n          splitAction.deltaY = event.deltaY - deltaY;\n        }\n      }\n\n      /**\n       * (3/5)\n       * 更新左上角坐标，其他所有位置都依据这个坐标进行位移\n       * x值区间：[containerWidth - contentWidth, 0]\n       * y值区间：[containerHeight - contentHeight, 0]\n       */\n      if (x - deltaX > 0) {\n        deltaX = x;\n      }\n      if (y - deltaY > 0) {\n        deltaY = y;\n      }\n\n      const nextX = x - deltaX;\n      const nextY = y - deltaY;\n\n      coordinate.current.setValue({\n        x: nextX,\n        y: nextY,\n      });\n\n      /**\n       * (4/5)\n       * 更新virtualColumns和virtualRows\n       * 如果deltaX > 0 (往左边移), 将最左边在可视范围外的columns依次移动到末尾\n       * 如果deltaX < 0（往右边移）, 将最右边在可视范围外的columns倒序依次移动到头部\n       * rows同理。\n       */\n      const outsideColumns: ColumnObject[] = [];\n      const outsideRows: RowObject[] = [];\n      const outsideCells: CellObject[] = [];\n\n      // 左移，在末尾增加\n      if (deltaX > 0) {\n        for (let i = 0; i < virtualColumns.current.length; i++) {\n          const column = virtualColumns.current[i];\n\n          /**\n           * 判断超出范围的依据是列的*右侧*小于0\n           */\n          const isOutOfView =\n            !column.freezed &&\n            column.x + nextX + column.width < freezedStartColumns;\n          if (isOutOfView) {\n            outsideColumns.push(column);\n          }\n        }\n\n        /**\n         * 所有column均已超出屏幕，此时根据finalMaxIndex重新计算\n         * 所有的column的位置\n         */\n\n        if (outsideColumns.length === virtualColumns.current.length) {\n          console.error(\"This shoud not happen\");\n        }\n        // console.log({ outsideColumns, maxColumnValue });\n        if (outsideColumns.length > 0) {\n          for (let i = 0; i < outsideColumns.length; i++) {\n            /**\n             * 先更新columnIndex\n             * 通过columnIndex拿到columnWidth\n             * 再更新maxColumnValue以供下一个column使用\n             */\n            const column = outsideColumns[i];\n            // 虽然超出屏幕但是已经到了底部，所以终止\n            if (maxColumn.columnIndex === columnCount - 1) {\n              break;\n            }\n\n            column.xAnimated.setValue(maxColumn.x + maxColumn.width);\n            column.columnIndex = maxColumn.columnIndex + 1;\n            const columnWidth = getColumnWidth(column);\n            column.widthAnimated.setValue(columnWidth);\n            maxColumn = column;\n          }\n        }\n      }\n\n      // 右移，在头部增加\n      if (deltaX < 0) {\n        for (let i = 0; i < virtualColumns.current.length; i++) {\n          const column = virtualColumns.current[i];\n          const columnValue = column.x;\n\n          /**\n           * 判断超出范围的依据是列的*左侧*大于containerWidth\n           */\n          const isOutOfView =\n            !column.freezed && columnValue + nextX > containerWidth;\n          if (isOutOfView) {\n            outsideColumns.unshift(column);\n          }\n        }\n        // console.log({ outsideColumns, minColumnValue });\n        if (outsideColumns.length > 0) {\n          for (let i = 0; i < outsideColumns.length; i++) {\n            if (minColumn.columnIndex === 0) {\n              break;\n            }\n            /**\n             * 先更新columnIndex\n             * 通过columnIndex拿到columnWidth\n             * 再更新minColumnValue以供下一个column使用\n             */\n            const column = outsideColumns[i];\n            column.columnIndex = minColumn.columnIndex - 1;\n            const columnWidth = getColumnWidth(column);\n            column.widthAnimated.setValue(columnWidth);\n            column.xAnimated.setValue(minColumn.x - columnWidth);\n            minColumn = column;\n          }\n        }\n      }\n\n      // 上移，在尾部增加\n      if (deltaY > 0) {\n        for (let i = 0; i < virtualRows.current.length; i++) {\n          const row = virtualRows.current[i];\n\n          /**\n           * 判断超出范围的依据是行的*下侧*小于0\n           */\n          const isOutOfView =\n            !row.freezed && row.y + nextY + row.height < freezedStartRows;\n          if (isOutOfView) {\n            outsideRows.push(row);\n          }\n        }\n\n        // console.log(outsideRows);\n        // console.log({ outsideRows, maxRowValue });\n        /**\n         * 所有column均已超出屏幕，此时根据finalMaxIndex重新计算\n         * 所有的column的位置\n         */\n        if (outsideRows.length === virtualRows.current.length) {\n          console.error(\"Warning: This shoud not happen\");\n        }\n\n        if (outsideRows.length > 0) {\n          for (let i = 0; i < outsideRows.length; i++) {\n            const row = outsideRows[i];\n            // 虽然超出屏幕但是已经到了底部，所以终止\n            if (maxRow.rowIndex === rowCount - 1) {\n              break;\n            }\n            row.rowIndex = maxRow.rowIndex + 1;\n            row.yAnimated.setValue(maxRow.y + maxRow.height);\n            const rowHeight = getRowHeight(row);\n            row.heightAnimated.setValue(rowHeight);\n            maxRow = row;\n          }\n        }\n      }\n\n      // 下移，在头部增加\n      if (deltaY < 0) {\n        for (let i = 0; i < virtualRows.current.length; i++) {\n          const row = virtualRows.current[i];\n\n          /**\n           * 判断超出范围的依据是行的*上侧*大于容器高度\n           */\n          const isOutOfView = !row.freezed && row.y + nextY > containerHeight;\n          if (isOutOfView) {\n            outsideRows.unshift(row);\n          }\n        }\n        // console.log({ outsideRows, minRowValue });\n        if (outsideRows.length > 0) {\n          for (let i = 0; i < outsideRows.length; i++) {\n            if (minRow.rowIndex === 0) {\n              break;\n            }\n            const row = outsideRows[i];\n            row.rowIndex = minRow.rowIndex - 1;\n            const rowHeight = getRowHeight(row);\n            row.heightAnimated.setValue(rowHeight);\n            row.yAnimated.setValue(minRow.y - row.height);\n            minRow = row;\n          }\n        }\n      }\n\n      /**\n       * (5/5)\n       * 计算需要更新的cell，并调用update方法更新cell\n       */\n      for (let i = 0; i < virtualCells.current.length; i++) {\n        const cell = virtualCells.current[i];\n        if (!outsideCells.includes(cell)) {\n          if (outsideColumns.includes(cell.column)) {\n            outsideCells.push(cell);\n          } else if (outsideRows.includes(cell.row)) {\n            outsideCells.push(cell);\n          }\n        }\n      }\n\n      if (!shouldSplitAction) {\n        for (const cell of outsideCells) {\n          cell.ref.current.update({\n            rowIndex: cell.row.rowIndex,\n            columnIndex: cell.column.columnIndex,\n          });\n        }\n      }\n\n      // 继续未完成action\n      if (shouldSplitAction) {\n        if (__DEV__) {\n          console.log(\"[DEV] splitAction\", {\n            ...splitAction,\n            prevDeltaY: deltaY,\n            prevDeltaX: deltaX,\n            containerWidth,\n            containerHeight,\n          });\n        }\n        requestAnimationFrame(() => {\n          updateCoordinate(splitAction);\n        });\n      }\n    },\n    [\n      getColumnWidth,\n      getRange,\n      columnCount,\n      rowCount,\n      getRowHeight,\n      freezedStartColumns,\n      freezedStartRows,\n    ]\n  );\n\n  const onWheel = useCallback(\n    (event) => {\n      const { deltaX, deltaY } = event;\n      updateCoordinate({ deltaX, deltaY });\n    },\n    [updateCoordinate]\n  );\n\n  useEffect(() => {\n    if (Platform.OS === \"web\") {\n      const el = view.current as any;\n\n      el.addEventListener(\"wheel\", onWheel);\n      return () => {\n        el.removeEventListener(\"wheel\", onWheel);\n      };\n    }\n  }, [onWheel]);\n\n  const panResponder = useMemo(() => {\n    let prevGestureState = null;\n    return PanResponder.create({\n      onPanResponderGrant: (event, gestureState) => {\n        prevGestureState = { ...gestureState };\n      },\n      onMoveShouldSetPanResponder: () => {\n        return true;\n      },\n      onPanResponderMove: (event, gestureState) => {\n        const deltaX = -gestureState.dx + prevGestureState.dx;\n        const deltaY = -gestureState.dy + prevGestureState.dy;\n        prevGestureState = { ...gestureState };\n        updateCoordinate({\n          deltaX,\n          deltaY,\n        });\n      },\n    });\n  }, [updateCoordinate]);\n\n  return (\n    <VirtualizedGridContext.Provider\n      value={{\n        onChangeColumn,\n        onChangeRow,\n        virtualColumns,\n        virtualCells,\n        virtualRows,\n        coordinate,\n        containerSize,\n        updateCoordinate,\n      }}\n    >\n      <View\n        ref={view}\n        style={[style, { overflow: \"hidden\" }]}\n        onLayout={onContainerLayout}\n        {...panResponder.panHandlers}\n      >\n        {showColumnLine && (\n          <Fragment key={`columns-${layoutCount}`}>\n            {virtualColumns.current.map((column, index) => {\n              return (\n                <Animated.View\n                  key={index}\n                  style={{\n                    position: \"absolute\",\n                    width: 1,\n                    backgroundColor: \"#ccc\",\n                    transform: [\n                      {\n                        translateX: Animated.add(\n                          column.xAnimated,\n                          coordinate.current.x\n                        ),\n                      },\n                    ],\n                    height: containerSize.current.y,\n                  }}\n                />\n              );\n            })}\n          </Fragment>\n        )}\n        {showRowLine && (\n          <Fragment key={`rows-${layoutCount}`}>\n            {virtualRows.current.map((row, index) => {\n              return (\n                <Animated.View\n                  key={index}\n                  style={{\n                    position: \"absolute\",\n                    backgroundColor: \"#ccc\",\n                    transform: [\n                      {\n                        translateY: Animated.add(\n                          row.yAnimated,\n                          coordinate.current.y\n                        ),\n                      },\n                    ],\n                    width: containerSize.current.x,\n                    height: 1,\n                  }}\n                />\n              );\n            })}\n          </Fragment>\n        )}\n        <Fragment key={`cells-${layoutCount}`}>\n          {virtualCells.current.map((cell, index) => {\n            return (\n              <Cell\n                coordinate={coordinate.current}\n                ref={cell.ref}\n                key={index}\n                column={cell.column}\n                row={cell.row}\n                renderCell={renderCell}\n              />\n            );\n          })}\n        </Fragment>\n      </View>\n    </VirtualizedGridContext.Provider>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Pressable, Animated, PanResponder } from \"react-native\";\n\nimport { useGrid } from \"./VirtualizedGridContext\";\nimport { ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport function ColumnResizer({\n  column,\n  row,\n}: {\n  column: ColumnObject;\n  row: RowObject;\n}) {\n  const {\n    virtualColumns,\n    virtualRows,\n    virtualCells,\n    updateCoordinate,\n    coordinate,\n    containerSize,\n    onChangeColumn,\n  } = useGrid();\n\n  const panResponder = useMemo(() => {\n    let rightColumns = [];\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminate\");\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminationRequest\");\n        return false;\n      },\n      onPanResponderReject: () => {\n        __DEV__ && console.log(\"[resizer] onPanResponderReject\");\n      },\n\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onMoveShouldSetPanResponder\");\n        return true;\n      },\n\n      onPanResponderGrant: () => {\n        __DEV__ && console.log(\"[resizer] grant\");\n        column.widthAnimated.setOffset(column.width);\n        rightColumns = [];\n        for (const item of virtualColumns.current) {\n          if (item.columnIndex > column.columnIndex) {\n            rightColumns.push(item);\n            item.xAnimated.setOffset(item.x);\n          }\n        }\n      },\n\n      onPanResponderMove: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] move\");\n        for (const item of rightColumns) {\n          item.xAnimated.setValue(gestureState.dx);\n        }\n        column.widthAnimated.setValue(gestureState.dx);\n        onChangeColumn(column);\n      },\n\n      onPanResponderRelease: () => {\n        __DEV__ && console.log(\"[resizer] release\");\n        column.widthAnimated.flattenOffset();\n        for (const item of rightColumns) {\n          item.xAnimated.flattenOffset();\n        }\n        rightColumns = [];\n      },\n    });\n  }, [column, virtualColumns, onChangeColumn]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n          zIndex: 10,\n          height: row.height,\n          width: 20,\n        },\n      ]}\n    >\n      <Pressable\n        style={[\n          {\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            height: row.height,\n          },\n        ]}\n      >\n        {(state) => {\n          const hovered = (state as unknown as any).hovered;\n          return (\n            <Animated.View\n              style={[\n                {\n                  height: row.heightAnimated,\n                  width: 1,\n                  backgroundColor: \"#ccc\",\n                },\n                hovered && {\n                  width: 5,\n                  backgroundColor: \"blue\",\n                },\n              ]}\n            />\n          );\n        }}\n      </Pressable>\n    </Animated.View>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Pressable, Animated, PanResponder } from \"react-native\";\n\nimport { useGrid } from \"./VirtualizedGridContext\";\nimport { ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport function RowResizer({\n  column,\n  row,\n}: {\n  column: ColumnObject;\n  row: RowObject;\n}) {\n  const { virtualRows, onChangeRow } = useGrid();\n\n  const panResponder = useMemo(() => {\n    let bottomRows = [];\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminate\");\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminationRequest\");\n        return false;\n      },\n      onPanResponderReject: () => {\n        __DEV__ && console.log(\"[resizer] onPanResponderReject\");\n      },\n\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onMoveShouldSetPanResponder\");\n        return true;\n      },\n\n      onPanResponderGrant: () => {\n        __DEV__ && console.log(\"[resizer] grant\");\n        row.heightAnimated.setOffset(row.height);\n        bottomRows = [];\n        for (const item of virtualRows.current) {\n          if (item.rowIndex > row.rowIndex) {\n            bottomRows.push(item);\n            item.yAnimated.setOffset(item.y);\n          }\n        }\n      },\n\n      onPanResponderMove: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] move\");\n        for (const item of bottomRows) {\n          item.yAnimated.setValue(gestureState.dy);\n        }\n        row.heightAnimated.setValue(gestureState.dy);\n        onChangeRow(row);\n      },\n\n      onPanResponderRelease: () => {\n        __DEV__ && console.log(\"[resizer] release\");\n        row.heightAnimated.flattenOffset();\n        for (const item of bottomRows) {\n          item.yAnimated.flattenOffset();\n        }\n        bottomRows = [];\n      },\n    });\n  }, [row, virtualRows, onChangeRow]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          bottom: 0,\n          left: 0,\n          zIndex: 10,\n          height: 20,\n          width: column.width,\n        },\n      ]}\n    >\n      <Pressable\n        style={[\n          {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            width: column.width,\n            height: 20,\n          },\n        ]}\n      >\n        {(state) => {\n          const hovered = (state as unknown as any).hovered;\n          return (\n            <Animated.View\n              style={[\n                {\n                  width: column.widthAnimated,\n                  height: 1,\n                  backgroundColor: \"#ccc\",\n                },\n                hovered && {\n                  height: 5,\n                  backgroundColor: \"blue\",\n                },\n              ]}\n            />\n          );\n        }}\n      </Pressable>\n    </Animated.View>\n  );\n}\n","import React, { useCallback, useLayoutEffect, useRef, useState } from \"react\";\nimport { Platform, Text, useWindowDimensions, View } from \"react-native\";\n\nimport { Header } from \"./docs/Header\";\nimport {\n  VirtualizedGrid,\n  ColumnResizer,\n  ColumnObject,\n  RowObject,\n  RowResizer,\n} from \"./src/index\";\n\nexport default function App() {\n  const { width, height } = useWindowDimensions();\n  const columnWidthCache = useRef(new Map<string, number>());\n  const rowHeightCache = useRef(new Map<string, number>());\n\n  const updateColumn = useCallback((column: ColumnObject) => {\n    columnWidthCache.current.set(`${column.columnIndex}`, column.width);\n  }, []);\n  const updateRow = useCallback((row: RowObject) => {\n    rowHeightCache.current.set(`${row.rowIndex}`, row.height);\n  }, []);\n\n  useLayoutEffect(() => {\n    if (Platform.OS === \"web\") {\n      document.body.style.overflow = \"hidden\";\n    }\n  }, []);\n  return (\n    <>\n      <Header />\n\n      <VirtualizedGrid\n        columnCount={Number.MAX_SAFE_INTEGER}\n        rowCount={Number.MAX_SAFE_INTEGER}\n        freezedColumns={{ start: 1 }}\n        freezedRows={{ start: 1 }}\n        style={[\n          {\n            // borderWidth: 1,\n            borderColor: \"#fff\",\n            width,\n            height: height - 56,\n          },\n          Platform.select({\n            web: {\n              userSelect: \"none\",\n            },\n          }) as unknown,\n        ]}\n        getColumnWidth={(info: { columnIndex: number }) => {\n          if (columnWidthCache.current.has(`${info.columnIndex}`)) {\n            return columnWidthCache.current.get(`${info.columnIndex}`);\n          }\n          return [50, 140, 200, 120][info.columnIndex % 4];\n        }}\n        getRowHeight={(info: { rowIndex: number }) => {\n          if (rowHeightCache.current.has(`${info.rowIndex}`)) {\n            return rowHeightCache.current.get(`${info.rowIndex}`);\n          }\n          return [40, 50, 60, 90, 40, 45, 40, 50, 55, 50, 60][\n            info.rowIndex % 10\n          ];\n        }}\n        onChangeColumn={updateColumn}\n        onChangeRow={updateRow}\n        renderCell={(info) => {\n          return (\n            <View\n              style={{\n                flex: 1,\n                backgroundColor:\n                  info.rowIndex % 2 === 1 ? \"rgb(246, 248, 250)\" : \"#fff\",\n                borderTopWidth: 1,\n                borderLeftWidth: 1,\n                borderColor: \"rgb(216, 222, 228)\",\n                padding: 4,\n                borderRightWidth: info.columnIndex === 0 ? 1 : 0,\n                borderBottomWidth: info.rowIndex === 0 ? 1 : 0,\n              }}\n            >\n              {info.columnIndex === 0 && info.rowIndex === 0 ? null : (\n                <>\n                  <Text>c: {info.columnIndex}</Text>\n                  <Text>r: {info.rowIndex}</Text>\n                </>\n              )}\n              {info.rowIndex === 0 && (\n                <ColumnResizer row={info.row} column={info.column} />\n              )}\n              {info.columnIndex === 0 && (\n                <RowResizer row={info.row} column={info.column} />\n              )}\n            </View>\n          );\n        }}\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}