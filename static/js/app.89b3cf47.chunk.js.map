{"version":3,"sources":["docs/Header.tsx","src/Cell.tsx","src/VirtualizedGridContext.tsx","src/VirtualizedGridUtils.tsx","src/VirtualizedGrid.tsx","src/ColumnResizer.tsx","src/ColumnReorder.tsx","src/RowResizer.tsx","App.tsx"],"names":["Header","View","style","height","flexDirection","justifyContent","alignItems","paddingLeft","Text","fontWeight","fontSize","paddingRight","TouchableOpacity","marginRight","onPress","Linking","openURL","MaterialCommunityIcons","name","size","color","Cell","renderCell","column","row","Animated","position","width","widthAnimated","zIndex","add","zIndexAnimated","heightAnimated","transform","translateX","xAnimated","translateY","yAnimated","VirtualizedGridContext","createContext","useGrid","useContext","CoordinateObject","this","_x","_y","Value","rowIndex","columnIndex","left","top","val","setValue","ContentObject","_offsetX","_offsetY","offsetXAnimated","offsetYAnimated","_width","_height","ColumnObject","x","freezed","highlightOpacityAnimated","JSON","parse","stringify","RowObject","y","ref","createRef","VirtualizedGrid","debug","columnCount","rowCount","onChangeColumn","onChangeRow","getColumnWidth","getRowHeight","freezedColumns","freezedRows","onChangeColumnOrder","onChangeRowOrder","onChangeVisibleArea","useScrollView","view","useRef","freezedStartColumns","start","freezedStartRows","virtualColumns","virtualRows","useState","notFreezed","columnFreezed","rowFreezed","allFreezed","groups","setGroups","coordinate","containerSize","update","useCallback","console","time","current","right","bottom","currentColumnIndex","currentRowIndex","rows","columns","minColumn","maxColumn","minRow","maxRow","freezedIndex","freezedX","freezedColumnWidth","push","currentColumnWidth","slice","freezedY","freezedRowHeight","currentRowHeight","cell","timeEnd","log","length","children","onContainerLayout","event","nativeEvent","layout","updateCoordinate","deltaX","deltaY","nextX","currentLeft","currentRight","nextY","currentTop","currentBottom","onWheel","useMemo","timer","totalX","totalY","clearTimeout","setTimeout","onScroll","contentOffset","useEffect","Platform","OS","el","addEventListener","removeEventListener","panResponder","prevGestureState","ticker","timestamp","Date","now","vx","vy","finalX","finalY","init","clearInterval","setInterval","track","elapsed","autoScroll","per","Math","exp","requestAnimationFrame","PanResponder","create","onMoveShouldSetPanResponder","onPanResponderGrant","gestureState","onPanResponderMove","dx","dy","onPanResponderRelease","Provider","value","overflow","onLayout","panHandlers","CellGroup","ScrollView","scrollEventThrottle","ColumnResizer","rightColumns","onPanResponderTerminate","onPanResponderTerminationRequest","onPanResponderReject","setOffset","item","flattenOffset","Pressable","display","state","hovered","backgroundColor","ColumnReorder","startX","highlightColumn","startColumnIndex","locationX","itemCenterX","abs","fromIndex","toIndex","RowResizer","bottomRows","App","useWindowDimensions","columnWidthCache","Map","rowHeightCache","updateColumn","set","updateRow","options","useLayoutEffect","document","body","__DEV__","Number","MAX_SAFE_INTEGER","borderColor","select","web","userSelect","info","has","get","round","random","flex","borderTopWidth","borderLeftWidth","padding","borderRightWidth","borderBottomWidth","opacity","pointerEvents"],"mappings":"2MAGO,SAASA,IACd,OACE,eAACC,EAAA,EAAD,CACEC,MAAO,CACLC,OAAQ,GACRC,cAAe,MACfC,eAAgB,gBAChBC,WAAY,UALhB,UAQE,cAACL,EAAA,EAAD,CAAMC,MAAO,CAAEK,YAAa,IAA5B,SACE,cAACC,EAAA,EAAD,CAAMN,MAAO,CAAEO,WAAY,OAAQC,SAAU,IAA7C,6CAIF,eAACT,EAAA,EAAD,CACEC,MAAO,CAAES,aAAc,GAAIP,cAAe,MAAOE,WAAY,UAD/D,UAGE,cAACM,EAAA,EAAD,CACEV,MAAO,CAAEW,YAAa,IACtBC,QAAS,WACPC,IAAQC,QAAQ,8BAHpB,SAME,cAACC,EAAA,EAAD,CAAwBC,KAAK,UAAUC,KAAM,GAAIC,MAAM,cAEzD,cAACR,EAAA,EAAD,CACEE,QAAS,WACPC,IAAQC,QACN,8DAHN,SAOE,cAACC,EAAA,EAAD,CAAwBC,KAAK,SAASC,KAAM,GAAIC,MAAM,kB,sDChCzD,SAASC,EAAT,GAAuD,IAAvCC,EAAsC,EAAtCA,WAAYC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,IACzC,OACE,cAACC,EAAA,EAASxB,KAAV,CACEC,MAAO,CACLwB,SAAU,WACVC,MAAOJ,EAAOK,cACdC,OAAQJ,IAASK,IAAIP,EAAOQ,eAAgBP,EAAIO,gBAChD5B,OAAQqB,EAAIQ,eACZC,UAAW,CACT,CACEC,WAAYX,EAAOY,WAErB,CACEC,WAAYZ,EAAIa,aAXxB,SAgBGf,EAAW,CAAEC,SAAQC,UCGrB,IAAMc,EAAyBC,wBAAc,IACvCC,EAAU,kBAAMC,qBAAWH,I,kCCrBjC,IAAMI,EAAb,WACE,aAAe,YACbC,KAAKC,GAAK,EACVD,KAAKE,GAAK,EACVF,KAAKR,UAAY,IAAIV,IAASqB,MAAM,GACpCH,KAAKN,UAAY,IAAIZ,IAASqB,MAAM,GACpCH,KAAKI,SAAW,EAChBJ,KAAKK,YAAc,EACnBL,KAAKM,KAAO,EACZN,KAAKO,IAAM,EATf,2BAoBE,WACE,OAAOP,KAAKC,IArBhB,IAgBE,SAAMO,GACJR,KAAKC,GAAKO,EACVR,KAAKR,UAAUiB,SAASD,KAlB5B,aA+BE,WACE,OAAOR,KAAKE,IAhChB,IA2BE,SAAMM,GACJR,KAAKE,GAAKM,EACVR,KAAKN,UAAUe,SAASD,OA7B5B,KA6DaE,EAAb,WACE,aAAe,YACbV,KAAKW,SAAW,EAChBX,KAAKY,SAAW,EAChBZ,KAAKa,gBAAkB,IAAI/B,IAASqB,MAAM,GAC1CH,KAAKc,gBAAkB,IAAIhC,IAASqB,MAAM,GAE1CH,KAAKe,OAAS,EACdf,KAAKgB,QAAU,EACfhB,KAAKf,cAAgB,IAAIH,IAASqB,MAAM,GACxCH,KAAKX,eAAiB,IAAIP,IAASqB,MAAM,GAV7C,iCA4BE,WACE,OAAOH,KAAKW,UA7BhB,IAuBE,SAAYH,GACVR,KAAKW,SAAW,EAChBX,KAAKa,gBAAgBJ,SAASD,KAzBlC,mBAqCE,WACE,OAAOR,KAAKY,UAtChB,IAgCE,SAAYJ,GACVR,KAAKY,SAAW,EAChBZ,KAAKc,gBAAgBL,SAASD,KAlClC,iBA8CE,WACE,OAAOR,KAAKe,QA/ChB,IAyCE,SAAUP,GACRR,KAAKe,OAAS,EACdf,KAAKf,cAAcwB,SAASD,KA3ChC,kBAuDE,WACE,OAAOR,KAAKgB,SAxDhB,IAkDE,SAAWR,GACTR,KAAKgB,QAAU,EACfhB,KAAKX,eAAeoB,SAASD,OApDjC,KA4DaS,EAAb,WACE,cAUI,IATFC,EASC,EATDA,EACAlC,EAQC,EARDA,MACAqB,EAOC,EAPDA,YAOC,IANDc,eAMC,qBACDnB,KAAKR,UAAY,IAAIV,IAASqB,MAAMe,GACpClB,KAAKf,cAAgB,IAAIH,IAASqB,MAAMnB,GACxCgB,KAAKK,YAAcA,EACnBL,KAAKmB,QAAUA,EACfnB,KAAKZ,eAAiB,IAAIN,IAASqB,MAAMgB,EAAU,EAAI,GACvDnB,KAAKoB,yBAA2B,IAAItC,IAASqB,MAAM,GAjBvD,2BA2BE,WACE,OAAOkB,KAAKC,MAAMD,KAAKE,UAAUvB,KAAKR,cA5B1C,iBA8BE,WACE,OAAO6B,KAAKC,MAAMD,KAAKE,UAAUvB,KAAKf,oBA/B1C,KAmCauC,EAAb,WACE,cAUI,IATFC,EASC,EATDA,EACAjE,EAQC,EARDA,OACA4C,EAOC,EAPDA,SAOC,IANDe,eAMC,qBACDnB,KAAKN,UAAY,IAAIZ,IAASqB,MAAMsB,GACpCzB,KAAKX,eAAiB,IAAIP,IAASqB,MAAM3C,GACzCwC,KAAKI,SAAWA,EAChBJ,KAAKmB,QAAUA,EACfnB,KAAKZ,eAAiB,IAAIN,IAASqB,MAAMgB,EAAU,EAAI,GACvDnB,KAAKoB,yBAA2B,IAAItC,IAASqB,MAAM,GAjBvD,2BA2BE,WACE,OAAOkB,KAAKC,MAAMD,KAAKE,UAAUvB,KAAKN,cA5B1C,kBA+BE,WACE,OAAO2B,KAAKC,MAAMD,KAAKE,UAAUvB,KAAKX,qBAhC1C,MAoCA,WACE,cAAwE,IAA1DT,EAAyD,EAAzDA,OAAQC,EAAiD,EAAjDA,IAAiD,YACrEmB,KAAKpB,OAASA,EACdoB,KAAKnB,IAAMA,EACXmB,KAAK0B,IAAMC,sBAJf,oBAWE,WACE,OAAO3B,KAAKpB,OAAOsC,IAZvB,aAeE,WACE,OAAOlB,KAAKnB,IAAI4C,IAhBpB,iBAmBE,WACE,OAAOzB,KAAKpB,OAAOI,QApBvB,kBAsBE,WACE,OAAOgB,KAAKnB,IAAIrB,WAvBpB,G,u4CChLO,SAASoE,EAAT,GAgBmB,IAAD,QAfvBC,aAeuB,SAdvBtE,EAcuB,EAdvBA,MAGAoB,GAWuB,EAbvBmD,YAauB,EAZvBC,SAYuB,EAXvBpD,YAWuB,IAVvBqD,sBAUuB,MAVN,SAACpD,KAUK,MATvBqD,mBASuB,MATT,SAACpD,KASQ,MARvBqD,sBAQuB,MARN,kBAAM,KAQA,MAPvBC,oBAOuB,MAPR,kBAAM,IAOE,MANvBC,sBAMuB,MANN,GAMM,MALvBC,mBAKuB,MALT,GAKS,MAJvBC,2BAIuB,MAJD,aAIC,MAHvBC,wBAGuB,MAHJ,aAGI,MAFvBC,2BAEuB,MAFD,aAEC,MADvBC,qBACuB,SACjBC,EAAOC,iBAAa,MAGpBC,GAFaD,iBAAmB,MAEb,SAAGP,EAAeS,OAAlB,EAA2B,GAC9CC,EAAgB,SAAGT,EAAYQ,OAAf,EAAwB,EAExCE,EAAiBJ,iBAAO,IACxBK,EAAcL,iBAAO,IAE3B,EAA4BM,mBAS1B,CACAC,WAAY,GACZC,cAAe,GACfC,WAAY,GACZC,WAAY,KAbd,WAAOC,EAAP,KAAeC,EAAf,KAoBMC,EAAab,iBAAO,IAAI5C,GAKxB0D,EAAgBd,iBAAO,CAAE3D,MAAO,EAAGxB,OAAQ,IAY3CkG,IAPUf,iBAAO,IAAIjC,GAOZiD,uBAAY,WACrB9B,GACF+B,QAAQC,KAAK,UAEf,MAA0BJ,EAAcK,QAAhC9E,EAAR,EAAQA,MAAOxB,EAAf,EAAeA,OACf,EAAmDgG,EAAWM,QAAtD1D,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,YAAaC,EAA/B,EAA+BA,KAAMC,EAArC,EAAqCA,IAAKW,EAA1C,EAA0CA,EAAGO,EAA7C,EAA6CA,EACzCsC,EAAQzD,EACR0D,EAASzD,EACT0D,EAAqB5D,EACrB6D,EAAkB9D,EAChB+D,EAAO,GACPC,EAAU,GACZC,EAAY,KACZC,EAAY,KACZC,EAAS,KACTC,EAAS,KAEb,GACE5B,EAAsB,GACtBqB,EAAqBrB,EAAsB,EAK3C,IAFA,IAAI6B,EAAe,EACfC,EAAW,EACRD,EAAe7B,GAAqB,CACzC,IAAM+B,EAAqBzC,EAAe,CACxC7B,YAAaoE,IAEfL,EAAQQ,KACN,IAAI3D,EAAa,CACfZ,YAAaoE,EACbzF,MAAO2F,EACPzD,EAAGwD,EACHvD,SAAS,KAGbsD,IACAC,GAAYC,EAIhB,OAAa,CACX,IAAME,EAAqB3C,EAAe,CACxC7B,YAAa4D,IAkBf,GAfAG,EAAQQ,KACN,IAAI3D,EAAa,CACfZ,YAAa4D,EACbjF,MAAO6F,EACP3D,EAAG6C,EACH5C,QAAS8C,EAAqBrB,KAG7ByB,IACHA,EAAYD,EAAQU,OAAO,GAAG,IAIhCb,KADAF,GAASc,IAGI3D,EAAIlC,EAAO,CAEtBsF,EAAYF,EAAQU,OAAO,GAAG,GAC9B,OAIJ,GAAIhC,EAAmB,GAAKoB,EAAkBpB,EAAmB,EAI/D,IAFA,IAAI2B,EAAe,EACfM,EAAW,EACRN,EAAe3B,GAAkB,CACtC,IAAMkC,EAAmB7C,EAAa,CACpC/B,SAAUqE,IAEZN,EAAKS,KACH,IAAIpD,EAAU,CACZpB,SAAUqE,EACVjH,OAAQwH,EACRvD,EAAGsD,EACH5D,SAAS,KAGbsD,IACAM,GAAYC,EAGhB,OAAa,CACX,IAAMC,EAAmB9C,EAAa,CACpC/B,SAAU8D,IAkBZ,GAhBAC,EAAKS,KACH,IAAIpD,EAAU,CACZpB,SAAU8D,EACV1G,OAAQyH,EACRxD,EAAGuC,EACH7C,QAAS+C,EAAkBpB,KAI1ByB,IACHA,EAASJ,EAAKW,OAAO,GAAG,IAI1BZ,KADAF,GAAUiB,IAGIxD,EAAIjE,EAAQ,CAExBgH,EAASL,EAAKW,OAAO,GAAG,GACxB,OAIJ/B,EAAee,QAAUM,EACzBpB,EAAYc,QAAUK,EAOtB,IALA,IAAMd,EAAa,GACbH,EAAa,GACbC,EAAgB,GAChBC,EAAa,GAEnB,MAAkBe,EAAlB,eACE,IADG,IACH,EADStF,EAAG,KACZ,IAAqBuF,KAArB,aAA8B,CAAC,IAApBxF,GAAmB,QACtBsG,GACJ,cAACxG,EAAD,CAEEE,OAAQA,GACRC,IAAKA,EACLF,WAAYA,GAHJC,GAAOyB,YADjB,IACgCxB,EAAIuB,UAMlCxB,GAAOuC,SAAWtC,EAAIsC,QACxBkC,EAAWuB,KAAKM,IACPtG,GAAOuC,QAChBgC,EAAcyB,KAAKM,IACVrG,EAAIsC,QACbiC,EAAWwB,KAAKM,IAEhBhC,EAAW0B,KAAKM,IAKlBrD,IACF+B,QAAQuB,QAAQ,UAChBvB,QAAQwB,IACN,QACAhB,EAAQiB,OACRlB,EAAKkB,OACLjB,EAAQiB,OAASlB,EAAKkB,QAExBzB,QAAQC,KAAK,aAGfrB,EAAoB,CAAE+B,SAAQF,YAAWG,SAAQF,cAEjDf,EAAU,CACRL,WAAY,CAAEoC,SAAUpC,EAAYhC,GAAG,EAAMO,GAAG,GAChD0B,cAAe,CAAEmC,SAAUnC,EAAe1B,GAAG,GAC7C2B,WAAY,CAAEkC,SAAUlC,EAAYlC,GAAG,GACvCmC,WAAY,CAAEiC,SAAUjC,KAEtBxB,GACF+B,QAAQuB,QAAQ,cAEjB,CACDtD,EACAW,EACAN,EACAC,EACAxD,EACAiE,EACAE,KAQIyC,GAAoB5B,uBACxB,SAAC6B,GACC,MAA0BA,EAAMC,YAAYC,OAApC1G,EAAR,EAAQA,MAAOxB,EAAf,EAAeA,OACfiG,EAAcK,QAAQ9E,MAAQA,EAC9ByE,EAAcK,QAAQtG,OAASA,EAC/BkG,OAEF,CAACA,KASGiC,GAAmBhC,uBACvB,SAAC6B,GACK3D,GACF+B,QAAQC,KAAK,oBAEf,IAAQ+B,EAAmBJ,EAAnBI,OAAQC,EAAWL,EAAXK,OAChB,EAA6CrC,EAAWM,QAAhDzD,EAAR,EAAQA,YAAaD,EAArB,EAAqBA,SAAUE,EAA/B,EAA+BA,KAAMC,EAArC,EAAqCA,IACjCuF,EAAQtC,EAAWM,QAAQ5C,EAAI0E,EACnC,GAAIE,EAAQ,EAIVA,EAAQ,EACRtC,EAAWM,QAAQ5C,EAAI,EACvBsC,EAAWM,QAAQzD,YAAc,EACjCmD,EAAWM,QAAQxD,KAAO,MACrB,CAILkD,EAAWM,QAAQ5C,EAAI4E,EAKvB,IAAI7B,EAAqB5D,EACrB0F,EAAczF,EACd0F,EAAe1F,EACnB,GAAIsF,EAAS,EAAG,CAEd,OAAa,CAMX,GAFAG,EAAcC,GACdA,GAJqB9D,EAAe,CAClC7B,YAAa4D,OAIM6B,EACnB,MAEF7B,IAEFT,EAAWM,QAAQzD,YAAc4D,EACjCT,EAAWM,QAAQxD,KAAOyF,MACrB,CAEL,OACMA,IAAgBD,IADT,CAIX7B,IAKA8B,GAHqB7D,EAAe,CAClC7B,YAAa4D,IAIjBT,EAAWM,QAAQzD,YAAc4D,EACjCT,EAAWM,QAAQxD,KAAOyF,GAG9B,IAAIE,EAAQzC,EAAWM,QAAQrC,EAAIoE,EACnC,GAAII,EAAQ,EAIVA,EAAQ,EACRzC,EAAWM,QAAQrC,EAAI,EACvB+B,EAAWM,QAAQvD,IAAM,EACzBiD,EAAWM,QAAQ1D,SAAW,MACzB,CAILoD,EAAWM,QAAQrC,EAAIwE,EAMvB,IAAI/B,EAAkB9D,EAClB8F,EAAa3F,EACb4F,EAAgB5F,EACpB,GAAIsF,EAAS,EAAG,CAEd,OAAa,CAMX,GAFAK,EAAaC,GACbA,GAJahE,EAAa,CACxB/B,SAAU8D,OAIU+B,EACpB,MAEF/B,IAEFV,EAAWM,QAAQ1D,SAAW8D,EAC9BV,EAAWM,QAAQvD,IAAM2F,MACpB,CAEL,OACMA,IAAeD,IADR,CAIX/B,IAKAgC,GAHa/D,EAAa,CACxB/B,SAAU8D,IAIdV,EAAWM,QAAQ1D,SAAW8D,EAC9BV,EAAWM,QAAQvD,IAAM2F,GAIzBrE,IACF+B,QAAQwB,IAAI5B,EAAWM,SACvBF,QAAQuB,QAAQ,qBAElBzB,OAEF,CAACA,GAAQ7B,EAAOK,EAAgBC,IAG5BiE,GAAUC,mBAAQ,WACtB,IAAIC,EAAQ,KACRC,EAAS,EACTC,EAAS,EACb,OAAO,SAAChB,GAINiB,aAAaH,GACb,IAAQV,EAAmBJ,EAAnBI,OAAQC,EAAWL,EAAXK,OAChBU,GAAUX,EACVY,GAAUX,EACVS,EAAQI,YAAW,WACjBf,GAAiB,CACfC,OAAQW,EACRV,OAAQW,IAEVD,EAAS,EACTC,EAAS,IACR,MAEJ,CAACb,KAEEgB,GAAWhD,uBACf,SAAC6B,GACC,MAAiBA,EAAMC,YAAYmB,cAA3B1F,EAAR,EAAQA,EAAGO,EAAX,EAAWA,EACX+B,EAAWM,QAAQrC,GAAKA,EACxB+B,EAAWM,QAAQ5C,GAAKA,EACxBwF,WAAWhD,GAAQ,KAErB,CAACA,KAGHmD,qBAAU,WACR,IAAKpE,GAAiC,QAAhBqE,IAASC,GAAc,CAC3C,IAAMC,EAAKtE,EAAKoB,QAChB,GAAIkD,EAEF,OADAA,EAAGC,iBAAiB,QAASb,IACtB,WACLY,EAAGE,oBAAoB,QAASd,QAIrC,CAAC3D,EAAe2D,KAQnB,IAAMe,GAAed,mBAAQ,WAC3B,IAAIe,EAAmB,KACnBC,EAAS,KACTzB,EAAS,EACTC,EAAS,EAKTU,EAAS,EACTC,EAAS,EACTc,EAAYC,KAAKC,MAIjBC,EAAK,EAILC,EAAK,EAKLC,EAAS,EACTC,EAAS,EAMb,SAASC,IACPF,EAAS,EACTC,EAAS,EACTrB,EAAS,EACTC,EAAS,EACTiB,EAAK,EACLC,EAAK,EACLJ,EAAYC,KAAKC,MACjBM,cAAcT,GACdA,EAASU,YAAYC,EAXP,IAoBhB,SAASA,IAIP,IAAMR,EAAMD,KAAKC,MACXS,EAAUT,EAAMF,EAAY,EAClCA,EAAYE,EAGZC,EAAiB,IAFE,IAAelB,EAAU0B,GAEhB,GAALR,EACvBC,EAAiB,IAFE,IAAelB,EAAUyB,GAEhB,GAALP,EAEvBnB,EAAS,EACTC,EAAS,EAMX,SAAS0B,IACP,IAAMD,EAAUV,KAAKC,MAAQF,EACvBa,EAAMC,KAAKC,KAAKJ,EA3CH,KA4CbrC,EAAS+B,EAASQ,EAClBtC,EAAS+B,EAASO,EACpBvC,EAAS,IAAOA,GAAU,IAAOC,EAAS,IAAOA,GAAU,IAC7DF,GAAiB,CAAEC,SAAQC,WAC3ByC,sBAAsBJ,IAEtBvC,GAAiB,CAAEC,SAAQC,WAI/B,OAAO0C,IAAaC,OAAO,CACzBC,4BAA6B,WAC3B,OAAO,GAETC,oBAAqB,SAAClD,EAAOmD,GAC3BvB,EAAgB,KAAQuB,GACxBd,KAEFe,mBAAoB,SAACpD,EAAOmD,GAC1B,IAAKvB,EAGH,OAFAA,EAAgB,KAAQuB,QACxBd,IAGFjC,GAAU+C,EAAaE,GAAKzB,EAAiByB,GAC7ChD,GAAU8C,EAAaG,GAAK1B,EAAiB0B,GAC7CvC,EAASX,EACTY,EAASX,EACTuB,EAAgB,KAAQuB,GACxBhD,GAAiB,CACfC,SACAC,YAGJkD,sBAAuB,WACrB3B,EAAmB,KACnBU,cAAcT,IACVI,EAAK,IAAMA,GAAM,MACnBE,EAAS,GAAMF,IAEbC,EAAK,IAAMA,GAAM,MACnBE,EAAS,GAAMF,GAEjBJ,EAAYC,KAAKC,MACjBc,sBAAsBJ,QAGzB,CAACvC,KAEJ,OACE,cAAChG,EAAuBqJ,SAAxB,CACEC,MAAO,CACLlG,iBACAC,cACAhB,iBACAC,cACAuB,aACAC,gBACAkC,oBACArD,sBACAC,oBAVJ,SAaE,eAACjF,EAAA,EAAD,KACEoE,IAAKgB,EACLnF,MAAO,CACL,CACE2L,SAAU,UAEZ3L,GAEF4L,SAAU5D,IACL9C,EAAgB,GAAK0E,GAAaiC,aATzC,eAWI3G,GACA,cAAC4G,EAAD,CACE9J,WAAYiE,EAAWM,QAAQtE,UAC/BC,WAAY+D,EAAWM,QAAQpE,UAFjC,SAIG4D,EAAOJ,WAAWoC,WAGtB7C,GAEC,cAAC6G,EAAA,EAAD,CACE/L,MAAO,CACLwB,SAAU,WACVwB,IAAK,GACLD,KAAM,GACNyD,MAAO,EACPC,OAAQ,EACRkF,SAAU,UAEZK,oBAAqB,EACrB5C,SAAUA,GAVZ,SAaE,cAACrJ,EAAA,EAAD,CAAMC,MAAO,CAAEyB,MAAO,IAAOxB,OAAQ,KAArC,SAEE,cAACF,EAAA,EAAD,CACEC,MAAO,CACL,CACEwB,SAAU,WACVwB,KAAM,GACND,MAAO,KALb,SASGgD,EAAOJ,WAAWoC,eAM3B,cAAC+D,EAAD,CAAW5J,WAAY+D,EAAWM,QAAQpE,UAA1C,SACG4D,EAAOH,cAAcmC,WAExB,cAAC+D,EAAD,CAAW9J,WAAYiE,EAAWM,QAAQtE,UAA1C,SACG8D,EAAOF,WAAWkC,WAErB,cAAC+D,EAAD,UAAY/F,EAAOD,WAAWiC,iBAMtC,SAAS+D,EAAT,GAQI,IAAD,IAPD9J,kBAOC,MAPY,EAOZ,MANDE,kBAMC,MANY,EAMZ,EALD6F,EAKC,EALDA,SAMA,OACE,cAACxG,EAAA,EAASxB,KAAV,CACEC,MAAO,CACL,CACEwB,SAAU,WACVO,UAAW,CAAC,CAAEC,cAAc,CAAEE,iBAJpC,SAQG6F,I,m5CC1pBA,SAASkE,EAAT,GAMH,IALF5K,EAKC,EALDA,OACAC,EAIC,EAJDA,IAKA,EAA2CgB,IAAnCkD,EAAR,EAAQA,eAAgBf,EAAxB,EAAwBA,eAElBmF,EAAed,mBAAQ,WAC3B,IAAIoD,EAAe,GAEnB,OAAOlB,IAAaC,OAAO,CACzBkB,wBAAyB,SAAClE,EAAOmD,KAGjCgB,iCAAkC,SAACnE,EAAOmD,GAExC,OAAO,GAETiB,qBAAsB,aAItBnB,4BAA6B,SAACjD,EAAOmD,GAEnC,OAAO,GAGTD,oBAAqB,WAEnB9J,EAAOK,cAAc4K,UAAUjL,EAAOI,OACtCyK,EAAe,GACf,cAAmB1G,EAAee,WAAlC,aAA2C,CAAC,IAAjCgG,EAAgC,QACrCA,EAAKzJ,YAAczB,EAAOyB,cAC5BoJ,EAAa7E,KAAKkF,GAClBA,EAAKtK,UAAUqK,UAAUC,EAAK5I,MAKpC0H,mBAAoB,SAACpD,EAAOmD,GAE1B,cAAmBc,KAAnB,aAAiC,SAC1BjK,UAAUiB,SAASkI,EAAaE,IAEvCjK,EAAOK,cAAcwB,SAASkI,EAAaE,IAC3C7G,EAAepD,IAGjBmK,sBAAuB,WAErBnK,EAAOK,cAAc8K,gBACrB,cAAmBN,KAAnB,aAAiC,SAC1BjK,UAAUuK,gBAEjBN,EAAe,QAGlB,CAAC7K,EAAQmE,EAAgBf,IAE5B,OACE,cAAClD,EAAA,EAASxB,KAAV,OACM6J,EAAaiC,aADnB,IAEE7L,MAAO,CACL,CACEwB,SAAU,WACVwB,IAAK,EACLwD,MAAO,EACP7E,OAAQ,GACR1B,OAAQqB,EAAIrB,OACZwB,MAAO,KATb,SAaE,cAACgL,EAAA,EAAD,CACEzM,MAAO,CACL,CACE0M,QAAS,OACTtM,WAAY,WACZH,OAAQqB,EAAIrB,SALlB,SASG,SAAC0M,GACA,IAAMC,EAAWD,EAAyBC,QAC1C,OACE,cAACrL,EAAA,EAASxB,KAAV,CACEC,MAAO,CACL,CACEC,OAAQqB,EAAIQ,eACZL,MAAO,GAETmL,GAAW,CACTnL,MAAO,EACPoL,gBAAiB,iB,u4CC/F5B,SAASC,EAAT,GAQH,IAPFzL,EAOC,EAPDA,OACAC,EAMC,EANDA,IACAyG,EAKC,EALDA,SAMA,EAAgDzF,IAAxCkD,EAAR,EAAQA,eAAgBT,EAAxB,EAAwBA,oBAElB6E,EAAed,mBAAQ,WAC3B,IAAIiE,EAAS,EACTC,EAAuC,KACvCC,EAAmB,EAEvB,OAAOjC,IAAaC,OAAO,CACzBkB,wBAAyB,SAAClE,EAAOmD,KAGjCgB,iCAAkC,SAACnE,EAAOmD,GAExC,OAAO,GAETiB,qBAAsB,aAItBnB,4BAA6B,SAACjD,EAAOmD,GAEnC,OAAO,GAGTD,oBAAqB,SAAClD,GAEpB8E,EAAS1L,EAAOsC,EAAIsE,EAAMC,YAAYgF,UACtCD,EAAmB5L,EAAOyB,aAG5BuI,mBAAoB,SAACpD,EAAOmD,GAE1B,cAAmB5F,EAAee,WAAlC,aAA2C,CAAC,IAAjCgG,EAAgC,QACnCY,EAAcZ,EAAK5I,EAAI4I,EAAK9K,MAAQ,EAC1C,GACEoJ,KAAKuC,IAAID,EAAcJ,EAAS3B,EAAaE,IAC7CiB,EAAK9K,MAAQ,EACb,CAEA,GADA4E,QAAQwB,IAAI,kBAAmB0E,EAAKzJ,aAChCkK,IAAoBT,EACtB,MAEES,GACFA,EAAgBnJ,yBAAyBX,SAAS,IAEpD8J,EAAkBT,GACF1I,yBAAyBX,SAAS,GAClD,SAKNsI,sBAAuB,WAEjBwB,IACFA,EAAgBnJ,yBAAyBX,SAAS,GAC9C+J,IAAqBD,EAAgBlK,aACvCiC,EAAoB,CAClBsI,UAAWJ,EACXK,QAASN,EAAgBlK,oBAMlC,CAACzB,EAAQ0D,EAAqBS,IAEjC,OACE,cAACjE,EAAA,EAASxB,KAAV,OACM6J,EAAaiC,aADnB,IAEE7L,MAAO,CACL,CACEwB,SAAU,WACVG,OAAQ,EACRqB,IAAK,EACLD,KAAM,EACN9C,OAAQqB,EAAIrB,OACZwB,MAAOJ,EAAOI,QATpB,SAaGsG,K,u4CC1FA,SAASwF,EAAT,GAMH,IALFlM,EAKC,EALDA,OACAC,EAIC,EAJDA,IAKA,EAAqCgB,IAA7BmD,EAAR,EAAQA,YAAaf,EAArB,EAAqBA,YAEfkF,EAAed,mBAAQ,WAC3B,IAAI0E,EAAa,GAEjB,OAAOxC,IAAaC,OAAO,CACzBkB,wBAAyB,SAAClE,EAAOmD,KAGjCgB,iCAAkC,SAACnE,EAAOmD,GAExC,OAAO,GAETiB,qBAAsB,aAItBnB,4BAA6B,SAACjD,EAAOmD,GAEnC,OAAO,GAGTD,oBAAqB,WAEnB7J,EAAIQ,eAAewK,UAAUhL,EAAIrB,QACjCuN,EAAa,GACb,cAAmB/H,EAAYc,WAA/B,aAAwC,CAAC,IAA9BgG,EAA6B,QAClCA,EAAK1J,SAAWvB,EAAIuB,WACtB2K,EAAWnG,KAAKkF,GAChBA,EAAKpK,UAAUmK,UAAUC,EAAKrI,MAKpCmH,mBAAoB,SAACpD,EAAOmD,GAE1B,cAAmBoC,KAAnB,aAA+B,SACxBrL,UAAUe,SAASkI,EAAaG,IAEvCjK,EAAIQ,eAAeoB,SAASkI,EAAaG,IACzC7G,EAAYpD,IAGdkK,sBAAuB,WAErBlK,EAAIQ,eAAe0K,gBACnB,cAAmBgB,KAAnB,aAA+B,SACxBrL,UAAUqK,gBAEjBgB,EAAa,QAGhB,CAAClM,EAAKmE,EAAaf,IAEtB,OACE,cAACnD,EAAA,EAASxB,KAAV,OACM6J,EAAaiC,aADnB,IAEE7L,MAAO,CACL,CACEwB,SAAU,WACViF,OAAQ,EACR1D,KAAM,EACNpB,OAAQ,GACR1B,OAAQ,GACRwB,MAAOJ,EAAOI,QATpB,SAaE,cAACgL,EAAA,EAAD,CACEzM,MAAO,CACL,CACE0M,QAAS,OACTvM,eAAgB,WAChBsB,MAAOJ,EAAOI,MACdxB,OAAQ,KANd,SAUG,SAAC0M,GACA,IAAMC,EAAWD,EAAyBC,QAC1C,OACE,cAACrL,EAAA,EAASxB,KAAV,CACEC,MAAO,CACL,CACEyB,MAAOJ,EAAOK,cACdzB,OAAQ,GAEV2M,GAAW,CACT3M,OAAQ,EACR4M,gBAAiB,iBCjFpB,SAASY,IACtB,MAA0BC,cAAlBjM,EAAR,EAAQA,MAAOxB,EAAf,EAAeA,OACT0N,EAAmBvI,iBAAO,IAAIwI,KAC9BC,EAAiBzI,iBAAO,IAAIwI,KAE5BE,EAAe1H,uBAAY,SAAC/E,GAChCsM,EAAiBpH,QAAQwH,IAAzB,GAAgC1M,EAAOyB,YAAezB,EAAOI,SAC5D,IACGuM,EAAY5H,uBAAY,SAAC9E,GAC7BuM,EAAetH,QAAQwH,IAAvB,GAA8BzM,EAAIuB,SAAYvB,EAAIrB,UACjD,IAEG8E,EAAsBqB,uBAC1B,SAAC6H,GACC5H,QAAQwB,IAAIoG,KAEd,IAQF,OALAC,2BAAgB,WACM,QAAhB3E,IAASC,KACX2E,SAASC,KAAKpO,MAAM2L,SAAW,YAEhC,IAED,qCACE,cAAC7L,EAAD,IAEA,cAACuE,EAAD,CACEC,OAAO+J,EACP9J,YAAa+J,OAAOC,iBACpB/J,SAAU8J,OAAOC,iBACjB1J,eAAgB,CAAES,MAAO,GACzBR,YAAa,CAAEQ,MAAO,GACtBtF,MAAO,CACL,CAEEwO,YAAa,OACb/M,QACAxB,OAAQA,EAAS,IAEnBsJ,IAASkF,OAAO,CACdC,IAAK,CACHC,WAAY,WAIlBhK,eAAgB,SAACiK,GACf,GAAIjB,EAAiBpH,QAAQsI,IAAzB,GAAgCD,EAAK9L,aACvC,OAAO6K,EAAiBpH,QAAQuI,IAAzB,GAAgCF,EAAK9L,aAE/B+H,KAAKkE,MAAsB,IAAhBlE,KAAKmE,UAC/B,MAAO,CAAC,GAAI,IAAK,IAAK,KAAKJ,EAAK9L,YAAc,IAEhD8B,aAAc,SAACgK,GACb,GAAIf,EAAetH,QAAQsI,IAAvB,GAA8BD,EAAK/L,UACrC,OAAOgL,EAAetH,QAAQuI,IAAvB,GAA8BF,EAAK/L,UAE7BgI,KAAKkE,MAAsB,IAAhBlE,KAAKmE,UAE/B,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAIJ,EAAK/L,SAAW,KAElE4B,eAAgBqJ,EAChB/I,oBAAqBA,EACrBL,YAAasJ,EACb/I,oBAAqB,SAACgD,KAGtB7G,WAAY,YAAsB,IAAnBC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,IACrB,OACE,eAACvB,EAAA,EAAD,CACEC,MAAO,CACLiP,KAAM,EACNpC,gBACEvL,EAAIuB,SAAW,IAAM,EAAI,qBAAuB,OAClDqM,eAAgB,EAChBC,gBAAiB,EACjBX,YAAa,qBACbY,QAAS,EACTC,iBAAyC,IAAvBhO,EAAOyB,YAAoB,EAAI,EACjDwM,kBAAoC,IAAjBhO,EAAIuB,SAAiB,EAAI,GAVhD,UAa0B,IAAvBxB,EAAOyB,aAAsC,IAAjBxB,EAAIuB,UAAkB,KACjC,IAAjBvB,EAAIuB,UAAkBxB,EAAOyB,YAAc,GAC1C,qCACE,cAACgK,EAAD,CAAexL,IAAKA,EAAKD,OAAQA,EAAjC,SACE,qCACE,eAACf,EAAA,EAAD,iBAAUe,EAAOyB,eACjB,eAACxC,EAAA,EAAD,iBAAUgB,EAAIuB,iBAGlB,cAACoJ,EAAD,CAAe3K,IAAKA,EAAKD,OAAQA,OAGb,IAAvBA,EAAOyB,aAAqBxB,EAAIuB,SAAW,GAC1C,qCACE,qCACE,eAACvC,EAAA,EAAD,iBAAUe,EAAOyB,eACjB,eAACxC,EAAA,EAAD,iBAAUgB,EAAIuB,eAEhB,cAAC0K,EAAD,CAAYjM,IAAKA,EAAKD,OAAQA,OAGjCA,EAAOyB,YAAc,GAAKxB,EAAIuB,SAAW,GACxC,qCAIE,eAACvC,EAAA,EAAD,iBAAUe,EAAOyB,eACjB,eAACxC,EAAA,EAAD,iBAAUgB,EAAIuB,eAGlB,cAACtB,EAAA,EAASxB,KAAV,CACEC,MAAO,CACL,CACEwB,SAAU,WACVuB,KAAM,EACNC,KAAM,EACNyD,QAAS,EACThF,MAAO,EACPoL,gBAAiB,OACjB0C,QAASlO,EAAOwC,0BAElB0F,IAASkF,OAAO,CACdC,IAAK,CACHc,cAAe,wB","file":"static/js/app.89b3cf47.chunk.js","sourcesContent":["import { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { TouchableOpacity, View, Linking, Text } from \"react-native\";\n\nexport function Header() {\n  return (\n    <View\n      style={{\n        height: 56,\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n      }}\n    >\n      <View style={{ paddingLeft: 20 }}>\n        <Text style={{ fontWeight: \"bold\", fontSize: 20 }}>\n          React Native Virtualized Grid\n        </Text>\n      </View>\n      <View\n        style={{ paddingRight: 20, flexDirection: \"row\", alignItems: \"center\" }}\n      >\n        <TouchableOpacity\n          style={{ marginRight: 12 }}\n          onPress={() => {\n            Linking.openURL(\"https://twitter.com/770hz\");\n          }}\n        >\n          <MaterialCommunityIcons name=\"twitter\" size={24} color=\"#1d9bf0\" />\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={() => {\n            Linking.openURL(\n              \"https://github.com/heineiuo/react-native-virtualized-grid\"\n            );\n          }}\n        >\n          <MaterialCommunityIcons name=\"github\" size={24} color=\"black\" />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n","import { Animated } from \"react-native\";\n\nimport { CellProps } from \"./VirtualizedGridTypes\";\n\nexport function Cell({ renderCell, column, row }: CellProps) {\n  return (\n    <Animated.View\n      style={{\n        position: \"absolute\",\n        width: column.widthAnimated,\n        zIndex: Animated.add(column.zIndexAnimated, row.zIndexAnimated),\n        height: row.heightAnimated,\n        transform: [\n          {\n            translateX: column.xAnimated,\n          },\n          {\n            translateY: row.yAnimated,\n          },\n        ],\n      }}\n    >\n      {renderCell({ column, row })}\n    </Animated.View>\n  );\n}\n","import { createContext, MutableRefObject, useContext } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellObject, ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport type VirtualizedGridState = {\n  virtualColumns: MutableRefObject<ColumnObject[]>;\n  virtualRows: MutableRefObject<RowObject[]>;\n  coordinate: MutableRefObject<{\n    x: number;\n    y: number;\n    xAnimated: Animated.Value;\n    yAnimated: Animated.Value;\n  }>;\n  containerSize: MutableRefObject<{ width: number; height: number }>;\n  updateCoordinate: (event: { deltaX: number; deltaY: number }) => void;\n  onChangeRow: (row: RowObject) => void;\n  onChangeRowOrder: (options: { fromIndex: number; toIndex: number }) => void;\n  onChangeColumn: (column: ColumnObject) => void;\n  onChangeColumnOrder: (options: {\n    fromIndex: number;\n    toIndex: number;\n  }) => void;\n};\n\nexport const VirtualizedGridContext = createContext({} as VirtualizedGridState);\nexport const useGrid = () => useContext(VirtualizedGridContext);\n","import { createRef, RefObject } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellMethods } from \"./VirtualizedGridTypes\";\n\nexport class CoordinateObject {\n  constructor() {\n    this._x = 0;\n    this._y = 0;\n    this.xAnimated = new Animated.Value(0);\n    this.yAnimated = new Animated.Value(0);\n    this.rowIndex = 0;\n    this.columnIndex = 0;\n    this.left = 0;\n    this.top = 0;\n  }\n\n  /**\n   * 左上角point的x方向的位移\n   */\n  _x: number;\n  set x(val) {\n    this._x = val;\n    this.xAnimated.setValue(val);\n  }\n  get x() {\n    return this._x;\n  }\n  /**\n   * 左上角point的y方向的位移\n   */\n  _y: number;\n  set y(val) {\n    this._y = val;\n    this.yAnimated.setValue(val);\n  }\n  get y() {\n    return this._y;\n  }\n  /**\n  /**\n   * 左上角point的x方向的位移的动画值\n   */\n  xAnimated: Animated.Value;\n  /**\n   * 左上角point的y方向的位移的动画值\n   */\n  yAnimated: Animated.Value;\n  /**\n   * 左上角cell的row（非freezed）\n   */\n  rowIndex: number;\n  /**\n   * 左上角cell的column（非freezed）\n   */\n  columnIndex: number;\n  /**\n   * 左上角cell相对于container的左上角point的x方向的位移\n   */\n  left: number;\n  /**\n   * 左上角cell相对于container的左上角point的的y方向的位移\n   */\n  top: number;\n}\n\nexport class ContentObject {\n  constructor() {\n    this._offsetX = 0;\n    this._offsetY = 0;\n    this.offsetXAnimated = new Animated.Value(0);\n    this.offsetYAnimated = new Animated.Value(0);\n\n    this._width = 0;\n    this._height = 0;\n    this.widthAnimated = new Animated.Value(0);\n    this.heightAnimated = new Animated.Value(0);\n  }\n\n  _offsetX: number;\n  _offsetY: number;\n  offsetXAnimated: Animated.Value;\n  offsetYAnimated: Animated.Value;\n\n  _width: number;\n  _height: number;\n  widthAnimated: Animated.Value;\n  heightAnimated: Animated.Value;\n\n  set offsetX(val) {\n    this._offsetX = 0;\n    this.offsetXAnimated.setValue(val);\n  }\n\n  get offsetX() {\n    return this._offsetX;\n  }\n\n  set offsetY(val) {\n    this._offsetY = 0;\n    this.offsetYAnimated.setValue(val);\n  }\n\n  get offsetY() {\n    return this._offsetY;\n  }\n\n  set width(val) {\n    this._width = 0;\n    this.widthAnimated.setValue(val);\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  set height(val) {\n    this._height = 0;\n    this.heightAnimated.setValue(val);\n  }\n\n  get height() {\n    return this._height;\n  }\n}\n\nexport class ColumnObject {\n  constructor({\n    x,\n    width,\n    columnIndex,\n    freezed = false,\n  }: {\n    x: number;\n    width: number;\n    columnIndex: number;\n    freezed?: boolean;\n  }) {\n    this.xAnimated = new Animated.Value(x);\n    this.widthAnimated = new Animated.Value(width);\n    this.columnIndex = columnIndex;\n    this.freezed = freezed;\n    this.zIndexAnimated = new Animated.Value(freezed ? 1 : 0);\n    this.highlightOpacityAnimated = new Animated.Value(0);\n  }\n\n  columnIndex: number;\n  freezed: boolean;\n  xAnimated: Animated.Value;\n  widthAnimated: Animated.Value;\n  zIndexAnimated: Animated.Value;\n  highlightOpacityAnimated: Animated.Value;\n\n  get x(): number {\n    return JSON.parse(JSON.stringify(this.xAnimated));\n  }\n  get width(): number {\n    return JSON.parse(JSON.stringify(this.widthAnimated));\n  }\n}\n\nexport class RowObject {\n  constructor({\n    y,\n    height,\n    rowIndex,\n    freezed = false,\n  }: {\n    y: number;\n    height: number;\n    rowIndex: number;\n    freezed?: boolean;\n  }) {\n    this.yAnimated = new Animated.Value(y);\n    this.heightAnimated = new Animated.Value(height);\n    this.rowIndex = rowIndex;\n    this.freezed = freezed;\n    this.zIndexAnimated = new Animated.Value(freezed ? 1 : 0);\n    this.highlightOpacityAnimated = new Animated.Value(0);\n  }\n\n  rowIndex: number;\n  yAnimated: Animated.Value;\n  heightAnimated: Animated.Value;\n  freezed: boolean;\n  zIndexAnimated: Animated.Value;\n  highlightOpacityAnimated: Animated.Value;\n\n  get y(): number {\n    return JSON.parse(JSON.stringify(this.yAnimated));\n  }\n\n  get height(): number {\n    return JSON.parse(JSON.stringify(this.heightAnimated));\n  }\n}\n\nexport class CellObject {\n  constructor({ column, row }: { column: ColumnObject; row: RowObject }) {\n    this.column = column;\n    this.row = row;\n    this.ref = createRef();\n  }\n\n  ref: RefObject<CellMethods>;\n  column: ColumnObject;\n  row: RowObject;\n\n  get x() {\n    return this.column.x;\n  }\n\n  get y() {\n    return this.row.y;\n  }\n\n  get width() {\n    return this.column.width;\n  }\n  get height() {\n    return this.row.height;\n  }\n}\n\nexport function forEachColumns(\n  columns: ColumnObject[],\n  options: {\n    all?: boolean;\n    afterIndex?: number;\n    beforeIndex?: number;\n  },\n  callback: (item: ColumnObject) => void\n) {\n  for (const item of columns) {\n    if (options.all) {\n      callback(item);\n    } else if (typeof options.afterIndex === \"number\") {\n      if (item.columnIndex > options.afterIndex) {\n        callback(item);\n      }\n    } else if (typeof options.beforeIndex === \"number\") {\n      if (item.columnIndex < options.beforeIndex) {\n        callback(item);\n      }\n    }\n  }\n}\n\nexport const animationConfig = {\n  toValue: 1,\n  stiffness: 1000,\n  damping: 500,\n  useNativeDriver: true,\n};\n","import { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  Animated,\n  Platform,\n  View,\n  PanResponder,\n  ScrollView,\n} from \"react-native\";\n\nimport { Cell } from \"./Cell\";\nimport { VirtualizedGridContext } from \"./VirtualizedGridContext\";\nimport { VirtualizedGridProps } from \"./VirtualizedGridTypes\";\nimport {\n  ColumnObject,\n  ContentObject,\n  CoordinateObject,\n  RowObject,\n} from \"./VirtualizedGridUtils\";\n\nconst onWheelThrottled = true;\n\nexport function VirtualizedGrid({\n  debug = false,\n  style,\n  columnCount,\n  rowCount,\n  renderCell,\n  onChangeColumn = (column: ColumnObject) => undefined,\n  onChangeRow = (row: RowObject) => undefined,\n  getColumnWidth = () => 100,\n  getRowHeight = () => 40,\n  freezedColumns = {},\n  freezedRows = {},\n  onChangeColumnOrder = () => undefined,\n  onChangeRowOrder = () => undefined,\n  onChangeVisibleArea = () => undefined,\n  useScrollView = false,\n}: VirtualizedGridProps) {\n  const view = useRef<View>(null);\n  const scrollView = useRef<ScrollView>(null);\n\n  const freezedStartColumns = freezedColumns.start ?? 0;\n  const freezedStartRows = freezedRows.start ?? 0;\n\n  const virtualColumns = useRef([]);\n  const virtualRows = useRef([]);\n\n  const [groups, setGroups] = useState<\n    Record<\n      \"notFreezed\" | \"columnFreezed\" | \"rowFreezed\" | \"allFreezed\",\n      {\n        children?: any[];\n        x?: boolean;\n        y?: boolean;\n      }\n    >\n  >({\n    notFreezed: {},\n    columnFreezed: {},\n    rowFreezed: {},\n    allFreezed: {},\n  });\n\n  /**\n   * 左上角的坐标\n   * 每次移动的时候，都需要重新更新每一个字段\n   */\n  const coordinate = useRef(new CoordinateObject());\n\n  /**\n   * container's width and height\n   */\n  const containerSize = useRef({ width: 0, height: 0 });\n\n  /**\n   * content's width and height\n   */\n  const content = useRef(new ContentObject());\n\n  /**\n   * 更新\n   * 根据左上角point/cell，往右和往下推算出所有的column和row，\n   * 直到最右边的column/最下面的row超出可见区域\n   */\n  const update = useCallback(() => {\n    if (debug) {\n      console.time(\"update\");\n    }\n    const { width, height } = containerSize.current;\n    const { rowIndex, columnIndex, left, top, x, y } = coordinate.current;\n    let right = left;\n    let bottom = top;\n    let currentColumnIndex = columnIndex;\n    let currentRowIndex = rowIndex;\n    const rows = [];\n    const columns = [];\n    let minColumn = null;\n    let maxColumn = null;\n    let minRow = null;\n    let maxRow = null;\n\n    if (\n      freezedStartColumns > 0 &&\n      currentColumnIndex > freezedStartColumns - 1\n    ) {\n      // 先填入固定列\n      let freezedIndex = 0;\n      let freezedX = 0;\n      while (freezedIndex < freezedStartColumns) {\n        const freezedColumnWidth = getColumnWidth({\n          columnIndex: freezedIndex,\n        });\n        columns.push(\n          new ColumnObject({\n            columnIndex: freezedIndex,\n            width: freezedColumnWidth,\n            x: freezedX,\n            freezed: true,\n          })\n        );\n        freezedIndex++;\n        freezedX += freezedColumnWidth;\n      }\n    }\n\n    while (true) {\n      const currentColumnWidth = getColumnWidth({\n        columnIndex: currentColumnIndex,\n      });\n\n      columns.push(\n        new ColumnObject({\n          columnIndex: currentColumnIndex,\n          width: currentColumnWidth,\n          x: right,\n          freezed: currentColumnIndex < freezedStartColumns,\n        })\n      );\n      if (!minColumn) {\n        minColumn = columns.slice(-1)[0];\n      }\n\n      right += currentColumnWidth;\n      currentColumnIndex++;\n\n      if (right > -x + width) {\n        // console.log(\"column到达边界，停止\");\n        maxColumn = columns.slice(-1)[0];\n        break;\n      }\n    }\n\n    if (freezedStartRows > 0 && currentRowIndex > freezedStartRows - 1) {\n      // 先填入固定行\n      let freezedIndex = 0;\n      let freezedY = 0;\n      while (freezedIndex < freezedStartRows) {\n        const freezedRowHeight = getRowHeight({\n          rowIndex: freezedIndex,\n        });\n        rows.push(\n          new RowObject({\n            rowIndex: freezedIndex,\n            height: freezedRowHeight,\n            y: freezedY,\n            freezed: true,\n          })\n        );\n        freezedIndex++;\n        freezedY += freezedRowHeight;\n      }\n    }\n    while (true) {\n      const currentRowHeight = getRowHeight({\n        rowIndex: currentRowIndex,\n      });\n      rows.push(\n        new RowObject({\n          rowIndex: currentRowIndex,\n          height: currentRowHeight,\n          y: bottom,\n          freezed: currentRowIndex < freezedStartRows,\n        })\n      );\n\n      if (!minRow) {\n        minRow = rows.slice(-1)[0];\n      }\n\n      bottom += currentRowHeight;\n      currentRowIndex++;\n\n      if (bottom > -y + height) {\n        // console.log(\"row到达边界，停止\");\n        maxRow = rows.slice(-1)[0];\n        break;\n      }\n    }\n\n    virtualColumns.current = columns;\n    virtualRows.current = rows;\n\n    const allFreezed = [];\n    const notFreezed = [];\n    const columnFreezed = [];\n    const rowFreezed = [];\n\n    for (const row of rows) {\n      for (const column of columns) {\n        const cell = (\n          <Cell\n            key={`${column.columnIndex}/${row.rowIndex}`}\n            column={column}\n            row={row}\n            renderCell={renderCell}\n          />\n        );\n        if (column.freezed && row.freezed) {\n          allFreezed.push(cell);\n        } else if (column.freezed) {\n          columnFreezed.push(cell);\n        } else if (row.freezed) {\n          rowFreezed.push(cell);\n        } else {\n          notFreezed.push(cell);\n        }\n      }\n    }\n\n    if (debug) {\n      console.timeEnd(\"update\");\n      console.log(\n        \"count\",\n        columns.length,\n        rows.length,\n        columns.length * rows.length\n      );\n      console.time(\"setCells\");\n    }\n\n    onChangeVisibleArea({ minRow, minColumn, maxRow, maxColumn });\n\n    setGroups({\n      notFreezed: { children: notFreezed, x: true, y: true },\n      columnFreezed: { children: columnFreezed, y: true },\n      rowFreezed: { children: rowFreezed, x: true },\n      allFreezed: { children: allFreezed },\n    });\n    if (debug) {\n      console.timeEnd(\"setCells\");\n    }\n  }, [\n    debug,\n    onChangeVisibleArea,\n    getColumnWidth,\n    getRowHeight,\n    renderCell,\n    freezedStartColumns,\n    freezedStartRows,\n  ]);\n\n  /**\n   * When container layout change, the coordinate will not change,\n   * only new columns and columns may be added, so call `update()`\n   * directly.\n   */\n  const onContainerLayout = useCallback(\n    (event) => {\n      const { width, height } = event.nativeEvent.layout;\n      containerSize.current.width = width;\n      containerSize.current.height = height;\n      update();\n    },\n    [update]\n  );\n\n  /**\n   * deltaX > 0 move to left, show the right columns\n   * deltaX < 0 move to right, show the left columns\n   * deltaY > 0 move to upside, show the bottom columns\n   * deltaY < 0 move to downside, show the top columns\n   */\n  const updateCoordinate = useCallback(\n    (event: { deltaX: number; deltaY: number }) => {\n      if (debug) {\n        console.time(\"updateCoordinate\");\n      }\n      const { deltaX, deltaY } = event;\n      const { columnIndex, rowIndex, left, top } = coordinate.current;\n      let nextX = coordinate.current.x - deltaX;\n      if (nextX > 0) {\n        /**\n         * reach left edge, reset column\n         */\n        nextX = 0;\n        coordinate.current.x = 0;\n        coordinate.current.columnIndex = 0;\n        coordinate.current.left = 0;\n      } else {\n        /**\n         * update x\n         */\n        coordinate.current.x = nextX;\n        /**\n         * if left edige column is visible, do not update\n         * otherwise update it\n         */\n        let currentColumnIndex = columnIndex;\n        let currentLeft = left;\n        let currentRight = left;\n        if (deltaX > 0) {\n          // move left, show right columns\n          while (true) {\n            const currentWidth = getColumnWidth({\n              columnIndex: currentColumnIndex,\n            });\n            currentLeft = currentRight;\n            currentRight += currentWidth;\n            if (currentRight >= -nextX) {\n              break;\n            }\n            currentColumnIndex++;\n          }\n          coordinate.current.columnIndex = currentColumnIndex;\n          coordinate.current.left = currentLeft;\n        } else {\n          // deltaX < 0，move right, show left columns\n          while (true) {\n            if (currentLeft <= -nextX) {\n              break;\n            }\n            currentColumnIndex--;\n\n            const currentWidth = getColumnWidth({\n              columnIndex: currentColumnIndex,\n            });\n            currentLeft -= currentWidth;\n          }\n          coordinate.current.columnIndex = currentColumnIndex;\n          coordinate.current.left = currentLeft;\n        }\n      }\n      let nextY = coordinate.current.y - deltaY;\n      if (nextY > 0) {\n        /**\n         * reach top edge, reset row\n         */\n        nextY = 0;\n        coordinate.current.y = 0;\n        coordinate.current.top = 0;\n        coordinate.current.rowIndex = 0;\n      } else {\n        /**\n         * update y\n         */\n        coordinate.current.y = nextY;\n\n        /**\n         * if top row is visible, do not update,\n         * otherwise update the top row\n         */\n        let currentRowIndex = rowIndex;\n        let currentTop = top;\n        let currentBottom = top;\n        if (deltaY > 0) {\n          // deltaY > 0 move to top, show the bottom rows\n          while (true) {\n            const size = getRowHeight({\n              rowIndex: currentRowIndex,\n            });\n            currentTop = currentBottom;\n            currentBottom += size;\n            if (currentBottom >= -nextY) {\n              break;\n            }\n            currentRowIndex++;\n          }\n          coordinate.current.rowIndex = currentRowIndex;\n          coordinate.current.top = currentTop;\n        } else {\n          // deltaY < 0 move down, show the top rows\n          while (true) {\n            if (currentTop <= -nextY) {\n              break;\n            }\n            currentRowIndex--;\n\n            const size = getRowHeight({\n              rowIndex: currentRowIndex,\n            });\n            currentTop -= size;\n          }\n          coordinate.current.rowIndex = currentRowIndex;\n          coordinate.current.top = currentTop;\n        }\n      }\n\n      if (debug) {\n        console.log(coordinate.current);\n        console.timeEnd(\"updateCoordinate\");\n      }\n      update();\n    },\n    [update, debug, getColumnWidth, getRowHeight]\n  );\n\n  const onWheel = useMemo(() => {\n    let timer = null;\n    let totalX = 0;\n    let totalY = 0;\n    return (event) => {\n      if (!onWheelThrottled) {\n        return updateCoordinate(event);\n      }\n      clearTimeout(timer);\n      const { deltaX, deltaY } = event;\n      totalX += deltaX;\n      totalY += deltaY;\n      timer = setTimeout(() => {\n        updateCoordinate({\n          deltaX: totalX,\n          deltaY: totalY,\n        });\n        totalX = 0;\n        totalY = 0;\n      }, 0);\n    };\n  }, [updateCoordinate]);\n\n  const onScroll = useCallback(\n    (event) => {\n      const { x, y } = event.nativeEvent.contentOffset;\n      coordinate.current.y = -y;\n      coordinate.current.x = -x;\n      setTimeout(update, 0);\n    },\n    [update]\n  );\n\n  useEffect(() => {\n    if (!useScrollView && Platform.OS === \"web\") {\n      const el = view.current as any;\n      if (el) {\n        el.addEventListener(\"wheel\", onWheel);\n        return () => {\n          el.removeEventListener(\"wheel\", onWheel);\n        };\n      }\n    }\n  }, [useScrollView, onWheel]);\n\n  /**\n   * pan responder for touch screen device\n   *\n   * The kinetic scrolling algorithm inspired by Ariya\n   * https://ariya.io/2013/11/javascript-kinetic-scrolling-part-2\n   */\n  const panResponder = useMemo(() => {\n    let prevGestureState = null;\n    let ticker = null;\n    let deltaX = 0;\n    let deltaY = 0;\n\n    /**\n     * for track()\n     */\n    let totalX = 0;\n    let totalY = 0;\n    let timestamp = Date.now();\n    /**\n     * 水平速度\n     */\n    let vx = 0;\n    /**\n     * 垂直速度\n     */\n    let vy = 0;\n\n    /**\n     * for autoScroll\n     */\n    let finalX = 0;\n    let finalY = 0;\n\n    const timeConstant = 325; // ms\n\n    const trackMs = 20;\n\n    function init() {\n      finalX = 0;\n      finalY = 0;\n      totalX = 0;\n      totalY = 0;\n      vx = 0;\n      vy = 0;\n      timestamp = Date.now();\n      clearInterval(ticker);\n      ticker = setInterval(track, trackMs);\n    }\n\n    /**\n     * 计算速度\n     *\n     * 实时速度 = 1000 * 位移 / 时间间隔 + 1\n     * 速度(移动平均值) = 实时速度 * 0.8 + 速度前值 * 0.2\n     */\n    function track() {\n      if (__DEV__) {\n        console.time(\"track\");\n      }\n      const now = Date.now();\n      const elapsed = now - timestamp + 1;\n      timestamp = now;\n      const velocityX = (10 * trackMs * totalX) / elapsed;\n      const velocityY = (10 * trackMs * totalY) / elapsed;\n      vx = velocityX * 0.8 + vx * 0.2;\n      vy = velocityY * 0.8 + vy * 0.2;\n\n      totalX = 0;\n      totalY = 0;\n      if (__DEV__) {\n        console.timeEnd(\"track\");\n      }\n    }\n\n    function autoScroll() {\n      const elapsed = Date.now() - timestamp;\n      const per = Math.exp(-elapsed / timeConstant);\n      const deltaX = finalX * per;\n      const deltaY = finalY * per;\n      if (deltaX > 0.5 || deltaX < -0.5 || deltaY > 0.5 || deltaY < -0.5) {\n        updateCoordinate({ deltaX, deltaY });\n        requestAnimationFrame(autoScroll);\n      } else {\n        updateCoordinate({ deltaX, deltaY });\n      }\n    }\n\n    return PanResponder.create({\n      onMoveShouldSetPanResponder: () => {\n        return true;\n      },\n      onPanResponderGrant: (event, gestureState) => {\n        prevGestureState = { ...gestureState };\n        init();\n      },\n      onPanResponderMove: (event, gestureState) => {\n        if (!prevGestureState) {\n          prevGestureState = { ...gestureState };\n          init();\n          return;\n        }\n        deltaX = -gestureState.dx + prevGestureState.dx;\n        deltaY = -gestureState.dy + prevGestureState.dy;\n        totalX = deltaX;\n        totalY = deltaY;\n        prevGestureState = { ...gestureState };\n        updateCoordinate({\n          deltaX,\n          deltaY,\n        });\n      },\n      onPanResponderRelease: () => {\n        prevGestureState = null;\n        clearInterval(ticker);\n        if (vx > 10 || vx < -10) {\n          finalX = 0.8 * vx;\n        }\n        if (vy > 10 || vy < -10) {\n          finalY = 0.8 * vy;\n        }\n        timestamp = Date.now();\n        requestAnimationFrame(autoScroll);\n      },\n    });\n  }, [updateCoordinate]);\n\n  return (\n    <VirtualizedGridContext.Provider\n      value={{\n        virtualColumns,\n        virtualRows,\n        onChangeColumn,\n        onChangeRow,\n        coordinate,\n        containerSize,\n        updateCoordinate,\n        onChangeColumnOrder,\n        onChangeRowOrder,\n      }}\n    >\n      <View\n        ref={view}\n        style={[\n          {\n            overflow: \"hidden\",\n          },\n          style,\n        ]}\n        onLayout={onContainerLayout}\n        {...(useScrollView ? {} : panResponder.panHandlers)}\n      >\n        {!useScrollView && (\n          <CellGroup\n            translateX={coordinate.current.xAnimated}\n            translateY={coordinate.current.yAnimated}\n          >\n            {groups.notFreezed.children}\n          </CellGroup>\n        )}\n        {useScrollView && (\n          // no transition\n          <ScrollView\n            style={{\n              position: \"absolute\",\n              top: 40,\n              left: 50,\n              right: 0,\n              bottom: 0,\n              overflow: \"scroll\",\n            }}\n            scrollEventThrottle={1}\n            onScroll={onScroll}\n          >\n            {/* no transition */}\n            <View style={{ width: 10000, height: 10000 }}>\n              {/* with transition */}\n              <View\n                style={[\n                  {\n                    position: \"absolute\",\n                    top: -40,\n                    left: -50,\n                  },\n                ]}\n              >\n                {groups.notFreezed.children}\n              </View>\n            </View>\n          </ScrollView>\n        )}\n\n        <CellGroup translateY={coordinate.current.yAnimated}>\n          {groups.columnFreezed.children}\n        </CellGroup>\n        <CellGroup translateX={coordinate.current.xAnimated}>\n          {groups.rowFreezed.children}\n        </CellGroup>\n        <CellGroup>{groups.allFreezed.children}</CellGroup>\n      </View>\n    </VirtualizedGridContext.Provider>\n  );\n}\n\nfunction CellGroup({\n  translateX = 0,\n  translateY = 0,\n  children,\n}: {\n  translateX?: any;\n  translateY?: any;\n  children: any;\n}) {\n  return (\n    <Animated.View\n      style={[\n        {\n          position: \"absolute\",\n          transform: [{ translateX }, { translateY }],\n        },\n      ]}\n    >\n      {children}\n    </Animated.View>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Pressable, Animated, PanResponder } from \"react-native\";\n\nimport { useGrid } from \"./VirtualizedGridContext\";\nimport { ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport function ColumnResizer({\n  column,\n  row,\n}: {\n  column: ColumnObject;\n  row: RowObject;\n}) {\n  const { virtualColumns, onChangeColumn } = useGrid();\n\n  const panResponder = useMemo(() => {\n    let rightColumns = [];\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminate\");\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminationRequest\");\n        return false;\n      },\n      onPanResponderReject: () => {\n        __DEV__ && console.log(\"[resizer] onPanResponderReject\");\n      },\n\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onMoveShouldSetPanResponder\");\n        return true;\n      },\n\n      onPanResponderGrant: () => {\n        __DEV__ && console.log(\"[resizer] grant\");\n        column.widthAnimated.setOffset(column.width);\n        rightColumns = [];\n        for (const item of virtualColumns.current) {\n          if (item.columnIndex > column.columnIndex) {\n            rightColumns.push(item);\n            item.xAnimated.setOffset(item.x);\n          }\n        }\n      },\n\n      onPanResponderMove: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] move\");\n        for (const item of rightColumns) {\n          item.xAnimated.setValue(gestureState.dx);\n        }\n        column.widthAnimated.setValue(gestureState.dx);\n        onChangeColumn(column);\n      },\n\n      onPanResponderRelease: () => {\n        __DEV__ && console.log(\"[resizer] release\");\n        column.widthAnimated.flattenOffset();\n        for (const item of rightColumns) {\n          item.xAnimated.flattenOffset();\n        }\n        rightColumns = [];\n      },\n    });\n  }, [column, virtualColumns, onChangeColumn]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n          zIndex: 10,\n          height: row.height,\n          width: 20,\n        },\n      ]}\n    >\n      <Pressable\n        style={[\n          {\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            height: row.height,\n          },\n        ]}\n      >\n        {(state) => {\n          const hovered = (state as unknown as any).hovered;\n          return (\n            <Animated.View\n              style={[\n                {\n                  height: row.heightAnimated,\n                  width: 0,\n                },\n                hovered && {\n                  width: 5,\n                  backgroundColor: \"blue\",\n                },\n              ]}\n            />\n          );\n        }}\n      </Pressable>\n    </Animated.View>\n  );\n}\n","import React, { ReactNode, useMemo } from \"react\";\nimport { Animated, PanResponder } from \"react-native\";\n\nimport { useGrid } from \"./VirtualizedGridContext\";\nimport { ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport function ColumnReorder({\n  column,\n  row,\n  children,\n}: {\n  column: ColumnObject;\n  row: RowObject;\n  children?: ReactNode;\n}) {\n  const { virtualColumns, onChangeColumnOrder } = useGrid();\n\n  const panResponder = useMemo(() => {\n    let startX = 0;\n    let highlightColumn: ColumnObject | null = null;\n    let startColumnIndex = 0;\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        __DEV__ && console.log(\"[reorder] onPanResponderTerminate\");\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        __DEV__ && console.log(\"[reorder] onPanResponderTerminationRequest\");\n        return false;\n      },\n      onPanResponderReject: () => {\n        __DEV__ && console.log(\"[reorder] onPanResponderReject\");\n      },\n\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        __DEV__ && console.log(\"[reorder] onMoveShouldSetPanResponder\");\n        return true;\n      },\n\n      onPanResponderGrant: (event) => {\n        __DEV__ && console.log(\"[reorder] grant\");\n        startX = column.x + event.nativeEvent.locationX;\n        startColumnIndex = column.columnIndex;\n      },\n\n      onPanResponderMove: (event, gestureState) => {\n        __DEV__ && console.log(\"[reorder] move\", gestureState.dx);\n        for (const item of virtualColumns.current) {\n          const itemCenterX = item.x + item.width / 2;\n          if (\n            Math.abs(itemCenterX - startX - gestureState.dx) <\n            item.width / 2\n          ) {\n            console.log(\"highlightcolumn\", item.columnIndex);\n            if (highlightColumn === item) {\n              break;\n            }\n            if (highlightColumn) {\n              highlightColumn.highlightOpacityAnimated.setValue(0);\n            }\n            highlightColumn = item;\n            highlightColumn.highlightOpacityAnimated.setValue(1);\n            break;\n          }\n        }\n      },\n\n      onPanResponderRelease: () => {\n        __DEV__ && console.log(\"[reorder] release\");\n        if (highlightColumn) {\n          highlightColumn.highlightOpacityAnimated.setValue(0);\n          if (startColumnIndex !== highlightColumn.columnIndex) {\n            onChangeColumnOrder({\n              fromIndex: startColumnIndex,\n              toIndex: highlightColumn.columnIndex,\n            });\n          }\n        }\n      },\n    });\n  }, [column, onChangeColumnOrder, virtualColumns]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          zIndex: 8,\n          top: 0,\n          left: 0,\n          height: row.height,\n          width: column.width,\n        },\n      ]}\n    >\n      {children}\n    </Animated.View>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Pressable, Animated, PanResponder } from \"react-native\";\n\nimport { useGrid } from \"./VirtualizedGridContext\";\nimport { ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport function RowResizer({\n  column,\n  row,\n}: {\n  column: ColumnObject;\n  row: RowObject;\n}) {\n  const { virtualRows, onChangeRow } = useGrid();\n\n  const panResponder = useMemo(() => {\n    let bottomRows = [];\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminate\");\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminationRequest\");\n        return false;\n      },\n      onPanResponderReject: () => {\n        __DEV__ && console.log(\"[resizer] onPanResponderReject\");\n      },\n\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onMoveShouldSetPanResponder\");\n        return true;\n      },\n\n      onPanResponderGrant: () => {\n        __DEV__ && console.log(\"[resizer] grant\");\n        row.heightAnimated.setOffset(row.height);\n        bottomRows = [];\n        for (const item of virtualRows.current) {\n          if (item.rowIndex > row.rowIndex) {\n            bottomRows.push(item);\n            item.yAnimated.setOffset(item.y);\n          }\n        }\n      },\n\n      onPanResponderMove: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] move\");\n        for (const item of bottomRows) {\n          item.yAnimated.setValue(gestureState.dy);\n        }\n        row.heightAnimated.setValue(gestureState.dy);\n        onChangeRow(row);\n      },\n\n      onPanResponderRelease: () => {\n        __DEV__ && console.log(\"[resizer] release\");\n        row.heightAnimated.flattenOffset();\n        for (const item of bottomRows) {\n          item.yAnimated.flattenOffset();\n        }\n        bottomRows = [];\n      },\n    });\n  }, [row, virtualRows, onChangeRow]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          bottom: 0,\n          left: 0,\n          zIndex: 10,\n          height: 20,\n          width: column.width,\n        },\n      ]}\n    >\n      <Pressable\n        style={[\n          {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            width: column.width,\n            height: 20,\n          },\n        ]}\n      >\n        {(state) => {\n          const hovered = (state as unknown as any).hovered;\n          return (\n            <Animated.View\n              style={[\n                {\n                  width: column.widthAnimated,\n                  height: 0,\n                },\n                hovered && {\n                  height: 5,\n                  backgroundColor: \"blue\",\n                },\n              ]}\n            />\n          );\n        }}\n      </Pressable>\n    </Animated.View>\n  );\n}\n","import React, { useCallback, useLayoutEffect, useRef, useState } from \"react\";\nimport {\n  ActivityIndicator,\n  Animated,\n  Platform,\n  Text,\n  useWindowDimensions,\n  View,\n} from \"react-native\";\n\nimport { AutoHideActivityIndicator } from \"./docs/AutoHideActivityIndicator\";\nimport { Header } from \"./docs/Header\";\nimport {\n  VirtualizedGrid,\n  ColumnResizer,\n  ColumnObject,\n  RowObject,\n  RowResizer,\n  ColumnReorder,\n} from \"./src/index\";\n\nexport default function App() {\n  const { width, height } = useWindowDimensions();\n  const columnWidthCache = useRef(new Map<string, number>());\n  const rowHeightCache = useRef(new Map<string, number>());\n\n  const updateColumn = useCallback((column: ColumnObject) => {\n    columnWidthCache.current.set(`${column.columnIndex}`, column.width);\n  }, []);\n  const updateRow = useCallback((row: RowObject) => {\n    rowHeightCache.current.set(`${row.rowIndex}`, row.height);\n  }, []);\n\n  const onChangeColumnOrder = useCallback(\n    (options: { fromIndex: number; toIndex: number }) => {\n      console.log(options);\n    },\n    []\n  );\n\n  useLayoutEffect(() => {\n    if (Platform.OS === \"web\") {\n      document.body.style.overflow = \"hidden\";\n    }\n  }, []);\n  return (\n    <>\n      <Header />\n\n      <VirtualizedGrid\n        debug={__DEV__}\n        columnCount={Number.MAX_SAFE_INTEGER}\n        rowCount={Number.MAX_SAFE_INTEGER}\n        freezedColumns={{ start: 1 }}\n        freezedRows={{ start: 1 }}\n        style={[\n          {\n            // borderWidth: 1,\n            borderColor: \"#fff\",\n            width,\n            height: height - 56,\n          },\n          Platform.select({\n            web: {\n              userSelect: \"none\",\n            },\n          }) as unknown,\n        ]}\n        getColumnWidth={(info: { columnIndex: number }) => {\n          if (columnWidthCache.current.has(`${info.columnIndex}`)) {\n            return columnWidthCache.current.get(`${info.columnIndex}`);\n          }\n          const random = Math.round(Math.random() * 100);\n          return [50, 140, 200, 120][info.columnIndex % 4];\n        }}\n        getRowHeight={(info: { rowIndex: number }) => {\n          if (rowHeightCache.current.has(`${info.rowIndex}`)) {\n            return rowHeightCache.current.get(`${info.rowIndex}`);\n          }\n          const random = Math.round(Math.random() * 100);\n\n          return [40, 50, 60, 90, 40, 45, 40, 50, 55, 50][info.rowIndex % 10];\n        }}\n        onChangeColumn={updateColumn}\n        onChangeColumnOrder={onChangeColumnOrder}\n        onChangeRow={updateRow}\n        onChangeVisibleArea={(event) => {\n          // console.log(\"onChangeVisibleArea\", event);\n        }}\n        renderCell={({ column, row }) => {\n          return (\n            <View\n              style={{\n                flex: 1,\n                backgroundColor:\n                  row.rowIndex % 2 === 1 ? \"rgb(246, 248, 250)\" : \"#fff\",\n                borderTopWidth: 1,\n                borderLeftWidth: 1,\n                borderColor: \"rgb(216, 222, 228)\",\n                padding: 4,\n                borderRightWidth: column.columnIndex === 0 ? 1 : 0,\n                borderBottomWidth: row.rowIndex === 0 ? 1 : 0,\n              }}\n            >\n              {column.columnIndex === 0 && row.rowIndex === 0 && null}\n              {row.rowIndex === 0 && column.columnIndex > 0 && (\n                <>\n                  <ColumnReorder row={row} column={column}>\n                    <>\n                      <Text>c: {column.columnIndex}</Text>\n                      <Text>r: {row.rowIndex}</Text>\n                    </>\n                  </ColumnReorder>\n                  <ColumnResizer row={row} column={column} />\n                </>\n              )}\n              {column.columnIndex === 0 && row.rowIndex > 0 && (\n                <>\n                  <>\n                    <Text>c: {column.columnIndex}</Text>\n                    <Text>r: {row.rowIndex}</Text>\n                  </>\n                  <RowResizer row={row} column={column} />\n                </>\n              )}\n              {column.columnIndex > 0 && row.rowIndex > 0 && (\n                <>\n                  {/* <AutoHideActivityIndicator\n                    key={`${columnIndex}/${rowIndex}`}\n                  /> */}\n                  <Text>c: {column.columnIndex}</Text>\n                  <Text>r: {row.rowIndex}</Text>\n                </>\n              )}\n              <Animated.View\n                style={[\n                  {\n                    position: \"absolute\",\n                    left: 0,\n                    top: -1,\n                    bottom: -1,\n                    width: 2,\n                    backgroundColor: \"blue\",\n                    opacity: column.highlightOpacityAnimated,\n                  },\n                  Platform.select({\n                    web: {\n                      pointerEvents: \"none\",\n                    } as unknown as any,\n                  }),\n                ]}\n              />\n            </View>\n          );\n        }}\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}