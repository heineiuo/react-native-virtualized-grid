{"version":3,"sources":["docs/Header.tsx","src/VirtualizedGridContext.tsx","src/RowResizer.tsx","src/Cell.tsx","src/VirtualGridUtils.tsx","src/VirtualizedGrid.tsx","src/ColumnResizer.tsx","App.tsx"],"names":["Header","View","style","height","flexDirection","justifyContent","alignItems","paddingLeft","Text","fontWeight","fontSize","paddingRight","TouchableOpacity","marginRight","onPress","Linking","openURL","MaterialCommunityIcons","name","size","color","VirtualizedGridContext","createContext","useGrid","useContext","RowResizer","column","row","virtualRows","onChangeRow","panResponder","useMemo","bottomRows","PanResponder","create","onPanResponderTerminate","event","gestureState","onPanResponderTerminationRequest","onPanResponderReject","onMoveShouldSetPanResponder","onPanResponderGrant","heightAnimated","setOffset","current","item","rowIndex","push","yAnimated","y","onPanResponderMove","setValue","dy","onPanResponderRelease","flattenOffset","Animated","panHandlers","position","bottom","left","zIndex","width","Pressable","display","state","hovered","widthAnimated","backgroundColor","Cell","forwardRef","ref","renderCell","coordinate","useState","columnIndex","data","setData","useImperativeHandle","update","freezed","transform","translateX","xAnimated","add","x","translateY","ColumnObject","move","nextX","Math","min","max","minX","deltaX","nextY","minY","deltaY","this","Value","containerWidthAnimated","containerHeightAnimated","contentWidthAnimated","contentHeightAnimated","minXAnimated","subtract","minYAnimated","JSON","parse","stringify","RowObject","CellObject","createRef","VirtualizedGrid","columnCount","rowCount","onChangeColumn","getColumnWidth","getRowHeight","showColumnLine","showRowLine","freezedColumns","freezedRows","view","useRef","layoutCount","setLayoutCount","virtualColumns","virtualCells","freezedStartColumns","start","freezedStartRows","end","ValueXY","containerSize","getRange","useCallback","minColumn","maxColumn","minRow","maxRow","i","length","onContainerLayout","layout","nativeEvent","virtualColumnsTotalWidth","virtualRowsTotalHeight","rowHeight","prev","columnWidth","extraRows","prevRow","extraColumns","prevColumn","j","updateCoordinate","containerWidth","containerHeight","shouldSplitAction","splitAction","finalMaxColumnIndex","deltaX0","finalMaxRowIndex","deltaY0","outsideColumns","outsideRows","outsideCells","console","error","columnValue","unshift","cell","includes","requestAnimationFrame","onWheel","useEffect","Platform","OS","el","addEventListener","removeEventListener","prevGestureState","dx","Provider","value","overflow","onLayout","map","index","ColumnResizer","rightColumns","top","right","App","useWindowDimensions","columnWidthCache","Map","rowHeightCache","updateColumn","set","updateRow","useLayoutEffect","document","body","Number","MAX_SAFE_INTEGER","borderColor","select","web","userSelect","info","has","get","flex","borderTopWidth","borderLeftWidth","padding","borderRightWidth","borderBottomWidth"],"mappings":"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","file":"static/js/app.eeaa6edf.chunk.js","sourcesContent":["import { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { TouchableOpacity, View, Linking, Text } from \"react-native\";\n\nexport function Header() {\n  return (\n    <View\n      style={{\n        height: 56,\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n      }}\n    >\n      <View style={{ paddingLeft: 20 }}>\n        <Text style={{ fontWeight: \"bold\", fontSize: 20 }}>\n          React Native Virtualized Grid\n        </Text>\n      </View>\n      <View\n        style={{ paddingRight: 20, flexDirection: \"row\", alignItems: \"center\" }}\n      >\n        <TouchableOpacity\n          style={{ marginRight: 12 }}\n          onPress={() => {\n            Linking.openURL(\"https://twitter.com/770hz\");\n          }}\n        >\n          <MaterialCommunityIcons name=\"twitter\" size={24} color=\"#1d9bf0\" />\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={() => {\n            Linking.openURL(\n              \"https://github.com/heineiuo/react-native-virtualized-grid\"\n            );\n          }}\n        >\n          <MaterialCommunityIcons name=\"github\" size={24} color=\"black\" />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n","import { createContext, MutableRefObject, useContext } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellObject, ColumnObject, RowObject } from \"./VirtualGridUtils\";\n\nexport type VirtualizedGridState = {\n  virtualColumns: MutableRefObject<ColumnObject[]>;\n  virtualCells: MutableRefObject<CellObject[]>;\n  virtualRows: MutableRefObject<RowObject[]>;\n  coordinate: MutableRefObject<Animated.ValueXY>;\n  containerSize: MutableRefObject<Animated.ValueXY>;\n  updateCoordinate: (event: { deltaX: number; deltaY: number }) => void;\n  onChangeColumn: (column: ColumnObject) => void;\n  onChangeRow: (row: RowObject) => void;\n};\n\nexport const VirtualizedGridContext = createContext({} as VirtualizedGridState);\nexport const useGrid = () => useContext(VirtualizedGridContext);\n","import React, { useMemo } from \"react\";\nimport { Pressable, Animated, PanResponder } from \"react-native\";\n\nimport { ColumnObject, RowObject } from \"./VirtualGridUtils\";\nimport { useGrid } from \"./VirtualizedGridContext\";\n\nexport function RowResizer({\n  column,\n  row,\n}: {\n  column: ColumnObject;\n  row: RowObject;\n}) {\n  const { virtualRows, onChangeRow } = useGrid();\n\n  const panResponder = useMemo(() => {\n    let bottomRows = [];\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminate\");\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminationRequest\");\n        return false;\n      },\n      onPanResponderReject: () => {\n        __DEV__ && console.log(\"[resizer] onPanResponderReject\");\n      },\n\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onMoveShouldSetPanResponder\");\n        return true;\n      },\n\n      onPanResponderGrant: () => {\n        __DEV__ && console.log(\"[resizer] grant\");\n        row.heightAnimated.setOffset(row.height);\n        bottomRows = [];\n        for (const item of virtualRows.current) {\n          if (item.rowIndex > row.rowIndex) {\n            bottomRows.push(item);\n            item.yAnimated.setOffset(item.y);\n          }\n        }\n      },\n\n      onPanResponderMove: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] move\");\n        for (const item of bottomRows) {\n          item.yAnimated.setValue(gestureState.dy);\n        }\n        row.heightAnimated.setValue(gestureState.dy);\n        onChangeRow(row);\n      },\n\n      onPanResponderRelease: () => {\n        __DEV__ && console.log(\"[resizer] release\");\n        row.heightAnimated.flattenOffset();\n        for (const item of bottomRows) {\n          item.yAnimated.flattenOffset();\n        }\n        bottomRows = [];\n      },\n    });\n  }, [row, virtualRows, onChangeRow]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          bottom: 0,\n          left: 0,\n          zIndex: 10,\n          height: 20,\n          width: column.width,\n        },\n      ]}\n    >\n      <Pressable\n        style={[\n          {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            width: column.width,\n            height: 20,\n          },\n        ]}\n      >\n        {(state) => {\n          const hovered = (state as unknown as any).hovered;\n          return (\n            <Animated.View\n              style={[\n                {\n                  width: column.widthAnimated,\n                  height: 1,\n                  backgroundColor: \"#ccc\",\n                },\n                hovered && {\n                  height: 5,\n                  backgroundColor: \"blue\",\n                },\n              ]}\n            />\n          );\n        }}\n      </Pressable>\n    </Animated.View>\n  );\n}\n","import { forwardRef, ReactNode, useImperativeHandle, useState } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellMethods } from \"./VirtualGridTypes\";\nimport { ColumnObject, RowObject } from \"./VirtualGridUtils\";\n\nexport const Cell = forwardRef<\n  CellMethods,\n  {\n    coordinate: Animated.AnimatedValueXY;\n    column: ColumnObject;\n    row: RowObject;\n    renderCell: (info: {\n      columnIndex: number;\n      rowIndex: number;\n      column: ColumnObject;\n      row: RowObject;\n    }) => ReactNode;\n  }\n>(({ renderCell, column, row, coordinate }, ref) => {\n  const [data, setData] = useState({\n    rowIndex: row.rowIndex,\n    columnIndex: column.columnIndex,\n  });\n\n  useImperativeHandle(\n    ref,\n    () => {\n      return {\n        update: (data) => {\n          setData(data);\n        },\n      } as CellMethods;\n    },\n    []\n  );\n\n  return (\n    <Animated.View\n      style={{\n        position: \"absolute\",\n        width: column.widthAnimated,\n        zIndex: (column.freezed ? 1 : 0) + (row.freezed ? 1 : 0),\n        height: row.heightAnimated,\n        transform: [\n          {\n            translateX: column.freezed\n              ? column.xAnimated\n              : Animated.add(column.xAnimated, coordinate.x),\n          },\n          {\n            translateY: row.freezed\n              ? row.yAnimated\n              : Animated.add(row.yAnimated, coordinate.y),\n          },\n        ],\n      }}\n    >\n      {renderCell({ ...data, column, row })}\n    </Animated.View>\n  );\n});\n","import { createRef, RefObject } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellMethods } from \"./VirtualGridTypes\";\n\nexport class CoordinateObject {\n  constructor() {\n    this.xAnimated = new Animated.Value(0);\n    this.yAnimated = new Animated.Value(0);\n    this.containerWidthAnimated = new Animated.Value(0);\n    this.containerHeightAnimated = new Animated.Value(0);\n    this.contentWidthAnimated = new Animated.Value(0);\n    this.contentHeightAnimated = new Animated.Value(0);\n    this.minXAnimated = Animated.subtract(\n      this.containerWidthAnimated,\n      this.contentWidthAnimated\n    );\n    this.minYAnimated = Animated.subtract(\n      this.containerWidthAnimated,\n      this.contentWidthAnimated\n    );\n  }\n\n  xAnimated: Animated.Value;\n  yAnimated: Animated.Value;\n  minXAnimated: Animated.AnimatedSubtraction;\n  minYAnimated: Animated.AnimatedSubtraction;\n  containerWidthAnimated: Animated.Value;\n  containerHeightAnimated: Animated.Value;\n  contentWidthAnimated: Animated.Value;\n  contentHeightAnimated: Animated.Value;\n\n  move = (event: WheelEvent) => {\n    const nextX = Math.min(0, Math.max(this.minX, this.x - event.deltaX));\n    const nextY = Math.min(0, Math.max(this.minY, this.y - event.deltaY));\n\n    this.xAnimated.setValue(nextX);\n    this.yAnimated.setValue(nextY);\n  };\n\n  get minX(): number {\n    return JSON.parse(JSON.stringify(this.minXAnimated));\n  }\n  get minY(): number {\n    return JSON.parse(JSON.stringify(this.minYAnimated));\n  }\n\n  get x(): number {\n    return JSON.parse(JSON.stringify(this.xAnimated));\n  }\n  get y(): number {\n    return JSON.parse(JSON.stringify(this.yAnimated));\n  }\n  get contentWidth(): number {\n    return JSON.parse(JSON.stringify(this.contentWidthAnimated));\n  }\n  get contentHeight(): number {\n    return JSON.parse(JSON.stringify(this.contentHeightAnimated));\n  }\n  get containerWidth(): number {\n    return JSON.parse(JSON.stringify(this.containerWidthAnimated));\n  }\n  get containerHeight(): number {\n    return JSON.parse(JSON.stringify(this.containerHeightAnimated));\n  }\n}\n\nexport class ColumnObject {\n  constructor({\n    x,\n    width,\n    columnIndex,\n    freezed = false,\n  }: {\n    x: number;\n    width: number;\n    columnIndex: number;\n    freezed?: boolean;\n  }) {\n    this.xAnimated = new Animated.Value(x);\n    this.widthAnimated = new Animated.Value(width);\n    this.columnIndex = columnIndex;\n    this.freezed = freezed;\n  }\n\n  columnIndex: number;\n  xAnimated: Animated.Value;\n  widthAnimated: Animated.Value;\n  freezed: boolean;\n\n  get x(): number {\n    return JSON.parse(JSON.stringify(this.xAnimated));\n  }\n  get width(): number {\n    return JSON.parse(JSON.stringify(this.widthAnimated));\n  }\n}\n\nexport class RowObject {\n  constructor({\n    y,\n    height,\n    rowIndex,\n    freezed = false,\n  }: {\n    y: number;\n    height: number;\n    rowIndex: number;\n    freezed?: boolean;\n  }) {\n    this.yAnimated = new Animated.Value(y);\n    this.heightAnimated = new Animated.Value(height);\n    this.rowIndex = rowIndex;\n    this.freezed = freezed;\n  }\n\n  rowIndex: number;\n  yAnimated: Animated.Value;\n  heightAnimated: Animated.Value;\n  freezed: boolean;\n\n  get y(): number {\n    return JSON.parse(JSON.stringify(this.yAnimated));\n  }\n\n  get height(): number {\n    return JSON.parse(JSON.stringify(this.heightAnimated));\n  }\n}\n\nexport class CellObject {\n  constructor({ column, row }: { column: ColumnObject; row: RowObject }) {\n    this.column = column;\n    this.row = row;\n    this.ref = createRef();\n  }\n\n  ref: RefObject<CellMethods>;\n  column: ColumnObject;\n  row: RowObject;\n\n  get x() {\n    return this.column.x;\n  }\n\n  get y() {\n    return this.row.y;\n  }\n\n  get width() {\n    return this.column.width;\n  }\n  get height() {\n    return this.row.height;\n  }\n}\n","import {\n  Fragment,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { Animated, Platform, View, PanResponder } from \"react-native\";\n\nimport { Cell } from \"./Cell\";\nimport { VirtualizedGridProps } from \"./VirtualGridTypes\";\nimport { CellObject, ColumnObject, RowObject } from \"./VirtualGridUtils\";\nimport { VirtualizedGridContext } from \"./VirtualizedGridContext\";\n\nexport function VirtualizedGrid({\n  style,\n  columnCount,\n  rowCount,\n  renderCell,\n  onChangeColumn = (column: ColumnObject) => undefined,\n  onChangeRow = (row: RowObject) => undefined,\n  getColumnWidth = () => 100,\n  getRowHeight = () => 40,\n  showColumnLine = false,\n  showRowLine = false,\n  freezedColumns = {},\n  freezedRows = {},\n}: VirtualizedGridProps) {\n  const view = useRef<View>(null);\n  const [layoutCount, setLayoutCount] = useState(0);\n  const virtualColumns = useRef<ColumnObject[]>([]);\n  const virtualRows = useRef<RowObject[]>([]);\n  const virtualCells = useRef<CellObject[]>([]);\n\n  const freezedStartColumns = freezedColumns.start ?? 0;\n  const freezedEndColumns = freezedColumns.end ?? 0;\n  const freezedStartRows = freezedRows.start ?? 0;\n  const freezedEndRows = freezedRows.end ?? 0;\n\n  /**\n   * 左上角的坐标\n   */\n  const coordinate = useRef(new Animated.ValueXY({ x: 0, y: 0 }));\n  const containerSize = useRef(new Animated.ValueXY({ x: 0, y: 0 }));\n\n  /**\n   * 获取当前的rowIndex范围和columnIndex范围\n   */\n  const getRange = useCallback(() => {\n    let minColumn = virtualColumns.current[0];\n    let maxColumn = virtualColumns.current[0];\n    let minRow = virtualRows.current[0];\n    let maxRow = virtualRows.current[0];\n\n    for (let i = 0; i < virtualColumns.current.length; i++) {\n      const column = virtualColumns.current[i];\n      if (column.freezed) {\n        continue;\n      }\n      if (minColumn.freezed) {\n        minColumn = column;\n        continue;\n      }\n      if (column.columnIndex < minColumn.columnIndex) {\n        minColumn = column;\n      }\n      if (column.columnIndex > maxColumn.columnIndex) {\n        maxColumn = column;\n      }\n    }\n\n    for (let i = 0; i < virtualRows.current.length; i++) {\n      const row = virtualRows.current[i];\n      if (row.freezed) {\n        continue;\n      }\n      if (minRow.freezed) {\n        minRow = row;\n        continue;\n      }\n      if (row.rowIndex < minRow.rowIndex) {\n        minRow = row;\n      }\n      if (row.rowIndex > maxRow.rowIndex) {\n        maxRow = row;\n      }\n    }\n    return { minColumn, minRow, maxColumn, maxRow };\n  }, []);\n\n  /**\n   * init containerSize, virtualColumns, virtualRows\n   */\n  const onContainerLayout = useCallback(\n    (event) => {\n      const { layout } = event.nativeEvent;\n      containerSize.current.setValue({ x: layout.width, y: layout.height });\n\n      let virtualColumnsTotalWidth = 0;\n      let virtualRowsTotalHeight = 0;\n\n      for (const column of virtualColumns.current) {\n        virtualColumnsTotalWidth += column.width;\n      }\n      for (const row of virtualRows.current) {\n        virtualRowsTotalHeight += row.height;\n      }\n\n      const { maxRow, maxColumn } = getRange();\n\n      /**\n       * 填满virtualRows和virtualColumns\n       */\n      let rowIndex = maxRow?.rowIndex ?? -1;\n      while (virtualRowsTotalHeight < layout.height) {\n        rowIndex++;\n        const rowHeight = getRowHeight({ rowIndex });\n        virtualRowsTotalHeight += rowHeight;\n        if (virtualRows.current.length === 0) {\n          virtualRows.current.push(\n            new RowObject({\n              y: 0,\n              height: rowHeight,\n              rowIndex,\n              freezed: rowIndex < freezedStartRows,\n            })\n          );\n        } else {\n          const prev = virtualRows.current[virtualRows.current.length - 1];\n          virtualRows.current.push(\n            new RowObject({\n              y: prev.y + prev.height,\n              height: rowHeight,\n              rowIndex,\n              freezed: rowIndex < freezedStartRows,\n            })\n          );\n        }\n      }\n      let columnIndex = maxColumn?.columnIndex ?? -1;\n      while (virtualColumnsTotalWidth < layout.width) {\n        columnIndex++;\n        const columnWidth = getColumnWidth({ columnIndex });\n        virtualColumnsTotalWidth += columnWidth;\n        if (virtualColumns.current.length === 0) {\n          virtualColumns.current.push(\n            new ColumnObject({\n              x: 0,\n              width: columnWidth,\n              columnIndex,\n              freezed: columnIndex < freezedStartColumns,\n            })\n          );\n        } else {\n          const prev =\n            virtualColumns.current[virtualColumns.current.length - 1];\n          virtualColumns.current.push(\n            new ColumnObject({\n              width: columnWidth,\n              x: prev.x + prev.width,\n              columnIndex,\n              freezed: columnIndex < freezedStartColumns,\n            })\n          );\n        }\n      }\n\n      /**\n       * 增加额外的column和row,\n       * 1. 避免出现空白列/行\n       * 2. 补充freezed的空缺\n       */\n      let extraRows = freezedStartRows + 1;\n      while (extraRows > 0) {\n        rowIndex++;\n        const rowHeight = getRowHeight({ rowIndex });\n        const prevRow = virtualRows.current[virtualRows.current.length - 1];\n        virtualRows.current.push(\n          new RowObject({\n            y: prevRow.y + prevRow.height,\n            height: rowHeight,\n            rowIndex,\n          })\n        );\n        extraRows--;\n      }\n\n      let extraColumns = freezedStartColumns + 1;\n      while (extraColumns > 0) {\n        columnIndex++;\n        const prevColumn =\n          virtualColumns.current[virtualColumns.current.length - 1];\n        const columnWidth = getColumnWidth({ columnIndex });\n        virtualColumns.current.push(\n          new ColumnObject({\n            width: columnWidth,\n            x: prevColumn.x + prevColumn.width,\n            columnIndex,\n          })\n        );\n\n        extraColumns--;\n      }\n\n      /**\n       * 重置cells\n       * cells的数量是 (rowCount+1) * (columnCount+1)，因为\n       * 会出现左边的cell还没消失\n       */\n      virtualCells.current = [];\n      for (let i = 0; i < virtualRows.current.length; i++) {\n        const row = virtualRows.current[i];\n        for (let j = 0; j < virtualColumns.current.length; j++) {\n          const column = virtualColumns.current[j];\n          virtualCells.current.push(\n            new CellObject({\n              column,\n              row,\n            })\n          );\n        }\n      }\n\n      setLayoutCount((prev) => prev + 1);\n    },\n    [\n      getColumnWidth,\n      getRowHeight,\n      getRange,\n      freezedStartColumns,\n      freezedStartRows,\n    ]\n  );\n\n  const updateCoordinate = useCallback(\n    (event: { deltaX: number; deltaY: number }) => {\n      const { x, y } = JSON.parse(JSON.stringify(coordinate.current));\n      const { x: containerWidth, y: containerHeight } = JSON.parse(\n        JSON.stringify(containerSize.current)\n      );\n\n      /**\n       * 如果移动过快，超过了逐次迁移元素的速度，那么拆分成多次操作，重复\n       * 调用updateCoordinate\n       */\n      let shouldSplitAction = false;\n      const splitAction = { deltaX: 0, deltaY: 0 };\n\n      /**\n       * (1/5)\n       * 获取当前的rowIndex范围和columnIndex范围\n       * 如果现在已经到最左边column或最右边column了，那就不再继续移动column，\n       * 同时coordinate.x最小值不能小于 containerWidth - (maxColumn.x+column.width)\n       * 也就是说coordinate.x区间是：[containerWidth - (maxColumn.x+column.width), 0]\n       *\n       * row同理\n       */\n      let { minColumn, maxColumn, minRow, maxRow } = getRange();\n\n      /**\n       * (2/5)\n       * 计算出minX,minY\n       * 根据deltaX位移计算需要展示的column,\n       * 逐个通过消耗deltaX，通过getColumnWidth获取宽度，直到deltaX额度用完\n       * 1. 判断maxColumn是否已经完全展示，\n       *    a. 未完全展示：deltaX -= maxColumn未完全展示的部分(deltaX等于0结束)\n       *       nextX -= maxColumn未完全展示的部分；-> 2\n       *    b. 完全展示：-> 2\n       * 2. 获取下一个maxColumn，判断deltaX剩余额度是否大于maxColumn宽度\n       *    a. 大于: deltaX -= maxColumn宽度，\n       *            nextX -= maxColumn宽度，-> 2\n       *    b. 小于等于：结束\n       *\n       * deltaY同理\n       *\n       * deltaX > 0 左移\n       * deltaX < 0 右移\n       * deltaY > 0 上移\n       * deltaY < 0 下移\n       */\n\n      let deltaX = event.deltaX;\n      let deltaY = event.deltaY;\n      let finalMaxColumnIndex = maxColumn.columnIndex;\n      let deltaX0 = maxColumn.x + maxColumn.width + x - containerWidth;\n      let finalMaxRowIndex = maxRow.rowIndex;\n      let deltaY0 = maxRow.y + maxRow.height + y - containerHeight;\n\n      // 左移补尾\n      if (deltaX > 0) {\n        while (deltaX > deltaX0) {\n          if (finalMaxColumnIndex === columnCount) {\n            break;\n          }\n          finalMaxColumnIndex++;\n          if (\n            finalMaxColumnIndex - maxColumn.columnIndex >=\n            virtualColumns.current.length - 2\n          ) {\n            shouldSplitAction = true;\n            break;\n          }\n          const maxColumnWidth = getColumnWidth({\n            columnIndex: finalMaxColumnIndex,\n          });\n          deltaX0 += maxColumnWidth;\n        }\n        deltaX = Math.min(deltaX0, deltaX);\n        if (shouldSplitAction) {\n          splitAction.deltaX = event.deltaX - deltaX;\n        }\n      }\n      if (deltaY > 0) {\n        while (deltaY > deltaY0) {\n          if (finalMaxRowIndex === rowCount) {\n            break;\n          }\n          finalMaxRowIndex++;\n          if (\n            finalMaxRowIndex - maxRow.rowIndex >=\n            virtualRows.current.length - 2\n          ) {\n            shouldSplitAction = true;\n            break;\n          }\n          const maxRowHeight = getRowHeight({\n            rowIndex: finalMaxRowIndex,\n          });\n          deltaY0 += maxRowHeight;\n        }\n        deltaY = Math.min(deltaY0, deltaY);\n        if (shouldSplitAction) {\n          splitAction.deltaY = event.deltaY - deltaY;\n        }\n      }\n\n      /**\n       * (3/5)\n       * 更新左上角坐标，其他所有位置都依据这个坐标进行位移\n       * x值区间：[containerWidth - contentWidth, 0]\n       * y值区间：[containerHeight - contentHeight, 0]\n       */\n      if (x - deltaX > 0) {\n        deltaX = x;\n      }\n      if (y - deltaY > 0) {\n        deltaY = y;\n      }\n\n      const nextX = x - deltaX;\n      const nextY = y - deltaY;\n\n      coordinate.current.setValue({\n        x: nextX,\n        y: nextY,\n      });\n\n      /**\n       * (4/5)\n       * 更新virtualColumns和virtualRows\n       * 如果deltaX > 0 (往左边移), 将最左边在可视范围外的columns依次移动到末尾\n       * 如果deltaX < 0（往右边移）, 将最右边在可视范围外的columns倒序依次移动到头部\n       * rows同理。\n       */\n      const outsideColumns: ColumnObject[] = [];\n      const outsideRows: RowObject[] = [];\n      const outsideCells: CellObject[] = [];\n\n      // 左移，在末尾增加\n      if (deltaX > 0) {\n        for (let i = 0; i < virtualColumns.current.length; i++) {\n          const column = virtualColumns.current[i];\n\n          /**\n           * 判断超出范围的依据是列的*右侧*小于0\n           */\n          const isOutOfView =\n            !column.freezed &&\n            column.x + nextX + column.width < freezedStartColumns;\n          if (isOutOfView) {\n            outsideColumns.push(column);\n          }\n        }\n\n        /**\n         * 所有column均已超出屏幕，此时根据finalMaxIndex重新计算\n         * 所有的column的位置\n         */\n\n        if (outsideColumns.length === virtualColumns.current.length) {\n          console.error(\"This shoud not happen\");\n        }\n        // console.log({ outsideColumns, maxColumnValue });\n        if (outsideColumns.length > 0) {\n          for (let i = 0; i < outsideColumns.length; i++) {\n            /**\n             * 先更新columnIndex\n             * 通过columnIndex拿到columnWidth\n             * 再更新maxColumnValue以供下一个column使用\n             */\n            const column = outsideColumns[i];\n            column.xAnimated.setValue(maxColumn.x + maxColumn.width);\n            column.columnIndex = maxColumn.columnIndex + 1;\n            const columnWidth = getColumnWidth(column);\n            column.widthAnimated.setValue(columnWidth);\n            maxColumn = column;\n          }\n        }\n      }\n\n      // 右移，在头部增加\n      if (deltaX < 0) {\n        for (let i = 0; i < virtualColumns.current.length; i++) {\n          const column = virtualColumns.current[i];\n          const columnValue = column.x;\n\n          /**\n           * 判断超出范围的依据是列的*左侧*大于containerWidth\n           */\n          const isOutOfView =\n            !column.freezed && columnValue + nextX > containerWidth;\n          if (isOutOfView) {\n            outsideColumns.unshift(column);\n          }\n        }\n        // console.log({ outsideColumns, minColumnValue });\n        if (outsideColumns.length > 0) {\n          for (let i = 0; i < outsideColumns.length; i++) {\n            if (minColumn.columnIndex === 0) {\n              break;\n            }\n            /**\n             * 先更新columnIndex\n             * 通过columnIndex拿到columnWidth\n             * 再更新minColumnValue以供下一个column使用\n             */\n            const column = outsideColumns[i];\n            column.columnIndex = minColumn.columnIndex - 1;\n            const columnWidth = getColumnWidth(column);\n            column.widthAnimated.setValue(columnWidth);\n            column.xAnimated.setValue(minColumn.x - columnWidth);\n            minColumn = column;\n          }\n        }\n      }\n\n      // 上移，在尾部增加\n      if (deltaY > 0) {\n        for (let i = 0; i < virtualRows.current.length; i++) {\n          const row = virtualRows.current[i];\n\n          /**\n           * 判断超出范围的依据是行的*下侧*小于0\n           */\n          const isOutOfView =\n            !row.freezed && row.y + nextY + row.height < freezedStartRows;\n          if (isOutOfView) {\n            outsideRows.push(row);\n          }\n        }\n\n        // console.log(outsideRows);\n        // console.log({ outsideRows, maxRowValue });\n        /**\n         * 所有column均已超出屏幕，此时根据finalMaxIndex重新计算\n         * 所有的column的位置\n         */\n        if (outsideRows.length === virtualRows.current.length) {\n          console.error(\"Warning: This shoud not happen\");\n        }\n\n        if (outsideRows.length > 0) {\n          for (let i = 0; i < outsideRows.length; i++) {\n            const row = outsideRows[i];\n            row.rowIndex = maxRow.rowIndex + 1;\n            row.yAnimated.setValue(maxRow.y + maxRow.height);\n            const rowHeight = getRowHeight(row);\n            row.heightAnimated.setValue(rowHeight);\n            maxRow = row;\n          }\n        }\n      }\n\n      // 下移，在头部增加\n      if (deltaY < 0) {\n        for (let i = 0; i < virtualRows.current.length; i++) {\n          const row = virtualRows.current[i];\n\n          /**\n           * 判断超出范围的依据是行的*上侧*大于容器高度\n           */\n          const isOutOfView = !row.freezed && row.y + nextY > containerHeight;\n          if (isOutOfView) {\n            outsideRows.unshift(row);\n          }\n        }\n        // console.log({ outsideRows, minRowValue });\n        if (outsideRows.length > 0) {\n          for (let i = 0; i < outsideRows.length; i++) {\n            if (minRow.rowIndex === 0) {\n              break;\n            }\n            const row = outsideRows[i];\n            row.rowIndex = minRow.rowIndex - 1;\n            const rowHeight = getRowHeight(row);\n            row.heightAnimated.setValue(rowHeight);\n            row.yAnimated.setValue(minRow.y - row.height);\n            minRow = row;\n          }\n        }\n      }\n\n      /**\n       * (5/5)\n       * 计算需要更新的cell，并调用update方法更新cell\n       */\n      for (let i = 0; i < virtualCells.current.length; i++) {\n        const cell = virtualCells.current[i];\n        if (!outsideCells.includes(cell)) {\n          if (outsideColumns.includes(cell.column)) {\n            outsideCells.push(cell);\n          } else if (outsideRows.includes(cell.row)) {\n            outsideCells.push(cell);\n          }\n        }\n      }\n\n      if (!shouldSplitAction) {\n        for (const cell of outsideCells) {\n          cell.ref.current.update({\n            rowIndex: cell.row.rowIndex,\n            columnIndex: cell.column.columnIndex,\n          });\n        }\n      }\n\n      // 继续未完成action\n      if (shouldSplitAction) {\n        if (__DEV__) {\n          console.log(\"[DEV] splitAction\", splitAction);\n        }\n        requestAnimationFrame(() => {\n          updateCoordinate(splitAction);\n        });\n      }\n    },\n    [\n      getColumnWidth,\n      getRange,\n      columnCount,\n      rowCount,\n      getRowHeight,\n      freezedStartColumns,\n      freezedStartRows,\n    ]\n  );\n\n  const onWheel = useCallback(\n    (event) => {\n      const { deltaX, deltaY } = event;\n      updateCoordinate({ deltaX, deltaY });\n    },\n    [updateCoordinate]\n  );\n\n  useEffect(() => {\n    if (Platform.OS === \"web\") {\n      const el = view.current as any;\n\n      el.addEventListener(\"wheel\", onWheel);\n      return () => {\n        el.removeEventListener(\"wheel\", onWheel);\n      };\n    }\n  }, [onWheel]);\n\n  const panResponder = useMemo(() => {\n    let prevGestureState = null;\n    return PanResponder.create({\n      onPanResponderGrant: (event, gestureState) => {\n        prevGestureState = { ...gestureState };\n      },\n      onMoveShouldSetPanResponder: () => {\n        return true;\n      },\n      onPanResponderMove: (event, gestureState) => {\n        const deltaX = -gestureState.dx + prevGestureState.dx;\n        const deltaY = -gestureState.dy + prevGestureState.dy;\n        prevGestureState = { ...gestureState };\n        updateCoordinate({\n          deltaX,\n          deltaY,\n        });\n      },\n    });\n  }, [updateCoordinate]);\n\n  return (\n    <VirtualizedGridContext.Provider\n      value={{\n        onChangeColumn,\n        onChangeRow,\n        virtualColumns,\n        virtualCells,\n        virtualRows,\n        coordinate,\n        containerSize,\n        updateCoordinate,\n      }}\n    >\n      <View\n        ref={view}\n        style={[style, { overflow: \"hidden\" }]}\n        onLayout={onContainerLayout}\n        {...panResponder.panHandlers}\n      >\n        {showColumnLine && (\n          <Fragment key={`columns-${layoutCount}`}>\n            {virtualColumns.current.map((column, index) => {\n              return (\n                <Animated.View\n                  key={index}\n                  style={{\n                    position: \"absolute\",\n                    width: 1,\n                    backgroundColor: \"#ccc\",\n                    transform: [\n                      {\n                        translateX: Animated.add(\n                          column.xAnimated,\n                          coordinate.current.x\n                        ),\n                      },\n                    ],\n                    height: containerSize.current.y,\n                  }}\n                />\n              );\n            })}\n          </Fragment>\n        )}\n        {showRowLine && (\n          <Fragment key={`rows-${layoutCount}`}>\n            {virtualRows.current.map((row, index) => {\n              return (\n                <Animated.View\n                  key={index}\n                  style={{\n                    position: \"absolute\",\n                    backgroundColor: \"#ccc\",\n                    transform: [\n                      {\n                        translateY: Animated.add(\n                          row.yAnimated,\n                          coordinate.current.y\n                        ),\n                      },\n                    ],\n                    width: containerSize.current.x,\n                    height: 1,\n                  }}\n                />\n              );\n            })}\n          </Fragment>\n        )}\n        <Fragment key={`cells-${layoutCount}`}>\n          {virtualCells.current.map((cell, index) => {\n            return (\n              <Cell\n                coordinate={coordinate.current}\n                ref={cell.ref}\n                key={index}\n                column={cell.column}\n                row={cell.row}\n                renderCell={renderCell}\n              />\n            );\n          })}\n        </Fragment>\n      </View>\n    </VirtualizedGridContext.Provider>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Pressable, Animated, PanResponder } from \"react-native\";\n\nimport { ColumnObject, RowObject } from \"./VirtualGridUtils\";\nimport { useGrid } from \"./VirtualizedGridContext\";\n\nexport function ColumnResizer({\n  column,\n  row,\n}: {\n  column: ColumnObject;\n  row: RowObject;\n}) {\n  const {\n    virtualColumns,\n    virtualRows,\n    virtualCells,\n    updateCoordinate,\n    coordinate,\n    containerSize,\n    onChangeColumn,\n  } = useGrid();\n\n  const panResponder = useMemo(() => {\n    let rightColumns = [];\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminate\");\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminationRequest\");\n        return false;\n      },\n      onPanResponderReject: () => {\n        __DEV__ && console.log(\"[resizer] onPanResponderReject\");\n      },\n\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onMoveShouldSetPanResponder\");\n        return true;\n      },\n\n      onPanResponderGrant: () => {\n        __DEV__ && console.log(\"[resizer] grant\");\n        column.widthAnimated.setOffset(column.width);\n        rightColumns = [];\n        for (const item of virtualColumns.current) {\n          if (item.columnIndex > column.columnIndex) {\n            rightColumns.push(item);\n            item.xAnimated.setOffset(item.x);\n          }\n        }\n      },\n\n      onPanResponderMove: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] move\");\n        for (const item of rightColumns) {\n          item.xAnimated.setValue(gestureState.dx);\n        }\n        column.widthAnimated.setValue(gestureState.dx);\n        onChangeColumn(column);\n      },\n\n      onPanResponderRelease: () => {\n        __DEV__ && console.log(\"[resizer] release\");\n        column.widthAnimated.flattenOffset();\n        for (const item of rightColumns) {\n          item.xAnimated.flattenOffset();\n        }\n        rightColumns = [];\n      },\n    });\n  }, [column, virtualColumns, onChangeColumn]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n          zIndex: 10,\n          height: row.height,\n          width: 20,\n        },\n      ]}\n    >\n      <Pressable\n        style={[\n          {\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            height: row.height,\n          },\n        ]}\n      >\n        {(state) => {\n          const hovered = (state as unknown as any).hovered;\n          return (\n            <Animated.View\n              style={[\n                {\n                  height: row.heightAnimated,\n                  width: 1,\n                  backgroundColor: \"#ccc\",\n                },\n                hovered && {\n                  width: 5,\n                  backgroundColor: \"blue\",\n                },\n              ]}\n            />\n          );\n        }}\n      </Pressable>\n    </Animated.View>\n  );\n}\n","import React, { useCallback, useLayoutEffect, useRef, useState } from \"react\";\nimport { Platform, Text, useWindowDimensions, View } from \"react-native\";\n\nimport { Header } from \"./docs/Header\";\nimport { RowResizer } from \"./src/RowResizer\";\nimport {\n  VirtualizedGrid,\n  ColumnResizer,\n  ColumnObject,\n  RowObject,\n} from \"./src/index\";\n\nexport default function App() {\n  const { width, height } = useWindowDimensions();\n  const columnWidthCache = useRef(new Map<string, number>());\n  const rowHeightCache = useRef(new Map<string, number>());\n\n  const updateColumn = useCallback((column: ColumnObject) => {\n    columnWidthCache.current.set(`${column.columnIndex}`, column.width);\n  }, []);\n  const updateRow = useCallback((row: RowObject) => {\n    rowHeightCache.current.set(`${row.rowIndex}`, row.height);\n  }, []);\n\n  useLayoutEffect(() => {\n    if (Platform.OS === \"web\") {\n      document.body.style.overflow = \"hidden\";\n    }\n  }, []);\n  return (\n    <>\n      <Header />\n\n      <VirtualizedGrid\n        columnCount={Number.MAX_SAFE_INTEGER}\n        rowCount={Number.MAX_SAFE_INTEGER}\n        freezedColumns={{ start: 1 }}\n        freezedRows={{ start: 1 }}\n        style={[\n          {\n            // borderWidth: 1,\n            borderColor: \"#fff\",\n            width,\n            height: height - 56,\n          },\n          Platform.select({\n            web: {\n              userSelect: \"none\",\n            },\n          }) as unknown,\n        ]}\n        getColumnWidth={(info: { columnIndex: number }) => {\n          if (columnWidthCache.current.has(`${info.columnIndex}`)) {\n            return columnWidthCache.current.get(`${info.columnIndex}`);\n          }\n          return [50, 140, 200, 120][info.columnIndex % 4];\n        }}\n        getRowHeight={(info: { rowIndex: number }) => {\n          if (rowHeightCache.current.has(`${info.rowIndex}`)) {\n            return rowHeightCache.current.get(`${info.rowIndex}`);\n          }\n          return [40, 50, 60, 90, 40, 45, 40, 50, 55, 50, 60][\n            info.rowIndex % 10\n          ];\n        }}\n        onChangeColumn={updateColumn}\n        onChangeRow={updateRow}\n        renderCell={(info) => {\n          return (\n            <View\n              style={{\n                flex: 1,\n                backgroundColor:\n                  info.rowIndex % 2 === 1 ? \"rgb(246, 248, 250)\" : \"#fff\",\n                borderTopWidth: 1,\n                borderLeftWidth: 1,\n                borderColor: \"rgb(216, 222, 228)\",\n                padding: 4,\n                borderRightWidth: info.columnIndex === 0 ? 1 : 0,\n                borderBottomWidth: info.rowIndex === 0 ? 1 : 0,\n              }}\n            >\n              {info.columnIndex === 0 && info.rowIndex === 0 ? null : (\n                <>\n                  <Text>c: {info.columnIndex}</Text>\n                  <Text>r: {info.rowIndex}</Text>\n                </>\n              )}\n              {info.rowIndex === 0 && (\n                <ColumnResizer row={info.row} column={info.column} />\n              )}\n              {info.columnIndex === 0 && (\n                <RowResizer row={info.row} column={info.column} />\n              )}\n            </View>\n          );\n        }}\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}