{"version":3,"sources":["docs/Header.tsx","src/Cell.tsx","src/VirtualizedGridContext.tsx","src/VirtualizedGridUtils.tsx","src/VirtualizedGrid.tsx","src/ColumnResizer.tsx","src/ColumnReorder.tsx","src/RowResizer.tsx","App.tsx"],"names":["Header","View","style","height","flexDirection","justifyContent","alignItems","paddingLeft","Text","fontWeight","fontSize","paddingRight","TouchableOpacity","marginRight","onPress","Linking","openURL","MaterialCommunityIcons","name","size","color","Cell","renderCell","column","row","Animated","position","width","widthAnimated","zIndex","add","zIndexAnimated","heightAnimated","transform","translateX","xAnimated","translateY","yAnimated","VirtualizedGridContext","createContext","useGrid","useContext","CoordinateObject","this","_x","_y","Value","rowIndex","columnIndex","left","top","val","setValue","ContentObject","_offsetX","_offsetY","offsetXAnimated","offsetYAnimated","_width","_height","ColumnObject","x","freezed","highlightOpacityAnimated","JSON","parse","stringify","RowObject","y","ref","createRef","VirtualizedGrid","debug","columnCount","rowCount","onChangeColumn","onChangeRow","getColumnWidth","getRowHeight","freezedColumns","freezedRows","onChangeColumnOrder","onChangeRowOrder","onChangeVisibleArea","view","useRef","freezedStartColumns","start","freezedStartRows","virtualColumns","virtualRows","useState","groups","setGroups","coordinate","containerSize","content","update","useCallback","console","time","current","right","bottom","currentColumnIndex","currentRowIndex","rows","columns","minColumn","maxColumn","minRow","maxRow","freezedIndex","freezedX","freezedColumnWidth","push","currentColumnWidth","slice","freezedY","freezedRowHeight","currentRowHeight","allFreezed","notFreezed","columnFreezed","rowFreezed","cell","timeEnd","log","length","key","children","onContainerLayout","event","nativeEvent","layout","updateCoordinate","deltaX","deltaY","nextX","currentLeft","currentRight","nextY","currentTop","currentBottom","onWheel","useMemo","timer","overlayX","overlayY","clearTimeout","setTimeout","onScroll","contentOffset","offsetX","offsetY","useEffect","Platform","OS","el","addEventListener","removeEventListener","panResponder","prevGestureState","PanResponder","create","onPanResponderGrant","gestureState","onMoveShouldSetPanResponder","onPanResponderMove","dx","dy","onPanResponderRelease","container","overflow","onLayout","panHandlers","Provider","value","cloneElement","map","ColumnResizer","rightColumns","onPanResponderTerminate","onPanResponderTerminationRequest","onPanResponderReject","setOffset","item","flattenOffset","Pressable","display","state","hovered","backgroundColor","ColumnReorder","startX","highlightColumn","startColumnIndex","locationX","itemCenterX","Math","abs","fromIndex","toIndex","RowResizer","bottomRows","App","useWindowDimensions","columnWidthCache","Map","rowHeightCache","updateColumn","set","updateRow","options","useLayoutEffect","document","body","__DEV__","Number","MAX_SAFE_INTEGER","borderColor","select","web","userSelect","info","has","get","round","random","flex","borderTopWidth","borderLeftWidth","padding","borderRightWidth","borderBottomWidth","opacity","pointerEvents"],"mappings":"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","file":"static/js/app.cca0e8af.chunk.js","sourcesContent":["import { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { TouchableOpacity, View, Linking, Text } from \"react-native\";\n\nexport function Header() {\n  return (\n    <View\n      style={{\n        height: 56,\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n      }}\n    >\n      <View style={{ paddingLeft: 20 }}>\n        <Text style={{ fontWeight: \"bold\", fontSize: 20 }}>\n          React Native Virtualized Grid\n        </Text>\n      </View>\n      <View\n        style={{ paddingRight: 20, flexDirection: \"row\", alignItems: \"center\" }}\n      >\n        <TouchableOpacity\n          style={{ marginRight: 12 }}\n          onPress={() => {\n            Linking.openURL(\"https://twitter.com/770hz\");\n          }}\n        >\n          <MaterialCommunityIcons name=\"twitter\" size={24} color=\"#1d9bf0\" />\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={() => {\n            Linking.openURL(\n              \"https://github.com/heineiuo/react-native-virtualized-grid\"\n            );\n          }}\n        >\n          <MaterialCommunityIcons name=\"github\" size={24} color=\"black\" />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n","import { Animated } from \"react-native\";\n\nimport { CellProps } from \"./VirtualizedGridTypes\";\n\nexport function Cell({ renderCell, column, row }: CellProps) {\n  return (\n    <Animated.View\n      style={{\n        position: \"absolute\",\n        width: column.widthAnimated,\n        zIndex: Animated.add(column.zIndexAnimated, row.zIndexAnimated),\n        height: row.heightAnimated,\n        transform: [\n          {\n            translateX: column.xAnimated,\n          },\n          {\n            translateY: row.yAnimated,\n          },\n        ],\n      }}\n    >\n      {renderCell({ column, row })}\n    </Animated.View>\n  );\n}\n","import { createContext, MutableRefObject, useContext } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellObject, ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport type VirtualizedGridState = {\n  virtualColumns: MutableRefObject<ColumnObject[]>;\n  virtualRows: MutableRefObject<RowObject[]>;\n  coordinate: MutableRefObject<{\n    x: number;\n    y: number;\n    xAnimated: Animated.Value;\n    yAnimated: Animated.Value;\n  }>;\n  containerSize: MutableRefObject<{ width: number; height: number }>;\n  updateCoordinate: (event: { deltaX: number; deltaY: number }) => void;\n  onChangeRow: (row: RowObject) => void;\n  onChangeRowOrder: (options: { fromIndex: number; toIndex: number }) => void;\n  onChangeColumn: (column: ColumnObject) => void;\n  onChangeColumnOrder: (options: {\n    fromIndex: number;\n    toIndex: number;\n  }) => void;\n};\n\nexport const VirtualizedGridContext = createContext({} as VirtualizedGridState);\nexport const useGrid = () => useContext(VirtualizedGridContext);\n","import { createRef, RefObject } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellMethods } from \"./VirtualizedGridTypes\";\n\nexport class CoordinateObject {\n  constructor() {\n    this._x = 0;\n    this._y = 0;\n    this.xAnimated = new Animated.Value(0);\n    this.yAnimated = new Animated.Value(0);\n    this.rowIndex = 0;\n    this.columnIndex = 0;\n    this.left = 0;\n    this.top = 0;\n  }\n\n  /**\n   * 左上角point的x方向的位移\n   */\n  _x: number;\n  set x(val) {\n    this._x = val;\n    this.xAnimated.setValue(val);\n  }\n  get x() {\n    return this._x;\n  }\n  /**\n   * 左上角point的y方向的位移\n   */\n  _y: number;\n  set y(val) {\n    this._y = val;\n    this.yAnimated.setValue(val);\n  }\n  get y() {\n    return this._y;\n  }\n  /**\n  /**\n   * 左上角point的x方向的位移的动画值\n   */\n  xAnimated: Animated.Value;\n  /**\n   * 左上角point的y方向的位移的动画值\n   */\n  yAnimated: Animated.Value;\n  /**\n   * 左上角cell的row（非freezed）\n   */\n  rowIndex: number;\n  /**\n   * 左上角cell的column（非freezed）\n   */\n  columnIndex: number;\n  /**\n   * 左上角cell相对于container的左上角point的x方向的位移\n   */\n  left: number;\n  /**\n   * 左上角cell相对于container的左上角point的的y方向的位移\n   */\n  top: number;\n}\n\nexport class ContentObject {\n  constructor() {\n    this._offsetX = 0;\n    this._offsetY = 0;\n    this.offsetXAnimated = new Animated.Value(0);\n    this.offsetYAnimated = new Animated.Value(0);\n\n    this._width = 0;\n    this._height = 0;\n    this.widthAnimated = new Animated.Value(0);\n    this.heightAnimated = new Animated.Value(0);\n  }\n\n  _offsetX: number;\n  _offsetY: number;\n  offsetXAnimated: Animated.Value;\n  offsetYAnimated: Animated.Value;\n\n  _width: number;\n  _height: number;\n  widthAnimated: Animated.Value;\n  heightAnimated: Animated.Value;\n\n  set offsetX(val) {\n    this._offsetX = 0;\n    this.offsetXAnimated.setValue(val);\n  }\n\n  get offsetX() {\n    return this._offsetX;\n  }\n\n  set offsetY(val) {\n    this._offsetY = 0;\n    this.offsetYAnimated.setValue(val);\n  }\n\n  get offsetY() {\n    return this._offsetY;\n  }\n\n  set width(val) {\n    this._width = 0;\n    this.widthAnimated.setValue(val);\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  set height(val) {\n    this._height = 0;\n    this.heightAnimated.setValue(val);\n  }\n\n  get height() {\n    return this._height;\n  }\n}\n\nexport class ColumnObject {\n  constructor({\n    x,\n    width,\n    columnIndex,\n    freezed = false,\n  }: {\n    x: number;\n    width: number;\n    columnIndex: number;\n    freezed?: boolean;\n  }) {\n    this.xAnimated = new Animated.Value(x);\n    this.widthAnimated = new Animated.Value(width);\n    this.columnIndex = columnIndex;\n    this.freezed = freezed;\n    this.zIndexAnimated = new Animated.Value(freezed ? 1 : 0);\n    this.highlightOpacityAnimated = new Animated.Value(0);\n  }\n\n  columnIndex: number;\n  freezed: boolean;\n  xAnimated: Animated.Value;\n  widthAnimated: Animated.Value;\n  zIndexAnimated: Animated.Value;\n  highlightOpacityAnimated: Animated.Value;\n\n  get x(): number {\n    return JSON.parse(JSON.stringify(this.xAnimated));\n  }\n  get width(): number {\n    return JSON.parse(JSON.stringify(this.widthAnimated));\n  }\n}\n\nexport class RowObject {\n  constructor({\n    y,\n    height,\n    rowIndex,\n    freezed = false,\n  }: {\n    y: number;\n    height: number;\n    rowIndex: number;\n    freezed?: boolean;\n  }) {\n    this.yAnimated = new Animated.Value(y);\n    this.heightAnimated = new Animated.Value(height);\n    this.rowIndex = rowIndex;\n    this.freezed = freezed;\n    this.zIndexAnimated = new Animated.Value(freezed ? 1 : 0);\n    this.highlightOpacityAnimated = new Animated.Value(0);\n  }\n\n  rowIndex: number;\n  yAnimated: Animated.Value;\n  heightAnimated: Animated.Value;\n  freezed: boolean;\n  zIndexAnimated: Animated.Value;\n  highlightOpacityAnimated: Animated.Value;\n\n  get y(): number {\n    return JSON.parse(JSON.stringify(this.yAnimated));\n  }\n\n  get height(): number {\n    return JSON.parse(JSON.stringify(this.heightAnimated));\n  }\n}\n\nexport class CellObject {\n  constructor({ column, row }: { column: ColumnObject; row: RowObject }) {\n    this.column = column;\n    this.row = row;\n    this.ref = createRef();\n  }\n\n  ref: RefObject<CellMethods>;\n  column: ColumnObject;\n  row: RowObject;\n\n  get x() {\n    return this.column.x;\n  }\n\n  get y() {\n    return this.row.y;\n  }\n\n  get width() {\n    return this.column.width;\n  }\n  get height() {\n    return this.row.height;\n  }\n}\n\nexport function forEachColumns(\n  columns: ColumnObject[],\n  options: {\n    all?: boolean;\n    afterIndex?: number;\n    beforeIndex?: number;\n  },\n  callback: (item: ColumnObject) => void\n) {\n  for (const item of columns) {\n    if (options.all) {\n      callback(item);\n    } else if (typeof options.afterIndex === \"number\") {\n      if (item.columnIndex > options.afterIndex) {\n        callback(item);\n      }\n    } else if (typeof options.beforeIndex === \"number\") {\n      if (item.columnIndex < options.beforeIndex) {\n        callback(item);\n      }\n    }\n  }\n}\n\nexport const animationConfig = {\n  toValue: 1,\n  stiffness: 1000,\n  damping: 500,\n  useNativeDriver: true,\n};\n","import {\n  cloneElement,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  Animated,\n  Platform,\n  View,\n  PanResponder,\n  ScrollView,\n} from \"react-native\";\n\nimport { Cell } from \"./Cell\";\nimport { VirtualizedGridContext } from \"./VirtualizedGridContext\";\nimport { VirtualizedGridProps } from \"./VirtualizedGridTypes\";\nimport {\n  ColumnObject,\n  ContentObject,\n  CoordinateObject,\n  RowObject,\n} from \"./VirtualizedGridUtils\";\n\nconst useScrollView = false;\nconst onWheelThrottled = true;\n\nexport function VirtualizedGrid({\n  debug = false,\n  style,\n  columnCount,\n  rowCount,\n  renderCell,\n  onChangeColumn = (column: ColumnObject) => undefined,\n  onChangeRow = (row: RowObject) => undefined,\n  getColumnWidth = () => 100,\n  getRowHeight = () => 40,\n  freezedColumns = {},\n  freezedRows = {},\n  onChangeColumnOrder = () => undefined,\n  onChangeRowOrder = () => undefined,\n  onChangeVisibleArea = () => undefined,\n}: VirtualizedGridProps) {\n  const view = useRef<View>(null);\n  const scrollView = useRef<ScrollView>(null);\n\n  const freezedStartColumns = freezedColumns.start ?? 0;\n  const freezedStartRows = freezedRows.start ?? 0;\n\n  const virtualColumns = useRef([]);\n  const virtualRows = useRef([]);\n\n  const [groups, setGroups] = useState<\n    {\n      key: string;\n      children: any[];\n      x?: boolean;\n      y?: boolean;\n    }[]\n  >([]);\n\n  /**\n   * 左上角的坐标\n   * 每次移动的时候，都需要重新更新每一个字段\n   */\n  const coordinate = useRef(new CoordinateObject());\n\n  /**\n   * container's width and height\n   */\n  const containerSize = useRef({ width: 0, height: 0 });\n\n  /**\n   * content's width and height\n   */\n  const content = useRef(new ContentObject());\n\n  /**\n   * 更新\n   * 根据左上角point/cell，往右和往下推算出所有的column和row，\n   * 直到最右边的column/最下面的row超出可见区域\n   */\n  const update = useCallback(() => {\n    if (debug) {\n      console.time(\"update\");\n    }\n    const { width, height } = containerSize.current;\n    const { rowIndex, columnIndex, left, top, x, y } = coordinate.current;\n    let right = left;\n    let bottom = top;\n    let currentColumnIndex = columnIndex;\n    let currentRowIndex = rowIndex;\n    const rows = [];\n    const columns = [];\n    let minColumn = null;\n    let maxColumn = null;\n    let minRow = null;\n    let maxRow = null;\n\n    if (\n      freezedStartColumns > 0 &&\n      currentColumnIndex > freezedStartColumns - 1\n    ) {\n      // 先填入固定列\n      let freezedIndex = 0;\n      let freezedX = 0;\n      while (freezedIndex < freezedStartColumns) {\n        const freezedColumnWidth = getColumnWidth({\n          columnIndex: freezedIndex,\n        });\n        columns.push(\n          new ColumnObject({\n            columnIndex: freezedIndex,\n            width: freezedColumnWidth,\n            x: freezedX,\n            freezed: true,\n          })\n        );\n        freezedIndex++;\n        freezedX += freezedColumnWidth;\n      }\n    }\n\n    while (true) {\n      const currentColumnWidth = getColumnWidth({\n        columnIndex: currentColumnIndex,\n      });\n\n      columns.push(\n        new ColumnObject({\n          columnIndex: currentColumnIndex,\n          width: currentColumnWidth,\n          x: right,\n          freezed: currentColumnIndex < freezedStartColumns,\n        })\n      );\n      if (!minColumn) {\n        minColumn = columns.slice(-1)[0];\n      }\n\n      right += currentColumnWidth;\n      currentColumnIndex++;\n\n      if (right > -x + width) {\n        // console.log(\"column到达边界，停止\");\n        maxColumn = columns.slice(-1)[0];\n        break;\n      }\n    }\n\n    if (freezedStartRows > 0 && currentRowIndex > freezedStartRows - 1) {\n      // 先填入固定行\n      let freezedIndex = 0;\n      let freezedY = 0;\n      while (freezedIndex < freezedStartRows) {\n        const freezedRowHeight = getRowHeight({\n          rowIndex: freezedIndex,\n        });\n        rows.push(\n          new RowObject({\n            rowIndex: freezedIndex,\n            height: freezedRowHeight,\n            y: freezedY,\n            freezed: true,\n          })\n        );\n        freezedIndex++;\n        freezedY += freezedRowHeight;\n      }\n    }\n    while (true) {\n      const currentRowHeight = getRowHeight({\n        rowIndex: currentRowIndex,\n      });\n      rows.push(\n        new RowObject({\n          rowIndex: currentRowIndex,\n          height: currentRowHeight,\n          y: bottom,\n          freezed: currentRowIndex < freezedStartRows,\n        })\n      );\n\n      if (!minRow) {\n        minRow = rows.slice(-1)[0];\n      }\n\n      bottom += currentRowHeight;\n      currentRowIndex++;\n\n      if (bottom > -y + height) {\n        // console.log(\"row到达边界，停止\");\n        maxRow = rows.slice(-1)[0];\n        break;\n      }\n    }\n\n    virtualColumns.current = columns;\n    virtualRows.current = rows;\n\n    const allFreezed = [];\n    const notFreezed = [];\n    const columnFreezed = [];\n    const rowFreezed = [];\n\n    for (const column of columns) {\n      for (const row of rows) {\n        const cell = (\n          <Cell\n            key={`${column.columnIndex}/${row.rowIndex}`}\n            column={column}\n            row={row}\n            renderCell={renderCell}\n          />\n        );\n        if (column.freezed && row.freezed) {\n          allFreezed.push(cell);\n        } else if (column.freezed) {\n          columnFreezed.push(cell);\n        } else if (row.freezed) {\n          rowFreezed.push(cell);\n        } else {\n          notFreezed.push(cell);\n        }\n      }\n    }\n\n    if (debug) {\n      console.timeEnd(\"update\");\n      console.log(\n        \"count\",\n        columns.length,\n        rows.length,\n        columns.length * rows.length\n      );\n      console.time(\"setCells\");\n    }\n\n    onChangeVisibleArea({ minRow, minColumn, maxRow, maxColumn });\n\n    setGroups([\n      { key: \"notFreezed\", children: notFreezed, x: true, y: true },\n      { key: \"columnFreezed\", children: columnFreezed, y: true },\n      { key: \"rowFreezed\", children: rowFreezed, x: true },\n      { key: \"allFreezed\", children: allFreezed },\n    ]);\n    if (debug) {\n      console.timeEnd(\"setCells\");\n    }\n  }, [\n    debug,\n    onChangeVisibleArea,\n    getColumnWidth,\n    getRowHeight,\n    renderCell,\n    freezedStartColumns,\n    freezedStartRows,\n  ]);\n\n  /**\n   * When container layout change, the coordinate will not change,\n   * only new columns and columns may be added, so call `update()`\n   * directly.\n   */\n  const onContainerLayout = useCallback(\n    (event) => {\n      const { width, height } = event.nativeEvent.layout;\n      containerSize.current.width = width;\n      containerSize.current.height = height;\n      update();\n    },\n    [update]\n  );\n\n  /**\n   * deltaX > 0 move to left, show the right columns\n   * deltaX < 0 move to right, show the left columns\n   * deltaY > 0 move to upside, show the bottom columns\n   * deltaY < 0 move to downside, show the top columns\n   */\n  const updateCoordinate = useCallback(\n    (event: { deltaX: number; deltaY: number }) => {\n      if (debug) {\n        console.time(\"updateCoordinate\");\n      }\n      const { deltaX, deltaY } = event;\n      const { columnIndex, rowIndex, left, top } = coordinate.current;\n      let nextX = coordinate.current.x - deltaX;\n      if (nextX > 0) {\n        /**\n         * reach left edge, reset column\n         */\n        nextX = 0;\n        coordinate.current.x = 0;\n        coordinate.current.columnIndex = 0;\n        coordinate.current.left = 0;\n      } else {\n        /**\n         * update x\n         */\n        coordinate.current.x = nextX;\n        /**\n         * if left edige column is visible, do not update\n         * otherwise update it\n         */\n        let currentColumnIndex = columnIndex;\n        let currentLeft = left;\n        let currentRight = left;\n        if (deltaX > 0) {\n          // move left, show right columns\n          while (true) {\n            const currentWidth = getColumnWidth({\n              columnIndex: currentColumnIndex,\n            });\n            currentLeft = currentRight;\n            currentRight += currentWidth;\n            if (currentRight >= -nextX) {\n              break;\n            }\n            currentColumnIndex++;\n          }\n          coordinate.current.columnIndex = currentColumnIndex;\n          coordinate.current.left = currentLeft;\n        } else {\n          // deltaX < 0，move right, show left columns\n          while (true) {\n            if (currentLeft <= -nextX) {\n              break;\n            }\n            currentColumnIndex--;\n\n            const currentWidth = getColumnWidth({\n              columnIndex: currentColumnIndex,\n            });\n            currentLeft -= currentWidth;\n          }\n          coordinate.current.columnIndex = currentColumnIndex;\n          coordinate.current.left = currentLeft;\n        }\n      }\n      let nextY = coordinate.current.y - deltaY;\n      if (nextY > 0) {\n        /**\n         * reach top edge, reset row\n         */\n        nextY = 0;\n        coordinate.current.y = 0;\n        coordinate.current.top = 0;\n        coordinate.current.rowIndex = 0;\n      } else {\n        /**\n         * update y\n         */\n        coordinate.current.y = nextY;\n\n        /**\n         * if top row is visible, do not update,\n         * otherwise update the top row\n         */\n        let currentRowIndex = rowIndex;\n        let currentTop = top;\n        let currentBottom = top;\n        if (deltaY > 0) {\n          // deltaY > 0 move to top, show the bottom rows\n          while (true) {\n            const size = getRowHeight({\n              rowIndex: currentRowIndex,\n            });\n            currentTop = currentBottom;\n            currentBottom += size;\n            if (currentBottom >= -nextY) {\n              break;\n            }\n            currentRowIndex++;\n          }\n          coordinate.current.rowIndex = currentRowIndex;\n          coordinate.current.top = currentTop;\n        } else {\n          // deltaY < 0 move down, show the top rows\n          while (true) {\n            if (currentTop <= -nextY) {\n              break;\n            }\n            currentRowIndex--;\n\n            const size = getRowHeight({\n              rowIndex: currentRowIndex,\n            });\n            currentTop -= size;\n          }\n          coordinate.current.rowIndex = currentRowIndex;\n          coordinate.current.top = currentTop;\n        }\n      }\n\n      if (debug) {\n        console.log(coordinate.current);\n        console.timeEnd(\"updateCoordinate\");\n      }\n      update();\n    },\n    [update, debug, getColumnWidth, getRowHeight]\n  );\n\n  const onWheel = useMemo(() => {\n    let timer = null;\n    let overlayX = 0;\n    let overlayY = 0;\n    return (event) => {\n      if (!onWheelThrottled) {\n        return updateCoordinate(event);\n      }\n      clearTimeout(timer);\n      const { deltaX, deltaY } = event;\n      overlayX += deltaX;\n      overlayY += deltaY;\n      timer = setTimeout(() => {\n        updateCoordinate({\n          deltaX: overlayX,\n          deltaY: overlayY,\n        });\n        overlayX = 0;\n        overlayY = 0;\n      }, 16);\n    };\n  }, [updateCoordinate]);\n\n  const onScroll = useCallback(\n    (event) => {\n      const { x, y } = event.nativeEvent.contentOffset;\n      const { offsetX, offsetY } = content.current;\n\n      const deltaX = x - offsetX;\n      const deltaY = y - offsetY;\n      content.current.offsetX = x;\n      content.current.offsetY = y;\n      updateCoordinate({\n        deltaX,\n        deltaY,\n      });\n    },\n    [updateCoordinate]\n  );\n\n  useEffect(() => {\n    if (Platform.OS === \"web\") {\n      const el = view.current as any;\n      if (el) {\n        el.addEventListener(\"wheel\", onWheel);\n        return () => {\n          el.removeEventListener(\"wheel\", onWheel);\n        };\n      }\n    }\n  }, [onWheel]);\n\n  const panResponder = useMemo(() => {\n    let prevGestureState = null;\n    return PanResponder.create({\n      onPanResponderGrant: (event, gestureState) => {\n        prevGestureState = { ...gestureState };\n      },\n      onMoveShouldSetPanResponder: () => {\n        return true;\n      },\n      onPanResponderMove: (event, gestureState) => {\n        if (!prevGestureState) {\n          prevGestureState = { ...gestureState };\n          return;\n        }\n        const deltaX = -gestureState.dx + prevGestureState.dx;\n        const deltaY = -gestureState.dy + prevGestureState.dy;\n        prevGestureState = { ...gestureState };\n        updateCoordinate({\n          deltaX,\n          deltaY,\n        });\n      },\n      onPanResponderRelease: () => {\n        prevGestureState = null;\n      },\n    });\n  }, [updateCoordinate]);\n\n  const container = useMemo(() => {\n    if (Platform.OS === \"web\") {\n      if (useScrollView) {\n        return (\n          <ScrollView\n            ref={scrollView}\n            style={[\n              {\n                overflow: \"scroll\",\n              },\n              style,\n            ]}\n            onLayout={onContainerLayout}\n            onScroll={onScroll}\n            scrollEventThrottle={16}\n            {...panResponder.panHandlers}\n          />\n        );\n      } else {\n        return (\n          <View\n            ref={view}\n            style={[\n              {\n                overflow: \"hidden\",\n              },\n              style,\n            ]}\n            onLayout={onContainerLayout}\n            {...panResponder.panHandlers}\n          />\n        );\n      }\n    }\n  }, [onContainerLayout, onScroll, panResponder, style]);\n\n  return (\n    <VirtualizedGridContext.Provider\n      value={{\n        virtualColumns,\n        virtualRows,\n        onChangeColumn,\n        onChangeRow,\n        coordinate,\n        containerSize,\n        updateCoordinate,\n        onChangeColumnOrder,\n        onChangeRowOrder,\n      }}\n    >\n      {cloneElement(\n        container,\n        null,\n        groups.map(({ key, children, x = false, y = false }) => {\n          return (\n            <Animated.View\n              key={key}\n              style={[\n                {\n                  position: \"absolute\",\n                  transform: [\n                    {\n                      translateX: x ? coordinate.current.xAnimated : 0,\n                    },\n                    {\n                      translateY: y ? coordinate.current.yAnimated : 0,\n                    },\n                  ],\n                },\n                useScrollView && {\n                  top: content.current.offsetY,\n                  left: content.current.offsetX,\n                  width: key === \"notFreezed\" ? content.current.width : 0,\n                  height: key === \"notFreezed\" ? content.current.height : 0,\n                },\n              ]}\n            >\n              {children}\n            </Animated.View>\n          );\n        })\n      )}\n    </VirtualizedGridContext.Provider>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Pressable, Animated, PanResponder } from \"react-native\";\n\nimport { useGrid } from \"./VirtualizedGridContext\";\nimport { ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport function ColumnResizer({\n  column,\n  row,\n}: {\n  column: ColumnObject;\n  row: RowObject;\n}) {\n  const { virtualColumns, onChangeColumn } = useGrid();\n\n  const panResponder = useMemo(() => {\n    let rightColumns = [];\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminate\");\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminationRequest\");\n        return false;\n      },\n      onPanResponderReject: () => {\n        __DEV__ && console.log(\"[resizer] onPanResponderReject\");\n      },\n\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onMoveShouldSetPanResponder\");\n        return true;\n      },\n\n      onPanResponderGrant: () => {\n        __DEV__ && console.log(\"[resizer] grant\");\n        column.widthAnimated.setOffset(column.width);\n        rightColumns = [];\n        for (const item of virtualColumns.current) {\n          if (item.columnIndex > column.columnIndex) {\n            rightColumns.push(item);\n            item.xAnimated.setOffset(item.x);\n          }\n        }\n      },\n\n      onPanResponderMove: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] move\");\n        for (const item of rightColumns) {\n          item.xAnimated.setValue(gestureState.dx);\n        }\n        column.widthAnimated.setValue(gestureState.dx);\n        onChangeColumn(column);\n      },\n\n      onPanResponderRelease: () => {\n        __DEV__ && console.log(\"[resizer] release\");\n        column.widthAnimated.flattenOffset();\n        for (const item of rightColumns) {\n          item.xAnimated.flattenOffset();\n        }\n        rightColumns = [];\n      },\n    });\n  }, [column, virtualColumns, onChangeColumn]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n          zIndex: 10,\n          height: row.height,\n          width: 20,\n        },\n      ]}\n    >\n      <Pressable\n        style={[\n          {\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            height: row.height,\n          },\n        ]}\n      >\n        {(state) => {\n          const hovered = (state as unknown as any).hovered;\n          return (\n            <Animated.View\n              style={[\n                {\n                  height: row.heightAnimated,\n                  width: 0,\n                },\n                hovered && {\n                  width: 5,\n                  backgroundColor: \"blue\",\n                },\n              ]}\n            />\n          );\n        }}\n      </Pressable>\n    </Animated.View>\n  );\n}\n","import React, { ReactNode, useMemo } from \"react\";\nimport { Animated, PanResponder } from \"react-native\";\n\nimport { useGrid } from \"./VirtualizedGridContext\";\nimport { ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport function ColumnReorder({\n  column,\n  row,\n  children,\n}: {\n  column: ColumnObject;\n  row: RowObject;\n  children?: ReactNode;\n}) {\n  const { virtualColumns, onChangeColumnOrder } = useGrid();\n\n  const panResponder = useMemo(() => {\n    let startX = 0;\n    let highlightColumn: ColumnObject | null = null;\n    let startColumnIndex = 0;\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        __DEV__ && console.log(\"[reorder] onPanResponderTerminate\");\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        __DEV__ && console.log(\"[reorder] onPanResponderTerminationRequest\");\n        return false;\n      },\n      onPanResponderReject: () => {\n        __DEV__ && console.log(\"[reorder] onPanResponderReject\");\n      },\n\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        __DEV__ && console.log(\"[reorder] onMoveShouldSetPanResponder\");\n        return true;\n      },\n\n      onPanResponderGrant: (event) => {\n        __DEV__ && console.log(\"[reorder] grant\");\n        startX = column.x + event.nativeEvent.locationX;\n        startColumnIndex = column.columnIndex;\n      },\n\n      onPanResponderMove: (event, gestureState) => {\n        __DEV__ && console.log(\"[reorder] move\", gestureState.dx);\n        for (const item of virtualColumns.current) {\n          const itemCenterX = item.x + item.width / 2;\n          if (\n            Math.abs(itemCenterX - startX - gestureState.dx) <\n            item.width / 2\n          ) {\n            console.log(\"highlightcolumn\", item.columnIndex);\n            if (highlightColumn === item) {\n              break;\n            }\n            if (highlightColumn) {\n              highlightColumn.highlightOpacityAnimated.setValue(0);\n            }\n            highlightColumn = item;\n            highlightColumn.highlightOpacityAnimated.setValue(1);\n            break;\n          }\n        }\n      },\n\n      onPanResponderRelease: () => {\n        __DEV__ && console.log(\"[reorder] release\");\n        if (highlightColumn) {\n          highlightColumn.highlightOpacityAnimated.setValue(0);\n          if (startColumnIndex !== highlightColumn.columnIndex) {\n            onChangeColumnOrder({\n              fromIndex: startColumnIndex,\n              toIndex: highlightColumn.columnIndex,\n            });\n          }\n        }\n      },\n    });\n  }, [column, onChangeColumnOrder, virtualColumns]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          zIndex: 8,\n          top: 0,\n          left: 0,\n          height: row.height,\n          width: column.width,\n        },\n      ]}\n    >\n      {children}\n    </Animated.View>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Pressable, Animated, PanResponder } from \"react-native\";\n\nimport { useGrid } from \"./VirtualizedGridContext\";\nimport { ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport function RowResizer({\n  column,\n  row,\n}: {\n  column: ColumnObject;\n  row: RowObject;\n}) {\n  const { virtualRows, onChangeRow } = useGrid();\n\n  const panResponder = useMemo(() => {\n    let bottomRows = [];\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminate\");\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminationRequest\");\n        return false;\n      },\n      onPanResponderReject: () => {\n        __DEV__ && console.log(\"[resizer] onPanResponderReject\");\n      },\n\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onMoveShouldSetPanResponder\");\n        return true;\n      },\n\n      onPanResponderGrant: () => {\n        __DEV__ && console.log(\"[resizer] grant\");\n        row.heightAnimated.setOffset(row.height);\n        bottomRows = [];\n        for (const item of virtualRows.current) {\n          if (item.rowIndex > row.rowIndex) {\n            bottomRows.push(item);\n            item.yAnimated.setOffset(item.y);\n          }\n        }\n      },\n\n      onPanResponderMove: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] move\");\n        for (const item of bottomRows) {\n          item.yAnimated.setValue(gestureState.dy);\n        }\n        row.heightAnimated.setValue(gestureState.dy);\n        onChangeRow(row);\n      },\n\n      onPanResponderRelease: () => {\n        __DEV__ && console.log(\"[resizer] release\");\n        row.heightAnimated.flattenOffset();\n        for (const item of bottomRows) {\n          item.yAnimated.flattenOffset();\n        }\n        bottomRows = [];\n      },\n    });\n  }, [row, virtualRows, onChangeRow]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          bottom: 0,\n          left: 0,\n          zIndex: 10,\n          height: 20,\n          width: column.width,\n        },\n      ]}\n    >\n      <Pressable\n        style={[\n          {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            width: column.width,\n            height: 20,\n          },\n        ]}\n      >\n        {(state) => {\n          const hovered = (state as unknown as any).hovered;\n          return (\n            <Animated.View\n              style={[\n                {\n                  width: column.widthAnimated,\n                  height: 0,\n                },\n                hovered && {\n                  height: 5,\n                  backgroundColor: \"blue\",\n                },\n              ]}\n            />\n          );\n        }}\n      </Pressable>\n    </Animated.View>\n  );\n}\n","import React, { useCallback, useLayoutEffect, useRef, useState } from \"react\";\nimport {\n  ActivityIndicator,\n  Animated,\n  Platform,\n  Text,\n  useWindowDimensions,\n  View,\n} from \"react-native\";\n\nimport { AutoHideActivityIndicator } from \"./docs/AutoHideActivityIndicator\";\nimport { Header } from \"./docs/Header\";\nimport {\n  VirtualizedGrid,\n  ColumnResizer,\n  ColumnObject,\n  RowObject,\n  RowResizer,\n  ColumnReorder,\n} from \"./src/index\";\n\nexport default function App() {\n  const { width, height } = useWindowDimensions();\n  const columnWidthCache = useRef(new Map<string, number>());\n  const rowHeightCache = useRef(new Map<string, number>());\n\n  const updateColumn = useCallback((column: ColumnObject) => {\n    columnWidthCache.current.set(`${column.columnIndex}`, column.width);\n  }, []);\n  const updateRow = useCallback((row: RowObject) => {\n    rowHeightCache.current.set(`${row.rowIndex}`, row.height);\n  }, []);\n\n  const onChangeColumnOrder = useCallback(\n    (options: { fromIndex: number; toIndex: number }) => {\n      console.log(options);\n    },\n    []\n  );\n\n  useLayoutEffect(() => {\n    if (Platform.OS === \"web\") {\n      document.body.style.overflow = \"hidden\";\n    }\n  }, []);\n  return (\n    <>\n      <Header />\n\n      <VirtualizedGrid\n        debug={__DEV__}\n        columnCount={Number.MAX_SAFE_INTEGER}\n        rowCount={Number.MAX_SAFE_INTEGER}\n        freezedColumns={{ start: 1 }}\n        freezedRows={{ start: 1 }}\n        style={[\n          {\n            // borderWidth: 1,\n            borderColor: \"#fff\",\n            width,\n            height: height - 56,\n          },\n          Platform.select({\n            web: {\n              userSelect: \"none\",\n            },\n          }) as unknown,\n        ]}\n        getColumnWidth={(info: { columnIndex: number }) => {\n          if (columnWidthCache.current.has(`${info.columnIndex}`)) {\n            return columnWidthCache.current.get(`${info.columnIndex}`);\n          }\n          const random = Math.round(Math.random() * 100);\n          return [50, 140, 200, 120][info.columnIndex % 4];\n        }}\n        getRowHeight={(info: { rowIndex: number }) => {\n          if (rowHeightCache.current.has(`${info.rowIndex}`)) {\n            return rowHeightCache.current.get(`${info.rowIndex}`);\n          }\n          const random = Math.round(Math.random() * 100);\n\n          return [40, 50, 60, 90, 40, 45, 40, 50, 55, 50][info.rowIndex % 10];\n        }}\n        onChangeColumn={updateColumn}\n        onChangeColumnOrder={onChangeColumnOrder}\n        onChangeRow={updateRow}\n        onChangeVisibleArea={(event) => {\n          // console.log(\"onChangeVisibleArea\", event);\n        }}\n        renderCell={({ column, row }) => {\n          return (\n            <View\n              style={{\n                flex: 1,\n                backgroundColor:\n                  row.rowIndex % 2 === 1 ? \"rgb(246, 248, 250)\" : \"#fff\",\n                borderTopWidth: 1,\n                borderLeftWidth: 1,\n                borderColor: \"rgb(216, 222, 228)\",\n                padding: 4,\n                borderRightWidth: column.columnIndex === 0 ? 1 : 0,\n                borderBottomWidth: row.rowIndex === 0 ? 1 : 0,\n              }}\n            >\n              {column.columnIndex === 0 && row.rowIndex === 0 && null}\n              {row.rowIndex === 0 && column.columnIndex > 0 && (\n                <>\n                  <ColumnReorder row={row} column={column}>\n                    <>\n                      <Text>c: {column.columnIndex}</Text>\n                      <Text>r: {row.rowIndex}</Text>\n                    </>\n                  </ColumnReorder>\n                  <ColumnResizer row={row} column={column} />\n                </>\n              )}\n              {column.columnIndex === 0 && row.rowIndex > 0 && (\n                <>\n                  <>\n                    <Text>c: {column.columnIndex}</Text>\n                    <Text>r: {row.rowIndex}</Text>\n                  </>\n                  <RowResizer row={row} column={column} />\n                </>\n              )}\n              {column.columnIndex > 0 && row.rowIndex > 0 && (\n                <>\n                  {/* <AutoHideActivityIndicator\n                    key={`${columnIndex}/${rowIndex}`}\n                  /> */}\n                  <Text>c: {column.columnIndex}</Text>\n                  <Text>r: {row.rowIndex}</Text>\n                </>\n              )}\n              <Animated.View\n                style={[\n                  {\n                    position: \"absolute\",\n                    left: 0,\n                    top: -1,\n                    bottom: -1,\n                    width: 2,\n                    backgroundColor: \"blue\",\n                    opacity: column.highlightOpacityAnimated,\n                  },\n                  Platform.select({\n                    web: {\n                      pointerEvents: \"none\",\n                    } as unknown as any,\n                  }),\n                ]}\n              />\n            </View>\n          );\n        }}\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}