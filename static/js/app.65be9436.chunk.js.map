{"version":3,"sources":["src/Cell.tsx","src/VirtualGridUtils.tsx","src/VirtualizedGrid.tsx","App.tsx"],"names":["Cell","forwardRef","ref","renderCell","column","row","coordinate","useState","rowIndex","columnIndex","data","setData","useImperativeHandle","update","Animated","View","style","position","width","widthAnimated","zIndex","freezed","height","heightAnimated","transform","translateX","xAnimated","add","x","translateY","yAnimated","y","ColumnObject","move","event","nextX","Math","min","max","minX","deltaX","nextY","minY","deltaY","setValue","this","Value","containerWidthAnimated","containerHeightAnimated","contentWidthAnimated","contentHeightAnimated","minXAnimated","subtract","minYAnimated","JSON","parse","stringify","RowObject","CellObject","createRef","VirtualizedGrid","columnCount","rowCount","getColumnWidth","getRowHeight","showColumnLine","showRowLine","freezedColumns","freezedRows","view","useRef","layoutCount","setLayoutCount","virtualColumns","virtualRows","virtualCells","freezedStartColumns","start","freezedStartRows","end","ValueXY","containerSize","getRange","useCallback","minColumn","current","maxColumn","minRow","maxRow","i","length","onContainerLayout","layout","nativeEvent","virtualColumnsTotalWidth","virtualRowsTotalHeight","rowHeight","push","prev","columnWidth","extraRows","prevRow","extraColumns","prevColumn","j","updateCoordinate","containerWidth","containerHeight","shouldSplitAction","splitAction","finalMaxColumnIndex","deltaX0","finalMaxRowIndex","deltaY0","outsideColumns","outsideRows","outsideCells","console","error","columnValue","unshift","cell","includes","requestAnimationFrame","onWheel","useEffect","Platform","OS","el","addEventListener","removeEventListener","panResponder","useMemo","prevGestureState","PanResponder","create","onPanResponderGrant","gestureState","onMoveShouldSetPanResponder","onPanResponderMove","dx","dy","overflow","onLayout","panHandlers","map","index","backgroundColor","App","useWindowDimensions","useLayoutEffect","document","body","Number","MAX_SAFE_INTEGER","borderWidth","borderColor","select","web","userSelect","info","flex","borderTopWidth","borderLeftWidth","padding","Text"],"mappings":"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","file":"static/js/app.65be9436.chunk.js","sourcesContent":["import { forwardRef, ReactNode, useImperativeHandle, useState } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellMethods } from \"./VirtualGridTypes\";\nimport { ColumnObject, RowObject } from \"./VirtualGridUtils\";\n\nexport const Cell = forwardRef<\n  CellMethods,\n  {\n    coordinate: Animated.AnimatedValueXY;\n    column: ColumnObject;\n    row: RowObject;\n    renderCell: (info: { columnIndex: number; rowIndex: number }) => ReactNode;\n  }\n>(({ renderCell, column, row, coordinate }, ref) => {\n  const [data, setData] = useState({\n    rowIndex: row.rowIndex,\n    columnIndex: column.columnIndex,\n  });\n\n  useImperativeHandle(\n    ref,\n    () => {\n      return {\n        update: (data) => {\n          setData(data);\n        },\n      } as CellMethods;\n    },\n    []\n  );\n\n  return (\n    <Animated.View\n      style={{\n        position: \"absolute\",\n        width: column.widthAnimated,\n        zIndex: (column.freezed ? 1 : 0) + (row.freezed ? 1 : 0),\n        height: row.heightAnimated,\n        transform: [\n          {\n            translateX: column.freezed\n              ? column.xAnimated\n              : Animated.add(column.xAnimated, coordinate.x),\n          },\n          {\n            translateY: row.freezed\n              ? row.yAnimated\n              : Animated.add(row.yAnimated, coordinate.y),\n          },\n        ],\n      }}\n    >\n      {renderCell(data)}\n    </Animated.View>\n  );\n});\n","import { createRef, RefObject } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellMethods } from \"./VirtualGridTypes\";\n\nexport class CoordinateObject {\n  constructor() {\n    this.xAnimated = new Animated.Value(0);\n    this.yAnimated = new Animated.Value(0);\n    this.containerWidthAnimated = new Animated.Value(0);\n    this.containerHeightAnimated = new Animated.Value(0);\n    this.contentWidthAnimated = new Animated.Value(0);\n    this.contentHeightAnimated = new Animated.Value(0);\n    this.minXAnimated = Animated.subtract(\n      this.containerWidthAnimated,\n      this.contentWidthAnimated\n    );\n    this.minYAnimated = Animated.subtract(\n      this.containerWidthAnimated,\n      this.contentWidthAnimated\n    );\n  }\n\n  xAnimated: Animated.Value;\n  yAnimated: Animated.Value;\n  minXAnimated: Animated.AnimatedSubtraction;\n  minYAnimated: Animated.AnimatedSubtraction;\n  containerWidthAnimated: Animated.Value;\n  containerHeightAnimated: Animated.Value;\n  contentWidthAnimated: Animated.Value;\n  contentHeightAnimated: Animated.Value;\n\n  move = (event: WheelEvent) => {\n    const nextX = Math.min(0, Math.max(this.minX, this.x - event.deltaX));\n    const nextY = Math.min(0, Math.max(this.minY, this.y - event.deltaY));\n\n    this.xAnimated.setValue(nextX);\n    this.yAnimated.setValue(nextY);\n  };\n\n  get minX(): number {\n    return JSON.parse(JSON.stringify(this.minXAnimated));\n  }\n  get minY(): number {\n    return JSON.parse(JSON.stringify(this.minYAnimated));\n  }\n\n  get x(): number {\n    return JSON.parse(JSON.stringify(this.xAnimated));\n  }\n  get y(): number {\n    return JSON.parse(JSON.stringify(this.yAnimated));\n  }\n  get contentWidth(): number {\n    return JSON.parse(JSON.stringify(this.contentWidthAnimated));\n  }\n  get contentHeight(): number {\n    return JSON.parse(JSON.stringify(this.contentHeightAnimated));\n  }\n  get containerWidth(): number {\n    return JSON.parse(JSON.stringify(this.containerWidthAnimated));\n  }\n  get containerHeight(): number {\n    return JSON.parse(JSON.stringify(this.containerHeightAnimated));\n  }\n}\n\nexport class ColumnObject {\n  constructor({\n    x,\n    width,\n    columnIndex,\n    freezed = false,\n  }: {\n    x: number;\n    width: number;\n    columnIndex: number;\n    freezed?: boolean;\n  }) {\n    this.xAnimated = new Animated.Value(x);\n    this.widthAnimated = new Animated.Value(width);\n    this.columnIndex = columnIndex;\n    this.freezed = freezed;\n  }\n\n  columnIndex: number;\n  xAnimated: Animated.Value;\n  widthAnimated: Animated.Value;\n  freezed: boolean;\n\n  get x(): number {\n    return JSON.parse(JSON.stringify(this.xAnimated));\n  }\n  get width(): number {\n    return JSON.parse(JSON.stringify(this.widthAnimated));\n  }\n}\n\nexport class RowObject {\n  constructor({\n    y,\n    height,\n    rowIndex,\n    freezed = false,\n  }: {\n    y: number;\n    height: number;\n    rowIndex: number;\n    freezed?: boolean;\n  }) {\n    this.yAnimated = new Animated.Value(y);\n    this.heightAnimated = new Animated.Value(height);\n    this.rowIndex = rowIndex;\n    this.freezed = freezed;\n  }\n\n  rowIndex: number;\n  yAnimated: Animated.Value;\n  heightAnimated: Animated.Value;\n  freezed: boolean;\n\n  get y(): number {\n    return JSON.parse(JSON.stringify(this.yAnimated));\n  }\n\n  get height(): number {\n    return JSON.parse(JSON.stringify(this.heightAnimated));\n  }\n}\n\nexport class CellObject {\n  constructor({ column, row }: { column: ColumnObject; row: RowObject }) {\n    this.column = column;\n    this.row = row;\n    this.ref = createRef();\n  }\n\n  ref: RefObject<CellMethods>;\n  column: ColumnObject;\n  row: RowObject;\n\n  get x() {\n    return this.column.x;\n  }\n\n  get y() {\n    return this.row.y;\n  }\n\n  get width() {\n    return this.column.width;\n  }\n  get height() {\n    return this.row.height;\n  }\n}\n","import {\n  Fragment,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { Animated, Platform, View, PanResponder } from \"react-native\";\n\nimport { Cell } from \"./Cell\";\nimport { VirtualizedGridProps } from \"./VirtualGridTypes\";\nimport { CellObject, ColumnObject, RowObject } from \"./VirtualGridUtils\";\n\nexport function VirtualizedGrid({\n  style,\n  columnCount,\n  rowCount,\n  renderCell,\n  getColumnWidth = () => 100,\n  getRowHeight = () => 40,\n  showColumnLine = false,\n  showRowLine = false,\n  freezedColumns = {},\n  freezedRows = {},\n}: VirtualizedGridProps) {\n  const view = useRef<View>(null);\n  const [layoutCount, setLayoutCount] = useState(0);\n  const virtualColumns = useRef<ColumnObject[]>([]);\n  const virtualRows = useRef<RowObject[]>([]);\n  const virtualCells = useRef<CellObject[]>([]);\n\n  const freezedStartColumns = freezedColumns.start ?? 0;\n  const freezedEndColumns = freezedColumns.end ?? 0;\n  const freezedStartRows = freezedRows.start ?? 0;\n  const freezedEndRows = freezedRows.end ?? 0;\n\n  /**\n   * 左上角的坐标\n   */\n  const coordinate = useRef(new Animated.ValueXY({ x: 0, y: 0 }));\n  const containerSize = useRef(new Animated.ValueXY({ x: 0, y: 0 }));\n\n  /**\n   * 获取当前的rowIndex范围和columnIndex范围\n   */\n  const getRange = useCallback(() => {\n    let minColumn = virtualColumns.current[0];\n    let maxColumn = virtualColumns.current[0];\n    let minRow = virtualRows.current[0];\n    let maxRow = virtualRows.current[0];\n\n    for (let i = 0; i < virtualColumns.current.length; i++) {\n      const column = virtualColumns.current[i];\n      if (column.freezed) {\n        continue;\n      }\n      if (minColumn.freezed) {\n        minColumn = column;\n        continue;\n      }\n      if (column.columnIndex < minColumn.columnIndex) {\n        minColumn = column;\n      }\n      if (column.columnIndex > maxColumn.columnIndex) {\n        maxColumn = column;\n      }\n    }\n\n    for (let i = 0; i < virtualRows.current.length; i++) {\n      const row = virtualRows.current[i];\n      if (row.freezed) {\n        continue;\n      }\n      if (minRow.freezed) {\n        minRow = row;\n        continue;\n      }\n      if (row.rowIndex < minRow.rowIndex) {\n        minRow = row;\n      }\n      if (row.rowIndex > maxRow.rowIndex) {\n        maxRow = row;\n      }\n    }\n    return { minColumn, minRow, maxColumn, maxRow };\n  }, []);\n\n  /**\n   * init containerSize, virtualColumns, virtualRows\n   */\n  const onContainerLayout = useCallback(\n    (event) => {\n      const { layout } = event.nativeEvent;\n      containerSize.current.setValue({ x: layout.width, y: layout.height });\n\n      let virtualColumnsTotalWidth = 0;\n      let virtualRowsTotalHeight = 0;\n\n      for (const column of virtualColumns.current) {\n        virtualColumnsTotalWidth += column.width;\n      }\n      for (const row of virtualRows.current) {\n        virtualRowsTotalHeight += row.height;\n      }\n\n      const { maxRow, maxColumn } = getRange();\n\n      /**\n       * 填满virtualRows和virtualColumns\n       */\n      let rowIndex = maxRow?.rowIndex ?? -1;\n      while (virtualRowsTotalHeight < layout.height) {\n        rowIndex++;\n        const rowHeight = getRowHeight({ rowIndex });\n        virtualRowsTotalHeight += rowHeight;\n        if (virtualRows.current.length === 0) {\n          virtualRows.current.push(\n            new RowObject({\n              y: 0,\n              height: rowHeight,\n              rowIndex,\n              freezed: rowIndex < freezedStartRows,\n            })\n          );\n        } else {\n          const prev = virtualRows.current[virtualRows.current.length - 1];\n          virtualRows.current.push(\n            new RowObject({\n              y: prev.y + prev.height,\n              height: rowHeight,\n              rowIndex,\n              freezed: rowIndex < freezedStartRows,\n            })\n          );\n        }\n      }\n      let columnIndex = maxColumn?.columnIndex ?? -1;\n      while (virtualColumnsTotalWidth < layout.width) {\n        columnIndex++;\n        const columnWidth = getColumnWidth({ columnIndex });\n        virtualColumnsTotalWidth += columnWidth;\n        if (virtualColumns.current.length === 0) {\n          virtualColumns.current.push(\n            new ColumnObject({\n              x: 0,\n              width: columnWidth,\n              columnIndex,\n              freezed: columnIndex < freezedStartColumns,\n            })\n          );\n        } else {\n          const prev =\n            virtualColumns.current[virtualColumns.current.length - 1];\n          virtualColumns.current.push(\n            new ColumnObject({\n              width: columnWidth,\n              x: prev.x + prev.width,\n              columnIndex,\n              freezed: columnIndex < freezedStartColumns,\n            })\n          );\n        }\n      }\n\n      /**\n       * 增加额外的column和row,\n       * 1. 避免出现空白列/行\n       * 2. 补充freezed的空缺\n       */\n      let extraRows = freezedStartRows + 1;\n      while (extraRows > 0) {\n        rowIndex++;\n        const rowHeight = getRowHeight({ rowIndex });\n        const prevRow = virtualRows.current[virtualRows.current.length - 1];\n        virtualRows.current.push(\n          new RowObject({\n            y: prevRow.y + prevRow.height,\n            height: rowHeight,\n            rowIndex,\n          })\n        );\n        extraRows--;\n      }\n\n      let extraColumns = freezedStartColumns + 1;\n      while (extraColumns > 0) {\n        columnIndex++;\n        const prevColumn =\n          virtualColumns.current[virtualColumns.current.length - 1];\n        const columnWidth = getColumnWidth({ columnIndex });\n        virtualColumns.current.push(\n          new ColumnObject({\n            width: columnWidth,\n            x: prevColumn.x + prevColumn.width,\n            columnIndex,\n          })\n        );\n\n        extraColumns--;\n      }\n\n      /**\n       * 重置cells\n       * cells的数量是 (rowCount+1) * (columnCount+1)，因为\n       * 会出现左边的cell还没消失\n       */\n      virtualCells.current = [];\n      for (let i = 0; i < virtualRows.current.length; i++) {\n        const row = virtualRows.current[i];\n        for (let j = 0; j < virtualColumns.current.length; j++) {\n          const column = virtualColumns.current[j];\n          virtualCells.current.push(\n            new CellObject({\n              column,\n              row,\n            })\n          );\n        }\n      }\n\n      setLayoutCount((prev) => prev + 1);\n    },\n    [\n      getColumnWidth,\n      getRowHeight,\n      getRange,\n      freezedStartColumns,\n      freezedStartRows,\n    ]\n  );\n\n  const updateCoordinate = useCallback(\n    (event: { deltaX: number; deltaY: number }) => {\n      const { x, y } = JSON.parse(JSON.stringify(coordinate.current));\n      const { x: containerWidth, y: containerHeight } = JSON.parse(\n        JSON.stringify(containerSize.current)\n      );\n\n      /**\n       * 如果移动过快，超过了逐次迁移元素的速度，那么拆分成多次操作，重复\n       * 调用updateCoordinate\n       */\n      let shouldSplitAction = false;\n      const splitAction = { deltaX: 0, deltaY: 0 };\n\n      /**\n       * (1/5)\n       * 获取当前的rowIndex范围和columnIndex范围\n       * 如果现在已经到最左边column或最右边column了，那就不再继续移动column，\n       * 同时coordinate.x最小值不能小于 containerWidth - (maxColumn.x+column.width)\n       * 也就是说coordinate.x区间是：[containerWidth - (maxColumn.x+column.width), 0]\n       *\n       * row同理\n       */\n      let { minColumn, maxColumn, minRow, maxRow } = getRange();\n\n      /**\n       * (2/5)\n       * 计算出minX,minY\n       * 根据deltaX位移计算需要展示的column,\n       * 逐个通过消耗deltaX，通过getColumnWidth获取宽度，直到deltaX额度用完\n       * 1. 判断maxColumn是否已经完全展示，\n       *    a. 未完全展示：deltaX -= maxColumn未完全展示的部分(deltaX等于0结束)\n       *       nextX -= maxColumn未完全展示的部分；-> 2\n       *    b. 完全展示：-> 2\n       * 2. 获取下一个maxColumn，判断deltaX剩余额度是否大于maxColumn宽度\n       *    a. 大于: deltaX -= maxColumn宽度，\n       *            nextX -= maxColumn宽度，-> 2\n       *    b. 小于等于：结束\n       *\n       * deltaY同理\n       *\n       * deltaX > 0 左移\n       * deltaX < 0 右移\n       * deltaY > 0 上移\n       * deltaY < 0 下移\n       */\n\n      let deltaX = event.deltaX;\n      let deltaY = event.deltaY;\n      let finalMaxColumnIndex = maxColumn.columnIndex;\n      let deltaX0 = maxColumn.x + maxColumn.width + x - containerWidth;\n      let finalMaxRowIndex = maxRow.rowIndex;\n      let deltaY0 = maxRow.y + maxRow.height + y - containerHeight;\n\n      // 左移补尾\n      if (deltaX > 0) {\n        while (deltaX > deltaX0) {\n          if (finalMaxColumnIndex === columnCount) {\n            break;\n          }\n          finalMaxColumnIndex++;\n          if (\n            finalMaxColumnIndex - maxColumn.columnIndex >=\n            virtualColumns.current.length - 2\n          ) {\n            shouldSplitAction = true;\n            break;\n          }\n          const maxColumnWidth = getColumnWidth({\n            columnIndex: finalMaxColumnIndex,\n          });\n          deltaX0 += maxColumnWidth;\n        }\n        deltaX = Math.min(deltaX0, deltaX);\n        if (shouldSplitAction) {\n          splitAction.deltaX = event.deltaX - deltaX;\n        }\n      }\n      if (deltaY > 0) {\n        while (deltaY > deltaY0) {\n          if (finalMaxRowIndex === rowCount) {\n            break;\n          }\n          finalMaxRowIndex++;\n          if (\n            finalMaxRowIndex - maxRow.rowIndex >=\n            virtualRows.current.length - 2\n          ) {\n            shouldSplitAction = true;\n            break;\n          }\n          const maxRowHeight = getRowHeight({\n            rowIndex: finalMaxRowIndex,\n          });\n          deltaY0 += maxRowHeight;\n        }\n        deltaY = Math.min(deltaY0, deltaY);\n        if (shouldSplitAction) {\n          splitAction.deltaY = event.deltaY - deltaY;\n        }\n      }\n\n      /**\n       * (3/5)\n       * 更新左上角坐标，其他所有位置都依据这个坐标进行位移\n       * x值区间：[containerWidth - contentWidth, 0]\n       * y值区间：[containerHeight - contentHeight, 0]\n       */\n      if (x - deltaX > 0) {\n        deltaX = x;\n      }\n      if (y - deltaY > 0) {\n        deltaY = y;\n      }\n\n      const nextX = x - deltaX;\n      const nextY = y - deltaY;\n\n      coordinate.current.setValue({\n        x: nextX,\n        y: nextY,\n      });\n\n      /**\n       * (4/5)\n       * 更新virtualColumns和virtualRows\n       * 如果deltaX > 0 (往左边移), 将最左边在可视范围外的columns依次移动到末尾\n       * 如果deltaX < 0（往右边移）, 将最右边在可视范围外的columns倒序依次移动到头部\n       * rows同理。\n       */\n      const outsideColumns: ColumnObject[] = [];\n      const outsideRows: RowObject[] = [];\n      const outsideCells: CellObject[] = [];\n\n      // 左移，在末尾增加\n      if (deltaX > 0) {\n        for (let i = 0; i < virtualColumns.current.length; i++) {\n          const column = virtualColumns.current[i];\n\n          /**\n           * 判断超出范围的依据是列的*右侧*小于0\n           */\n          const isOutOfView =\n            !column.freezed &&\n            column.x + nextX + column.width < freezedStartColumns;\n          if (isOutOfView) {\n            outsideColumns.push(column);\n          }\n        }\n\n        /**\n         * 所有column均已超出屏幕，此时根据finalMaxIndex重新计算\n         * 所有的column的位置\n         */\n\n        if (outsideColumns.length === virtualColumns.current.length) {\n          console.error(\"This shoud not happen\");\n        }\n        // console.log({ outsideColumns, maxColumnValue });\n        if (outsideColumns.length > 0) {\n          for (let i = 0; i < outsideColumns.length; i++) {\n            /**\n             * 先更新columnIndex\n             * 通过columnIndex拿到columnWidth\n             * 再更新maxColumnValue以供下一个column使用\n             */\n            const column = outsideColumns[i];\n            column.xAnimated.setValue(maxColumn.x + maxColumn.width);\n            column.columnIndex = maxColumn.columnIndex + 1;\n            const columnWidth = getColumnWidth(column);\n            column.widthAnimated.setValue(columnWidth);\n            maxColumn = column;\n          }\n        }\n      }\n\n      // 右移，在头部增加\n      if (deltaX < 0) {\n        for (let i = 0; i < virtualColumns.current.length; i++) {\n          const column = virtualColumns.current[i];\n          const columnValue = column.x;\n\n          /**\n           * 判断超出范围的依据是列的*左侧*大于containerWidth\n           */\n          const isOutOfView =\n            !column.freezed && columnValue + nextX > containerWidth;\n          if (isOutOfView) {\n            outsideColumns.unshift(column);\n          }\n        }\n        // console.log({ outsideColumns, minColumnValue });\n        if (outsideColumns.length > 0) {\n          for (let i = 0; i < outsideColumns.length; i++) {\n            if (minColumn.columnIndex === 0) {\n              break;\n            }\n            /**\n             * 先更新columnIndex\n             * 通过columnIndex拿到columnWidth\n             * 再更新minColumnValue以供下一个column使用\n             */\n            const column = outsideColumns[i];\n            column.columnIndex = minColumn.columnIndex - 1;\n            const columnWidth = getColumnWidth(column);\n            column.widthAnimated.setValue(columnWidth);\n            column.xAnimated.setValue(minColumn.x - columnWidth);\n            minColumn = column;\n          }\n        }\n      }\n\n      // 上移，在尾部增加\n      if (deltaY > 0) {\n        for (let i = 0; i < virtualRows.current.length; i++) {\n          const row = virtualRows.current[i];\n\n          /**\n           * 判断超出范围的依据是行的*下侧*小于0\n           */\n          const isOutOfView =\n            !row.freezed && row.y + nextY + row.height < freezedStartRows;\n          if (isOutOfView) {\n            outsideRows.push(row);\n          }\n        }\n\n        // console.log(outsideRows);\n        // console.log({ outsideRows, maxRowValue });\n        /**\n         * 所有column均已超出屏幕，此时根据finalMaxIndex重新计算\n         * 所有的column的位置\n         */\n        if (outsideRows.length === virtualRows.current.length) {\n          console.error(\"Warning: This shoud not happen\");\n        }\n\n        if (outsideRows.length > 0) {\n          for (let i = 0; i < outsideRows.length; i++) {\n            const row = outsideRows[i];\n            row.rowIndex = maxRow.rowIndex + 1;\n            row.yAnimated.setValue(maxRow.y + maxRow.height);\n            const rowHeight = getRowHeight(row);\n            row.heightAnimated.setValue(rowHeight);\n            maxRow = row;\n          }\n        }\n      }\n\n      // 下移，在头部增加\n      if (deltaY < 0) {\n        for (let i = 0; i < virtualRows.current.length; i++) {\n          const row = virtualRows.current[i];\n\n          /**\n           * 判断超出范围的依据是行的*上侧*大于容器高度\n           */\n          const isOutOfView = !row.freezed && row.y + nextY > containerHeight;\n          if (isOutOfView) {\n            outsideRows.unshift(row);\n          }\n        }\n        // console.log({ outsideRows, minRowValue });\n        if (outsideRows.length > 0) {\n          for (let i = 0; i < outsideRows.length; i++) {\n            if (minRow.rowIndex === 0) {\n              break;\n            }\n            const row = outsideRows[i];\n            row.rowIndex = minRow.rowIndex - 1;\n            const rowHeight = getRowHeight(row);\n            row.heightAnimated.setValue(rowHeight);\n            row.yAnimated.setValue(minRow.y - row.height);\n            minRow = row;\n          }\n        }\n      }\n\n      /**\n       * (5/5)\n       * 计算需要更新的cell，并调用update方法更新cell\n       */\n      for (let i = 0; i < virtualCells.current.length; i++) {\n        const cell = virtualCells.current[i];\n        if (!outsideCells.includes(cell)) {\n          if (outsideColumns.includes(cell.column)) {\n            outsideCells.push(cell);\n          } else if (outsideRows.includes(cell.row)) {\n            outsideCells.push(cell);\n          }\n        }\n      }\n\n      if (!shouldSplitAction) {\n        for (const cell of outsideCells) {\n          cell.ref.current.update({\n            rowIndex: cell.row.rowIndex,\n            columnIndex: cell.column.columnIndex,\n          });\n        }\n      }\n\n      // 继续未完成action\n      if (shouldSplitAction) {\n        if (__DEV__) {\n          console.log(\"splitAction\", splitAction);\n        }\n        requestAnimationFrame(() => {\n          updateCoordinate(splitAction);\n        });\n      }\n    },\n    [\n      getColumnWidth,\n      getRange,\n      columnCount,\n      rowCount,\n      getRowHeight,\n      freezedStartColumns,\n      freezedStartRows,\n    ]\n  );\n\n  const onWheel = useCallback(\n    (event) => {\n      const { deltaX, deltaY } = event;\n      updateCoordinate({ deltaX, deltaY });\n    },\n    [updateCoordinate]\n  );\n\n  useEffect(() => {\n    if (Platform.OS === \"web\") {\n      const el = view.current as any;\n\n      el.addEventListener(\"wheel\", onWheel);\n      return () => {\n        el.removeEventListener(\"wheel\", onWheel);\n      };\n    }\n  }, [onWheel]);\n\n  const panResponder = useMemo(() => {\n    let prevGestureState = null;\n    return PanResponder.create({\n      onPanResponderGrant: (event, gestureState) => {\n        prevGestureState = { ...gestureState };\n      },\n      onMoveShouldSetPanResponder: () => {\n        return true;\n      },\n      onPanResponderMove: (event, gestureState) => {\n        const deltaX = -gestureState.dx + prevGestureState.dx;\n        const deltaY = -gestureState.dy + prevGestureState.dy;\n        prevGestureState = { ...gestureState };\n        updateCoordinate({\n          deltaX,\n          deltaY,\n        });\n      },\n    });\n  }, [updateCoordinate]);\n\n  return (\n    <View\n      ref={view}\n      style={[style, { overflow: \"hidden\" }]}\n      onLayout={onContainerLayout}\n      {...panResponder.panHandlers}\n    >\n      {showColumnLine && (\n        <Fragment key={`columns-${layoutCount}`}>\n          {virtualColumns.current.map((column, index) => {\n            return (\n              <Animated.View\n                key={index}\n                style={{\n                  position: \"absolute\",\n                  width: 1,\n                  backgroundColor: \"#ccc\",\n                  transform: [\n                    {\n                      translateX: Animated.add(\n                        column.xAnimated,\n                        coordinate.current.x\n                      ),\n                    },\n                  ],\n                  height: containerSize.current.y,\n                }}\n              />\n            );\n          })}\n        </Fragment>\n      )}\n      {showRowLine && (\n        <Fragment key={`rows-${layoutCount}`}>\n          {virtualRows.current.map((row, index) => {\n            return (\n              <Animated.View\n                key={index}\n                style={{\n                  position: \"absolute\",\n                  backgroundColor: \"#ccc\",\n                  transform: [\n                    {\n                      translateY: Animated.add(\n                        row.yAnimated,\n                        coordinate.current.y\n                      ),\n                    },\n                  ],\n                  width: containerSize.current.x,\n                  height: 1,\n                }}\n              />\n            );\n          })}\n        </Fragment>\n      )}\n      <Fragment key={`cells-${layoutCount}`}>\n        {virtualCells.current.map((cell, index) => {\n          return (\n            <Cell\n              coordinate={coordinate.current}\n              ref={cell.ref}\n              key={index}\n              column={cell.column}\n              row={cell.row}\n              renderCell={renderCell}\n            />\n          );\n        })}\n      </Fragment>\n    </View>\n  );\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  Animated,\n  Platform,\n  SafeAreaView,\n  Text,\n  TouchableOpacity,\n  useWindowDimensions,\n  View,\n} from \"react-native\";\n\nimport { VirtualizedGrid } from \"./src/index\";\n\nexport default function App() {\n  const { width, height } = useWindowDimensions();\n  useLayoutEffect(() => {\n    if (Platform.OS === \"web\") {\n      document.body.style.overflow = \"hidden\";\n    }\n  }, []);\n  return (\n    <VirtualizedGrid\n      columnCount={Number.MAX_SAFE_INTEGER}\n      rowCount={Number.MAX_SAFE_INTEGER}\n      freezedColumns={{ start: 3 }}\n      freezedRows={{ start: 3 }}\n      style={[\n        {\n          borderWidth: 1,\n          borderColor: \"#000\",\n          width,\n          height,\n        },\n        Platform.select({\n          web: {\n            userSelect: \"none\",\n          },\n        }) as unknown,\n      ]}\n      getColumnWidth={(info: { columnIndex: number }) => {\n        return [100, 140, 200, 120][info.columnIndex % 4];\n      }}\n      getRowHeight={(info: { rowIndex: number }) => {\n        return [40, 50, 60, 90, 40, 45, 40, 50, 55, 50, 60][info.rowIndex % 10];\n      }}\n      renderCell={(info) => {\n        return (\n          <View\n            style={{\n              flex: 1,\n              backgroundColor:\n                (info.rowIndex + info.columnIndex) % 2 === 1 ? \"#eee\" : \"#fff\",\n              borderTopWidth: 1,\n              borderLeftWidth: 1,\n              borderColor: \"#ccc\",\n              padding: 4,\n            }}\n          >\n            <Text>c: {info.columnIndex}</Text>\n            <Text>r: {info.rowIndex}</Text>\n          </View>\n        );\n      }}\n    />\n  );\n}\n"],"sourceRoot":""}