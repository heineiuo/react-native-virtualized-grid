{"version":3,"sources":["docs/Header.tsx","src/Cell.tsx","src/VirtualizedGridContext.tsx","src/VirtualizedGridUtils.tsx","src/VirtualizedGrid.tsx","src/ColumnResizer.tsx","src/ColumnReorder.tsx","src/RowResizer.tsx","App.tsx"],"names":["Header","View","style","height","flexDirection","justifyContent","alignItems","paddingLeft","Text","fontWeight","fontSize","paddingRight","TouchableOpacity","marginRight","onPress","Linking","openURL","MaterialCommunityIcons","name","size","color","Cell","renderCell","column","row","Animated","position","width","widthAnimated","zIndex","add","zIndexAnimated","heightAnimated","transform","translateX","xAnimated","translateY","yAnimated","VirtualizedGridContext","createContext","useGrid","useContext","CoordinateObject","this","_x","_y","Value","rowIndex","columnIndex","left","top","val","setValue","ColumnObject","x","freezed","highlightOpacityAnimated","recycled","JSON","parse","stringify","RowObject","y","ref","createRef","VirtualizedGrid","columnCount","rowCount","onChangeColumn","onChangeRow","getColumnWidth","getRowHeight","showColumnLine","showRowLine","freezedColumns","freezedRows","onChangeColumnOrder","onChangeRowOrder","view","onChangeVisibleArea","useRef","freezedStartColumns","start","freezedStartRows","virtualColumns","virtualRows","useState","allFreezed","notFreezed","columnFreezed","rowFreezed","setCells","coordinate","containerSize","update","useCallback","current","right","bottom","currentColumnIndex","currentRowIndex","rows","columns","freezedIndex","freezedX","freezedColumnWidth","push","currentColumnWidth","freezedY","freezedRowHeight","currentRowHeight","cell","onContainerLayout","event","nativeEvent","layout","updateCoordinate","deltaX","deltaY","nextX","currentLeft","currentRight","nextY","currentTop","currentBottom","onWheel","useEffect","Platform","OS","el","addEventListener","removeEventListener","panResponder","useMemo","prevGestureState","PanResponder","create","onPanResponderGrant","gestureState","onMoveShouldSetPanResponder","onPanResponderMove","dx","dy","onPanResponderRelease","Provider","value","overflow","onLayout","panHandlers","key","data","map","ColumnResizer","rightColumns","onPanResponderTerminate","onPanResponderTerminationRequest","onPanResponderReject","setOffset","item","flattenOffset","Pressable","display","state","hovered","backgroundColor","ColumnReorder","children","startX","highlightColumn","startColumnIndex","locationX","itemCenterX","Math","abs","console","log","fromIndex","toIndex","RowResizer","bottomRows","App","useWindowDimensions","columnWidthCache","Map","rowHeightCache","updateColumn","set","updateRow","options","useLayoutEffect","document","body","Number","MAX_SAFE_INTEGER","borderColor","select","web","userSelect","info","has","get","round","random","flex","borderTopWidth","borderLeftWidth","padding","borderRightWidth","borderBottomWidth","opacity","pointerEvents"],"mappings":"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","file":"static/js/app.37d33e8d.chunk.js","sourcesContent":["import { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { TouchableOpacity, View, Linking, Text } from \"react-native\";\n\nexport function Header() {\n  return (\n    <View\n      style={{\n        height: 56,\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n      }}\n    >\n      <View style={{ paddingLeft: 20 }}>\n        <Text style={{ fontWeight: \"bold\", fontSize: 20 }}>\n          React Native Virtualized Grid\n        </Text>\n      </View>\n      <View\n        style={{ paddingRight: 20, flexDirection: \"row\", alignItems: \"center\" }}\n      >\n        <TouchableOpacity\n          style={{ marginRight: 12 }}\n          onPress={() => {\n            Linking.openURL(\"https://twitter.com/770hz\");\n          }}\n        >\n          <MaterialCommunityIcons name=\"twitter\" size={24} color=\"#1d9bf0\" />\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={() => {\n            Linking.openURL(\n              \"https://github.com/heineiuo/react-native-virtualized-grid\"\n            );\n          }}\n        >\n          <MaterialCommunityIcons name=\"github\" size={24} color=\"black\" />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n","import { Animated } from \"react-native\";\n\nimport { CellProps } from \"./VirtualizedGridTypes\";\n\nexport function Cell({ renderCell, column, row }: CellProps) {\n  return (\n    <Animated.View\n      style={{\n        position: \"absolute\",\n        width: column.widthAnimated,\n        zIndex: Animated.add(column.zIndexAnimated, row.zIndexAnimated),\n        height: row.heightAnimated,\n        transform: [\n          {\n            translateX: column.xAnimated,\n          },\n          {\n            translateY: row.yAnimated,\n          },\n        ],\n      }}\n    >\n      {renderCell({ column, row })}\n    </Animated.View>\n  );\n}\n","import { createContext, MutableRefObject, useContext } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellObject, ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport type VirtualizedGridState = {\n  virtualColumns: MutableRefObject<ColumnObject[]>;\n  virtualRows: MutableRefObject<RowObject[]>;\n  coordinate: MutableRefObject<{\n    x: number;\n    y: number;\n    xAnimated: Animated.Value;\n    yAnimated: Animated.Value;\n  }>;\n  containerSize: MutableRefObject<{ width: number; height: number }>;\n  updateCoordinate: (event: { deltaX: number; deltaY: number }) => void;\n  onChangeRow: (row: RowObject) => void;\n  onChangeRowOrder: (options: { fromIndex: number; toIndex: number }) => void;\n  onChangeColumn: (column: ColumnObject) => void;\n  onChangeColumnOrder: (options: {\n    fromIndex: number;\n    toIndex: number;\n  }) => void;\n};\n\nexport const VirtualizedGridContext = createContext({} as VirtualizedGridState);\nexport const useGrid = () => useContext(VirtualizedGridContext);\n","import { createRef, RefObject } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellMethods } from \"./VirtualizedGridTypes\";\n\nexport class CoordinateObject {\n  constructor() {\n    this._x = 0;\n    this._y = 0;\n    this.xAnimated = new Animated.Value(0);\n    this.yAnimated = new Animated.Value(0);\n    this.rowIndex = 0;\n    this.columnIndex = 0;\n    this.left = 0;\n    this.top = 0;\n  }\n\n  /**\n   * 左上角point的x方向的位移\n   */\n  _x: number;\n  set x(val) {\n    this._x = val;\n    this.xAnimated.setValue(val);\n  }\n  get x() {\n    return this._x;\n  }\n  /**\n   * 左上角point的y方向的位移\n   */\n  _y: number;\n  set y(val) {\n    this._y = val;\n    this.yAnimated.setValue(val);\n  }\n  get y() {\n    return this._y;\n  }\n  /**\n  /**\n   * 左上角point的x方向的位移的动画值\n   */\n  xAnimated: Animated.Value;\n  /**\n   * 左上角point的y方向的位移的动画值\n   */\n  yAnimated: Animated.Value;\n  /**\n   * 左上角cell的row（非freezed）\n   */\n  rowIndex: number;\n  /**\n   * 左上角cell的column（非freezed）\n   */\n  columnIndex: number;\n  /**\n   * 左上角cell相对于container的左上角point的x方向的位移\n   */\n  left: number;\n  /**\n   * 左上角cell相对于container的左上角point的的y方向的位移\n   */\n  top: number;\n}\n\nexport class ColumnObject {\n  constructor({\n    x,\n    width,\n    columnIndex,\n    freezed = false,\n  }: {\n    x: number;\n    width: number;\n    columnIndex: number;\n    freezed?: boolean;\n  }) {\n    this.xAnimated = new Animated.Value(x);\n    this.widthAnimated = new Animated.Value(width);\n    this.columnIndex = columnIndex;\n    this.freezed = freezed;\n    this.zIndexAnimated = new Animated.Value(freezed ? 1 : 0);\n    this.highlightOpacityAnimated = new Animated.Value(0);\n    this.recycled = false;\n  }\n\n  columnIndex: number;\n  freezed: boolean;\n  xAnimated: Animated.Value;\n  widthAnimated: Animated.Value;\n  zIndexAnimated: Animated.Value;\n  highlightOpacityAnimated: Animated.Value;\n  /**\n   * 是否已经被回收，已经被回收的不显示\n   */\n  recycled: boolean;\n\n  get x(): number {\n    return JSON.parse(JSON.stringify(this.xAnimated));\n  }\n  get width(): number {\n    return JSON.parse(JSON.stringify(this.widthAnimated));\n  }\n}\n\nexport class RowObject {\n  constructor({\n    y,\n    height,\n    rowIndex,\n    freezed = false,\n  }: {\n    y: number;\n    height: number;\n    rowIndex: number;\n    freezed?: boolean;\n  }) {\n    this.yAnimated = new Animated.Value(y);\n    this.heightAnimated = new Animated.Value(height);\n    this.rowIndex = rowIndex;\n    this.freezed = freezed;\n    this.zIndexAnimated = new Animated.Value(freezed ? 1 : 0);\n    this.highlightOpacityAnimated = new Animated.Value(0);\n    this.recycled = false;\n  }\n\n  rowIndex: number;\n  yAnimated: Animated.Value;\n  heightAnimated: Animated.Value;\n  freezed: boolean;\n  zIndexAnimated: Animated.Value;\n  highlightOpacityAnimated: Animated.Value;\n  /**\n   * 是否已经被回收，已经被回收的不显示\n   */\n  recycled: boolean;\n\n  get y(): number {\n    return JSON.parse(JSON.stringify(this.yAnimated));\n  }\n\n  get height(): number {\n    return JSON.parse(JSON.stringify(this.heightAnimated));\n  }\n}\n\nexport class CellObject {\n  constructor({ column, row }: { column: ColumnObject; row: RowObject }) {\n    this.column = column;\n    this.row = row;\n    this.ref = createRef();\n  }\n\n  ref: RefObject<CellMethods>;\n  column: ColumnObject;\n  row: RowObject;\n\n  get x() {\n    return this.column.x;\n  }\n\n  get y() {\n    return this.row.y;\n  }\n\n  get width() {\n    return this.column.width;\n  }\n  get height() {\n    return this.row.height;\n  }\n}\n\nexport function forEachColumns(\n  columns: ColumnObject[],\n  options: {\n    all?: boolean;\n    afterIndex?: number;\n    beforeIndex?: number;\n  },\n  callback: (item: ColumnObject) => void\n) {\n  for (const item of columns) {\n    if (options.all) {\n      callback(item);\n    } else if (typeof options.afterIndex === \"number\") {\n      if (item.columnIndex > options.afterIndex) {\n        callback(item);\n      }\n    } else if (typeof options.beforeIndex === \"number\") {\n      if (item.columnIndex < options.beforeIndex) {\n        callback(item);\n      }\n    }\n  }\n}\n\nexport const animationConfig = {\n  toValue: 1,\n  stiffness: 1000,\n  damping: 500,\n  useNativeDriver: true,\n};\n","import { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { Animated, Platform, View, PanResponder } from \"react-native\";\n\nimport { Cell } from \"./Cell\";\nimport { VirtualizedGridContext } from \"./VirtualizedGridContext\";\nimport { VirtualizedGridProps } from \"./VirtualizedGridTypes\";\nimport {\n  ColumnObject,\n  CoordinateObject,\n  RowObject,\n} from \"./VirtualizedGridUtils\";\n\nexport function VirtualizedGrid({\n  style,\n  columnCount,\n  rowCount,\n  renderCell,\n  onChangeColumn = (column: ColumnObject) => undefined,\n  onChangeRow = (row: RowObject) => undefined,\n  getColumnWidth = () => 100,\n  getRowHeight = () => 40,\n  showColumnLine = false,\n  showRowLine = false,\n  freezedColumns = {},\n  freezedRows = {},\n  onChangeColumnOrder = () => undefined,\n  onChangeRowOrder = () => undefined,\n  onChangeVisibleArea = () => undefined,\n}: VirtualizedGridProps) {\n  const view = useRef<View>(null);\n\n  const freezedStartColumns = freezedColumns.start ?? 0;\n  const freezedStartRows = freezedRows.start ?? 0;\n\n  const virtualColumns = useRef([]);\n  const virtualRows = useRef([]);\n\n  const [{ allFreezed, notFreezed, columnFreezed, rowFreezed }, setCells] =\n    useState({\n      allFreezed: [],\n      notFreezed: [],\n      columnFreezed: [],\n      rowFreezed: [],\n    });\n\n  /**\n   * 左上角的坐标\n   * 每次移动的时候，都需要重新更新每一个字段\n   */\n  const coordinate = useRef(new CoordinateObject());\n\n  /**\n   * 容器的width和height\n   */\n  const containerSize = useRef({ width: 0, height: 0 });\n\n  /**\n   * 更新\n   * 根据左上角point/cell，往右和往下推算出所有的column和row，\n   * 直到最右边的column/最下面的row超出可见区域\n   */\n  const update = useCallback(() => {\n    if (__DEV__) {\n      console.time(\"update\");\n    }\n    const { width, height } = containerSize.current;\n    const { rowIndex, columnIndex, left, top, x, y } = coordinate.current;\n    let right = left;\n    let bottom = top;\n    let currentColumnIndex = columnIndex;\n    let currentRowIndex = rowIndex;\n    const rows = [];\n    const columns = [];\n\n    if (\n      freezedStartColumns > 0 &&\n      currentColumnIndex > freezedStartColumns - 1\n    ) {\n      // 先填入固定列\n      let freezedIndex = 0;\n      let freezedX = 0;\n      while (freezedIndex < freezedStartColumns) {\n        const freezedColumnWidth = getColumnWidth({\n          columnIndex: freezedIndex,\n        });\n        columns.push(\n          new ColumnObject({\n            columnIndex: freezedIndex,\n            width: freezedColumnWidth,\n            x: freezedX,\n            freezed: true,\n          })\n        );\n        freezedIndex++;\n        freezedX += freezedColumnWidth;\n      }\n    }\n\n    while (true) {\n      const currentColumnWidth = getColumnWidth({\n        columnIndex: currentColumnIndex,\n      });\n\n      columns.push(\n        new ColumnObject({\n          columnIndex: currentColumnIndex,\n          width: currentColumnWidth,\n          x: right,\n          freezed: currentColumnIndex < freezedStartColumns,\n        })\n      );\n\n      right += currentColumnWidth;\n      currentColumnIndex++;\n\n      if (right > -x + width) {\n        // console.log(\"column到达边界，停止\");\n        break;\n      }\n    }\n\n    if (freezedStartRows > 0 && currentRowIndex > freezedStartRows - 1) {\n      // 先填入固定行\n      let freezedIndex = 0;\n      let freezedY = 0;\n      while (freezedIndex < freezedStartRows) {\n        const freezedRowHeight = getRowHeight({\n          rowIndex: freezedIndex,\n        });\n        rows.push(\n          new RowObject({\n            rowIndex: freezedIndex,\n            height: freezedRowHeight,\n            y: freezedY,\n            freezed: true,\n          })\n        );\n        freezedIndex++;\n        freezedY += freezedRowHeight;\n      }\n    }\n    while (true) {\n      const currentRowHeight = getRowHeight({\n        rowIndex: currentRowIndex,\n      });\n      rows.push(\n        new RowObject({\n          rowIndex: currentRowIndex,\n          height: currentRowHeight,\n          y: bottom,\n          freezed: currentRowIndex < freezedStartRows,\n        })\n      );\n\n      bottom += currentRowHeight;\n      currentRowIndex++;\n\n      if (bottom > -y + height) {\n        // console.log(\"row到达边界，停止\");\n        break;\n      }\n    }\n\n    virtualColumns.current = columns;\n    virtualRows.current = rows;\n\n    const allFreezed = [];\n    const notFreezed = [];\n    const columnFreezed = [];\n    const rowFreezed = [];\n\n    for (const column of columns) {\n      for (const row of rows) {\n        const cell = (\n          <Cell\n            key={`${column.columnIndex}/${row.rowIndex}`}\n            column={column}\n            row={row}\n            renderCell={renderCell}\n          />\n        );\n        if (column.freezed && row.freezed) {\n          allFreezed.push(cell);\n        } else if (column.freezed) {\n          columnFreezed.push(cell);\n        } else if (row.freezed) {\n          rowFreezed.push(cell);\n        } else {\n          notFreezed.push(cell);\n        }\n      }\n    }\n\n    if (__DEV__) {\n      console.timeEnd(\"update\");\n      console.log(\n        \"count\",\n        columns.length,\n        rows.length,\n        columns.length * rows.length\n      );\n      console.time(\"setCells\");\n    }\n\n    setCells({\n      allFreezed,\n      notFreezed,\n      columnFreezed,\n      rowFreezed,\n    });\n    if (__DEV__) {\n      console.timeEnd(\"setCells\");\n    }\n  }, [\n    getColumnWidth,\n    getRowHeight,\n    renderCell,\n    freezedStartColumns,\n    freezedStartRows,\n  ]);\n\n  /**\n   * 容器体积变化不会造成回收，只会增加，所以更新完容器体积后直接update\n   */\n  const onContainerLayout = useCallback(\n    (event) => {\n      const { width, height } = event.nativeEvent.layout;\n      containerSize.current.width = width;\n      containerSize.current.height = height;\n      update();\n    },\n    [update]\n  );\n\n  /**\n   * deltaX > 0 左滑，把右边的显示出来\n   * deltaX < 0 右移，把左边的显示出来\n   * deltaY > 0 上移，把下面的显示出来\n   * deltaY < 0 下移，把上面的显示出来\n   */\n  const updateCoordinate = useCallback(\n    (event: { deltaX: number; deltaY: number }) => {\n      // console.log(event);\n      if (__DEV__) {\n        console.time(\"updateCoordinate\");\n      }\n      const { deltaX, deltaY } = event;\n      const { columnIndex, rowIndex, left, top } = coordinate.current;\n      let nextX = coordinate.current.x - deltaX;\n      if (nextX > 0) {\n        nextX = 0;\n        coordinate.current.x = 0;\n        coordinate.current.columnIndex = 0;\n        coordinate.current.left = 0;\n      } else {\n        /**\n         * 更新x\n         */\n        coordinate.current.x = nextX;\n        /**\n         * 检查左上角cell是否还在可见区域内，不在的话需要更新\n         */\n        let currentColumnIndex = columnIndex;\n        let currentLeft = left;\n        let currentRight = left;\n        if (deltaX > 0) {\n          // 左滑，把右边的显示出来\n          while (true) {\n            const currentWidth = getColumnWidth({\n              columnIndex: currentColumnIndex,\n            });\n            currentLeft = currentRight;\n            currentRight += currentWidth;\n            if (currentRight >= -nextX) {\n              break;\n            }\n            currentColumnIndex++;\n          }\n          coordinate.current.columnIndex = currentColumnIndex;\n          coordinate.current.left = currentLeft;\n        } else {\n          // deltaX < 0，把左边的显示出来\n          while (true) {\n            if (currentLeft <= -nextX) {\n              break;\n            }\n            currentColumnIndex--;\n\n            const currentWidth = getColumnWidth({\n              columnIndex: currentColumnIndex,\n            });\n            currentLeft -= currentWidth;\n          }\n          coordinate.current.columnIndex = currentColumnIndex;\n          coordinate.current.left = currentLeft;\n        }\n      }\n      let nextY = coordinate.current.y - deltaY;\n      if (nextY > 0) {\n        nextY = 0;\n        coordinate.current.y = 0;\n        coordinate.current.top = 0;\n        coordinate.current.rowIndex = 0;\n      } else {\n        /**\n         * 更新y\n         */\n        coordinate.current.y = nextY;\n\n        /**\n         * 检查左上角cell是否还在可见区域内，不在的话需要更新\n         */\n        let currentRowIndex = rowIndex;\n        let currentTop = top;\n        let currentBottom = top;\n        if (deltaY > 0) {\n          // deltaY > 0 上移，把下面的显示出来\n          while (true) {\n            const size = getRowHeight({\n              rowIndex: currentRowIndex,\n            });\n            currentTop = currentBottom;\n            currentBottom += size;\n            if (currentBottom >= -nextY) {\n              break;\n            }\n            currentRowIndex++;\n          }\n          coordinate.current.rowIndex = currentRowIndex;\n          coordinate.current.top = currentTop;\n        } else {\n          // deltaY < 0 下移，把上面的显示出来\n          while (true) {\n            if (currentTop <= -nextY) {\n              break;\n            }\n            currentRowIndex--;\n\n            const size = getRowHeight({\n              rowIndex: currentRowIndex,\n            });\n            currentTop -= size;\n          }\n          coordinate.current.rowIndex = currentRowIndex;\n          coordinate.current.top = currentTop;\n        }\n      }\n\n      if (__DEV__) {\n        console.log(coordinate.current);\n        console.timeEnd(\"updateCoordinate\");\n      }\n      update();\n    },\n    [update, getColumnWidth, getRowHeight]\n  );\n\n  const onWheel = useCallback(\n    (event) => {\n      const { deltaX, deltaY } = event;\n      updateCoordinate({\n        deltaX,\n        deltaY,\n      });\n    },\n    [updateCoordinate]\n  );\n\n  useEffect(() => {\n    if (Platform.OS === \"web\") {\n      const el = view.current as any;\n\n      el.addEventListener(\"wheel\", onWheel);\n      return () => {\n        el.removeEventListener(\"wheel\", onWheel);\n      };\n    }\n  }, [onWheel]);\n\n  const panResponder = useMemo(() => {\n    let prevGestureState = null;\n    return PanResponder.create({\n      onPanResponderGrant: (event, gestureState) => {\n        prevGestureState = { ...gestureState };\n      },\n      onMoveShouldSetPanResponder: () => {\n        return true;\n      },\n      onPanResponderMove: (event, gestureState) => {\n        if (!prevGestureState) {\n          prevGestureState = { ...gestureState };\n          return;\n        }\n        const deltaX = -gestureState.dx + prevGestureState.dx;\n        const deltaY = -gestureState.dy + prevGestureState.dy;\n        prevGestureState = { ...gestureState };\n        updateCoordinate({\n          deltaX,\n          deltaY,\n        });\n      },\n      onPanResponderRelease: () => {\n        prevGestureState = null;\n      },\n    });\n  }, [updateCoordinate]);\n\n  return (\n    <VirtualizedGridContext.Provider\n      value={{\n        virtualColumns,\n        virtualRows,\n        onChangeColumn,\n        onChangeRow,\n        coordinate,\n        containerSize,\n        updateCoordinate,\n        onChangeColumnOrder,\n        onChangeRowOrder,\n      }}\n    >\n      <View\n        ref={view}\n        style={[{ overflow: \"hidden\" }, style]}\n        onLayout={onContainerLayout}\n        {...panResponder.panHandlers}\n      >\n        {[\n          { key: \"notFreezed\", data: notFreezed, x: true, y: true },\n          { key: \"columnFreezed\", data: columnFreezed, y: true },\n          { key: \"rowFreezed\", data: rowFreezed, x: true },\n          { key: \"allFreezed\", data: allFreezed },\n        ].map(({ key, data, x = false, y = false }) => {\n          return (\n            <Animated.View\n              key={key}\n              style={{\n                transform: [\n                  {\n                    translateX: x ? coordinate.current.xAnimated : 0,\n                  },\n                  {\n                    translateY: y ? coordinate.current.yAnimated : 0,\n                  },\n                ],\n              }}\n            >\n              {data}\n            </Animated.View>\n          );\n        })}\n      </View>\n    </VirtualizedGridContext.Provider>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Pressable, Animated, PanResponder } from \"react-native\";\n\nimport { useGrid } from \"./VirtualizedGridContext\";\nimport { ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport function ColumnResizer({\n  column,\n  row,\n}: {\n  column: ColumnObject;\n  row: RowObject;\n}) {\n  const { virtualColumns, onChangeColumn } = useGrid();\n\n  const panResponder = useMemo(() => {\n    let rightColumns = [];\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminate\");\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminationRequest\");\n        return false;\n      },\n      onPanResponderReject: () => {\n        __DEV__ && console.log(\"[resizer] onPanResponderReject\");\n      },\n\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onMoveShouldSetPanResponder\");\n        return true;\n      },\n\n      onPanResponderGrant: () => {\n        __DEV__ && console.log(\"[resizer] grant\");\n        column.widthAnimated.setOffset(column.width);\n        rightColumns = [];\n        for (const item of virtualColumns.current) {\n          if (item.columnIndex > column.columnIndex) {\n            rightColumns.push(item);\n            item.xAnimated.setOffset(item.x);\n          }\n        }\n      },\n\n      onPanResponderMove: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] move\");\n        for (const item of rightColumns) {\n          item.xAnimated.setValue(gestureState.dx);\n        }\n        column.widthAnimated.setValue(gestureState.dx);\n        onChangeColumn(column);\n      },\n\n      onPanResponderRelease: () => {\n        __DEV__ && console.log(\"[resizer] release\");\n        column.widthAnimated.flattenOffset();\n        for (const item of rightColumns) {\n          item.xAnimated.flattenOffset();\n        }\n        rightColumns = [];\n      },\n    });\n  }, [column, virtualColumns, onChangeColumn]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n          zIndex: 10,\n          height: row.height,\n          width: 20,\n        },\n      ]}\n    >\n      <Pressable\n        style={[\n          {\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            height: row.height,\n          },\n        ]}\n      >\n        {(state) => {\n          const hovered = (state as unknown as any).hovered;\n          return (\n            <Animated.View\n              style={[\n                {\n                  height: row.heightAnimated,\n                  width: 0,\n                },\n                hovered && {\n                  width: 5,\n                  backgroundColor: \"blue\",\n                },\n              ]}\n            />\n          );\n        }}\n      </Pressable>\n    </Animated.View>\n  );\n}\n","import React, { ReactNode, useMemo } from \"react\";\nimport { Animated, PanResponder } from \"react-native\";\n\nimport { useGrid } from \"./VirtualizedGridContext\";\nimport { ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport function ColumnReorder({\n  column,\n  row,\n  children,\n}: {\n  column: ColumnObject;\n  row: RowObject;\n  children?: ReactNode;\n}) {\n  const { virtualColumns, onChangeColumnOrder } = useGrid();\n\n  const panResponder = useMemo(() => {\n    let startX = 0;\n    let highlightColumn: ColumnObject | null = null;\n    let startColumnIndex = 0;\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        __DEV__ && console.log(\"[reorder] onPanResponderTerminate\");\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        __DEV__ && console.log(\"[reorder] onPanResponderTerminationRequest\");\n        return false;\n      },\n      onPanResponderReject: () => {\n        __DEV__ && console.log(\"[reorder] onPanResponderReject\");\n      },\n\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        __DEV__ && console.log(\"[reorder] onMoveShouldSetPanResponder\");\n        return true;\n      },\n\n      onPanResponderGrant: (event) => {\n        __DEV__ && console.log(\"[reorder] grant\");\n        startX = column.x + event.nativeEvent.locationX;\n        startColumnIndex = column.columnIndex;\n      },\n\n      onPanResponderMove: (event, gestureState) => {\n        __DEV__ && console.log(\"[reorder] move\", gestureState.dx);\n        for (const item of virtualColumns.current) {\n          const itemCenterX = item.x + item.width / 2;\n          if (\n            Math.abs(itemCenterX - startX - gestureState.dx) <\n            item.width / 2\n          ) {\n            console.log(\"highlightcolumn\", item.columnIndex);\n            if (highlightColumn === item) {\n              break;\n            }\n            if (highlightColumn) {\n              highlightColumn.highlightOpacityAnimated.setValue(0);\n            }\n            highlightColumn = item;\n            highlightColumn.highlightOpacityAnimated.setValue(1);\n            break;\n          }\n        }\n      },\n\n      onPanResponderRelease: () => {\n        __DEV__ && console.log(\"[reorder] release\");\n        if (highlightColumn) {\n          highlightColumn.highlightOpacityAnimated.setValue(0);\n          if (startColumnIndex !== highlightColumn.columnIndex) {\n            onChangeColumnOrder({\n              fromIndex: startColumnIndex,\n              toIndex: highlightColumn.columnIndex,\n            });\n          }\n        }\n      },\n    });\n  }, [column, onChangeColumnOrder, virtualColumns]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          zIndex: 8,\n          top: 0,\n          left: 0,\n          height: row.height,\n          width: column.width,\n        },\n      ]}\n    >\n      {children}\n    </Animated.View>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Pressable, Animated, PanResponder } from \"react-native\";\n\nimport { useGrid } from \"./VirtualizedGridContext\";\nimport { ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport function RowResizer({\n  column,\n  row,\n}: {\n  column: ColumnObject;\n  row: RowObject;\n}) {\n  const { virtualRows, onChangeRow } = useGrid();\n\n  const panResponder = useMemo(() => {\n    let bottomRows = [];\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminate\");\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminationRequest\");\n        return false;\n      },\n      onPanResponderReject: () => {\n        __DEV__ && console.log(\"[resizer] onPanResponderReject\");\n      },\n\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onMoveShouldSetPanResponder\");\n        return true;\n      },\n\n      onPanResponderGrant: () => {\n        __DEV__ && console.log(\"[resizer] grant\");\n        row.heightAnimated.setOffset(row.height);\n        bottomRows = [];\n        for (const item of virtualRows.current) {\n          if (item.rowIndex > row.rowIndex) {\n            bottomRows.push(item);\n            item.yAnimated.setOffset(item.y);\n          }\n        }\n      },\n\n      onPanResponderMove: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] move\");\n        for (const item of bottomRows) {\n          item.yAnimated.setValue(gestureState.dy);\n        }\n        row.heightAnimated.setValue(gestureState.dy);\n        onChangeRow(row);\n      },\n\n      onPanResponderRelease: () => {\n        __DEV__ && console.log(\"[resizer] release\");\n        row.heightAnimated.flattenOffset();\n        for (const item of bottomRows) {\n          item.yAnimated.flattenOffset();\n        }\n        bottomRows = [];\n      },\n    });\n  }, [row, virtualRows, onChangeRow]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          bottom: 0,\n          left: 0,\n          zIndex: 10,\n          height: 20,\n          width: column.width,\n        },\n      ]}\n    >\n      <Pressable\n        style={[\n          {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            width: column.width,\n            height: 20,\n          },\n        ]}\n      >\n        {(state) => {\n          const hovered = (state as unknown as any).hovered;\n          return (\n            <Animated.View\n              style={[\n                {\n                  width: column.widthAnimated,\n                  height: 0,\n                },\n                hovered && {\n                  height: 5,\n                  backgroundColor: \"blue\",\n                },\n              ]}\n            />\n          );\n        }}\n      </Pressable>\n    </Animated.View>\n  );\n}\n","import React, { useCallback, useLayoutEffect, useRef, useState } from \"react\";\nimport {\n  ActivityIndicator,\n  Animated,\n  Platform,\n  Text,\n  useWindowDimensions,\n  View,\n} from \"react-native\";\n\nimport { AutoHideActivityIndicator } from \"./docs/AutoHideActivityIndicator\";\nimport { Header } from \"./docs/Header\";\nimport {\n  VirtualizedGrid,\n  ColumnResizer,\n  ColumnObject,\n  RowObject,\n  RowResizer,\n  ColumnReorder,\n} from \"./src/index\";\n\nexport default function App() {\n  const { width, height } = useWindowDimensions();\n  const columnWidthCache = useRef(new Map<string, number>());\n  const rowHeightCache = useRef(new Map<string, number>());\n\n  const updateColumn = useCallback((column: ColumnObject) => {\n    columnWidthCache.current.set(`${column.columnIndex}`, column.width);\n  }, []);\n  const updateRow = useCallback((row: RowObject) => {\n    rowHeightCache.current.set(`${row.rowIndex}`, row.height);\n  }, []);\n\n  const onChangeColumnOrder = useCallback(\n    (options: { fromIndex: number; toIndex: number }) => {\n      console.log(options);\n    },\n    []\n  );\n\n  useLayoutEffect(() => {\n    if (Platform.OS === \"web\") {\n      document.body.style.overflow = \"hidden\";\n    }\n  }, []);\n  return (\n    <>\n      <Header />\n\n      <VirtualizedGrid\n        columnCount={Number.MAX_SAFE_INTEGER}\n        rowCount={Number.MAX_SAFE_INTEGER}\n        freezedColumns={{ start: 1 }}\n        freezedRows={{ start: 1 }}\n        style={[\n          {\n            // borderWidth: 1,\n            borderColor: \"#fff\",\n            width,\n            height: height - 56,\n          },\n          Platform.select({\n            web: {\n              userSelect: \"none\",\n            },\n          }) as unknown,\n        ]}\n        getColumnWidth={(info: { columnIndex: number }) => {\n          if (columnWidthCache.current.has(`${info.columnIndex}`)) {\n            return columnWidthCache.current.get(`${info.columnIndex}`);\n          }\n          const random = Math.round(Math.random() * 100);\n          return [50, 140, 200, 120][info.columnIndex % 4];\n        }}\n        getRowHeight={(info: { rowIndex: number }) => {\n          if (rowHeightCache.current.has(`${info.rowIndex}`)) {\n            return rowHeightCache.current.get(`${info.rowIndex}`);\n          }\n          const random = Math.round(Math.random() * 100);\n\n          return [40, 50, 60, 90, 40, 45, 40, 50, 55, 50][info.rowIndex % 10];\n        }}\n        onChangeColumn={updateColumn}\n        onChangeColumnOrder={onChangeColumnOrder}\n        onChangeRow={updateRow}\n        onChangeVisibleArea={(event) => {\n          console.log(\"onChangeVisibleArea\", event);\n        }}\n        renderCell={({ column, row }) => {\n          return (\n            <View\n              style={{\n                flex: 1,\n                backgroundColor:\n                  row.rowIndex % 2 === 1 ? \"rgb(246, 248, 250)\" : \"#fff\",\n                borderTopWidth: 1,\n                borderLeftWidth: 1,\n                borderColor: \"rgb(216, 222, 228)\",\n                padding: 4,\n                borderRightWidth: column.columnIndex === 0 ? 1 : 0,\n                borderBottomWidth: row.rowIndex === 0 ? 1 : 0,\n              }}\n            >\n              {column.columnIndex === 0 && row.rowIndex === 0 && null}\n              {row.rowIndex === 0 && column.columnIndex > 0 && (\n                <>\n                  <ColumnReorder row={row} column={column}>\n                    <>\n                      <Text>c: {column.columnIndex}</Text>\n                      <Text>r: {row.rowIndex}</Text>\n                    </>\n                  </ColumnReorder>\n                  <ColumnResizer row={row} column={column} />\n                </>\n              )}\n              {column.columnIndex === 0 && row.rowIndex > 0 && (\n                <>\n                  <>\n                    <Text>c: {column.columnIndex}</Text>\n                    <Text>r: {row.rowIndex}</Text>\n                  </>\n                  <RowResizer row={row} column={column} />\n                </>\n              )}\n              {column.columnIndex > 0 && row.rowIndex > 0 && (\n                <>\n                  {/* <AutoHideActivityIndicator\n                    key={`${columnIndex}/${rowIndex}`}\n                  /> */}\n                  <Text>c: {column.columnIndex}</Text>\n                  <Text>r: {row.rowIndex}</Text>\n                </>\n              )}\n              <Animated.View\n                style={[\n                  {\n                    position: \"absolute\",\n                    left: 0,\n                    top: -1,\n                    bottom: -1,\n                    width: 2,\n                    backgroundColor: \"blue\",\n                    opacity: column.highlightOpacityAnimated,\n                  },\n                  Platform.select({\n                    web: {\n                      pointerEvents: \"none\",\n                    } as unknown as any,\n                  }),\n                ]}\n              />\n            </View>\n          );\n        }}\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}