{"version":3,"sources":["docs/Header.tsx","src/Cell.tsx","src/VirtualizedGridContext.tsx","src/VirtualizedGridUtils.tsx","src/VirtualizedGrid.tsx","src/ColumnResizer.tsx","src/ColumnReorder.tsx","src/RowResizer.tsx","App.tsx"],"names":["Header","View","style","height","flexDirection","justifyContent","alignItems","paddingLeft","Text","fontWeight","fontSize","paddingRight","TouchableOpacity","marginRight","onPress","Linking","openURL","MaterialCommunityIcons","name","size","color","Cell","forwardRef","ref","renderCell","column","row","coordinate","useState","rowIndex","columnIndex","data","setData","useImperativeHandle","update","Animated","position","width","widthAnimated","zIndex","add","zIndexAnimated","heightAnimated","transform","translateX","freezed","xAnimated","x","translateY","yAnimated","y","VirtualizedGridContext","createContext","useGrid","useContext","move","event","nextX","Math","min","max","minX","deltaX","nextY","minY","deltaY","setValue","this","Value","containerWidthAnimated","containerHeightAnimated","contentWidthAnimated","contentHeightAnimated","minXAnimated","subtract","minYAnimated","JSON","parse","stringify","ColumnObject","highlightOpacityAnimated","RowObject","CellObject","createRef","VirtualizedGrid","columnCount","rowCount","onChangeColumn","onChangeRow","getColumnWidth","getRowHeight","showColumnLine","showRowLine","freezedColumns","freezedRows","onChangeColumnOrder","onChangeRowOrder","view","useRef","layoutCount","setLayoutCount","virtualColumns","virtualRows","virtualCells","freezedStartColumns","start","freezedStartRows","end","ValueXY","containerSize","getRange","useCallback","minColumn","current","maxColumn","minRow","maxRow","freezedStartColumnWidth","freezedStartRowHeight","i","length","onContainerLayout","currentWidth","currentHeight","nativeEvent","layout","virtualColumnsTotalWidth","virtualRowsTotalHeight","rowHeight","push","prev","columnWidth","extraRows","prevRow","extraColumns","prevColumn","j","onContainerLayoutDebounced","useMemo","timer","clearTimeout","setTimeout","updateCoordinate","containerWidth","containerHeight","shouldSplitAction","splitAction","finalMaxColumnIndex","finalMinColumnIndex","finalMaxRowIndex","finalMinRowIndex","deltaX0","deltaY0","outsideColumns","outsideRows","outsideCells","console","error","__DEV__","unshift","cell","includes","requestAnimationFrame","onWheel","useEffect","Platform","OS","el","addEventListener","removeEventListener","panResponder","prevGestureState","PanResponder","create","onPanResponderGrant","gestureState","onMoveShouldSetPanResponder","onPanResponderMove","dx","dy","Provider","value","overflow","onLayout","panHandlers","map","index","backgroundColor","ColumnResizer","rightColumns","onPanResponderTerminate","onPanResponderTerminationRequest","onPanResponderReject","setOffset","item","onPanResponderRelease","flattenOffset","top","right","Pressable","display","state","hovered","ColumnReorder","children","startX","highlightColumn","startColumnIndex","locationX","itemCenterX","abs","log","fromIndex","toIndex","left","RowResizer","bottomRows","bottom","App","useWindowDimensions","columnWidthCache","Map","rowHeightCache","updateColumn","set","updateRow","options","useLayoutEffect","document","body","Number","MAX_SAFE_INTEGER","borderColor","select","web","userSelect","info","has","get","flex","borderTopWidth","borderLeftWidth","padding","borderRightWidth","borderBottomWidth","opacity","pointerEvents"],"mappings":"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","file":"static/js/app.b42a1cc1.chunk.js","sourcesContent":["import { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { TouchableOpacity, View, Linking, Text } from \"react-native\";\n\nexport function Header() {\n  return (\n    <View\n      style={{\n        height: 56,\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n      }}\n    >\n      <View style={{ paddingLeft: 20 }}>\n        <Text style={{ fontWeight: \"bold\", fontSize: 20 }}>\n          React Native Virtualized Grid\n        </Text>\n      </View>\n      <View\n        style={{ paddingRight: 20, flexDirection: \"row\", alignItems: \"center\" }}\n      >\n        <TouchableOpacity\n          style={{ marginRight: 12 }}\n          onPress={() => {\n            Linking.openURL(\"https://twitter.com/770hz\");\n          }}\n        >\n          <MaterialCommunityIcons name=\"twitter\" size={24} color=\"#1d9bf0\" />\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={() => {\n            Linking.openURL(\n              \"https://github.com/heineiuo/react-native-virtualized-grid\"\n            );\n          }}\n        >\n          <MaterialCommunityIcons name=\"github\" size={24} color=\"black\" />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n","import { forwardRef, ReactNode, useImperativeHandle, useState } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellMethods } from \"./VirtualizedGridTypes\";\nimport { ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport const Cell = forwardRef<\n  CellMethods,\n  {\n    coordinate: Animated.AnimatedValueXY;\n    column: ColumnObject;\n    row: RowObject;\n    renderCell: (info: {\n      columnIndex: number;\n      rowIndex: number;\n      column: ColumnObject;\n      row: RowObject;\n    }) => ReactNode;\n  }\n>(({ renderCell, column, row, coordinate }, ref) => {\n  const [data, setData] = useState({\n    rowIndex: row.rowIndex,\n    columnIndex: column.columnIndex,\n  });\n\n  useImperativeHandle(\n    ref,\n    () => {\n      return {\n        update: (data) => {\n          setData(data);\n        },\n      } as CellMethods;\n    },\n    []\n  );\n\n  return (\n    <Animated.View\n      style={{\n        position: \"absolute\",\n        width: column.widthAnimated,\n        zIndex: Animated.add(column.zIndexAnimated, row.zIndexAnimated),\n        height: row.heightAnimated,\n        transform: [\n          {\n            translateX: column.freezed\n              ? column.xAnimated\n              : Animated.add(column.xAnimated, coordinate.x),\n          },\n          {\n            translateY: row.freezed\n              ? row.yAnimated\n              : Animated.add(row.yAnimated, coordinate.y),\n          },\n        ],\n      }}\n    >\n      {renderCell({ ...data, column, row })}\n    </Animated.View>\n  );\n});\n","import { createContext, MutableRefObject, useContext } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellObject, ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport type VirtualizedGridState = {\n  virtualColumns: MutableRefObject<ColumnObject[]>;\n  virtualCells: MutableRefObject<CellObject[]>;\n  virtualRows: MutableRefObject<RowObject[]>;\n  coordinate: MutableRefObject<Animated.ValueXY>;\n  containerSize: MutableRefObject<Animated.ValueXY>;\n  updateCoordinate: (event: { deltaX: number; deltaY: number }) => void;\n  onChangeRow: (row: RowObject) => void;\n  onChangeRowOrder: (options: { fromIndex: number; toIndex: number }) => void;\n  onChangeColumn: (column: ColumnObject) => void;\n  onChangeColumnOrder: (options: {\n    fromIndex: number;\n    toIndex: number;\n  }) => void;\n};\n\nexport const VirtualizedGridContext = createContext({} as VirtualizedGridState);\nexport const useGrid = () => useContext(VirtualizedGridContext);\n","import { createRef, RefObject } from \"react\";\nimport { Animated } from \"react-native\";\n\nimport { CellMethods } from \"./VirtualizedGridTypes\";\n\nexport class CoordinateObject {\n  constructor() {\n    this.xAnimated = new Animated.Value(0);\n    this.yAnimated = new Animated.Value(0);\n    this.containerWidthAnimated = new Animated.Value(0);\n    this.containerHeightAnimated = new Animated.Value(0);\n    this.contentWidthAnimated = new Animated.Value(0);\n    this.contentHeightAnimated = new Animated.Value(0);\n    this.minXAnimated = Animated.subtract(\n      this.containerWidthAnimated,\n      this.contentWidthAnimated\n    );\n    this.minYAnimated = Animated.subtract(\n      this.containerWidthAnimated,\n      this.contentWidthAnimated\n    );\n  }\n\n  xAnimated: Animated.Value;\n  yAnimated: Animated.Value;\n  minXAnimated: Animated.AnimatedSubtraction;\n  minYAnimated: Animated.AnimatedSubtraction;\n  containerWidthAnimated: Animated.Value;\n  containerHeightAnimated: Animated.Value;\n  contentWidthAnimated: Animated.Value;\n  contentHeightAnimated: Animated.Value;\n\n  move = (event: WheelEvent) => {\n    const nextX = Math.min(0, Math.max(this.minX, this.x - event.deltaX));\n    const nextY = Math.min(0, Math.max(this.minY, this.y - event.deltaY));\n\n    this.xAnimated.setValue(nextX);\n    this.yAnimated.setValue(nextY);\n  };\n\n  get minX(): number {\n    return JSON.parse(JSON.stringify(this.minXAnimated));\n  }\n  get minY(): number {\n    return JSON.parse(JSON.stringify(this.minYAnimated));\n  }\n\n  get x(): number {\n    return JSON.parse(JSON.stringify(this.xAnimated));\n  }\n  get y(): number {\n    return JSON.parse(JSON.stringify(this.yAnimated));\n  }\n  get contentWidth(): number {\n    return JSON.parse(JSON.stringify(this.contentWidthAnimated));\n  }\n  get contentHeight(): number {\n    return JSON.parse(JSON.stringify(this.contentHeightAnimated));\n  }\n  get containerWidth(): number {\n    return JSON.parse(JSON.stringify(this.containerWidthAnimated));\n  }\n  get containerHeight(): number {\n    return JSON.parse(JSON.stringify(this.containerHeightAnimated));\n  }\n}\n\nexport class ColumnObject {\n  constructor({\n    x,\n    width,\n    columnIndex,\n    freezed = false,\n  }: {\n    x: number;\n    width: number;\n    columnIndex: number;\n    freezed?: boolean;\n  }) {\n    this.xAnimated = new Animated.Value(x);\n    this.widthAnimated = new Animated.Value(width);\n    this.columnIndex = columnIndex;\n    this.freezed = freezed;\n    this.zIndexAnimated = new Animated.Value(freezed ? 1 : 0);\n    this.highlightOpacityAnimated = new Animated.Value(0);\n  }\n\n  columnIndex: number;\n  freezed: boolean;\n  xAnimated: Animated.Value;\n  widthAnimated: Animated.Value;\n  zIndexAnimated: Animated.Value;\n  highlightOpacityAnimated: Animated.Value;\n\n  get x(): number {\n    return JSON.parse(JSON.stringify(this.xAnimated));\n  }\n  get width(): number {\n    return JSON.parse(JSON.stringify(this.widthAnimated));\n  }\n}\n\nexport class RowObject {\n  constructor({\n    y,\n    height,\n    rowIndex,\n    freezed = false,\n  }: {\n    y: number;\n    height: number;\n    rowIndex: number;\n    freezed?: boolean;\n  }) {\n    this.yAnimated = new Animated.Value(y);\n    this.heightAnimated = new Animated.Value(height);\n    this.rowIndex = rowIndex;\n    this.freezed = freezed;\n    this.zIndexAnimated = new Animated.Value(freezed ? 1 : 0);\n    this.highlightOpacityAnimated = new Animated.Value(0);\n  }\n\n  rowIndex: number;\n  yAnimated: Animated.Value;\n  heightAnimated: Animated.Value;\n  freezed: boolean;\n  zIndexAnimated: Animated.Value;\n  highlightOpacityAnimated: Animated.Value;\n\n  get y(): number {\n    return JSON.parse(JSON.stringify(this.yAnimated));\n  }\n\n  get height(): number {\n    return JSON.parse(JSON.stringify(this.heightAnimated));\n  }\n}\n\nexport class CellObject {\n  constructor({ column, row }: { column: ColumnObject; row: RowObject }) {\n    this.column = column;\n    this.row = row;\n    this.ref = createRef();\n  }\n\n  ref: RefObject<CellMethods>;\n  column: ColumnObject;\n  row: RowObject;\n\n  get x() {\n    return this.column.x;\n  }\n\n  get y() {\n    return this.row.y;\n  }\n\n  get width() {\n    return this.column.width;\n  }\n  get height() {\n    return this.row.height;\n  }\n}\n\nexport function forEachColumns(\n  columns: ColumnObject[],\n  options: {\n    all?: boolean;\n    afterIndex?: number;\n    beforeIndex?: number;\n  },\n  callback: (item: ColumnObject) => void\n) {\n  for (const item of columns) {\n    if (options.all) {\n      callback(item);\n    } else if (typeof options.afterIndex === \"number\") {\n      if (item.columnIndex > options.afterIndex) {\n        callback(item);\n      }\n    } else if (typeof options.beforeIndex === \"number\") {\n      if (item.columnIndex < options.beforeIndex) {\n        callback(item);\n      }\n    }\n  }\n}\n\nexport const animationConfig = {\n  toValue: 1,\n  stiffness: 1000,\n  damping: 500,\n  useNativeDriver: true,\n};\n","import {\n  Fragment,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  Animated,\n  Platform,\n  View,\n  PanResponder,\n  LayoutChangeEvent,\n} from \"react-native\";\n\nimport { Cell } from \"./Cell\";\nimport { VirtualizedGridContext } from \"./VirtualizedGridContext\";\nimport { VirtualizedGridProps } from \"./VirtualizedGridTypes\";\nimport { CellObject, ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport function VirtualizedGrid({\n  style,\n  columnCount,\n  rowCount,\n  renderCell,\n  onChangeColumn = (column: ColumnObject) => undefined,\n  onChangeRow = (row: RowObject) => undefined,\n  getColumnWidth = () => 100,\n  getRowHeight = () => 40,\n  showColumnLine = false,\n  showRowLine = false,\n  freezedColumns = {},\n  freezedRows = {},\n  onChangeColumnOrder = () => undefined,\n  onChangeRowOrder = () => undefined,\n}: VirtualizedGridProps) {\n  const view = useRef<View>(null);\n  const [layoutCount, setLayoutCount] = useState(0);\n  const virtualColumns = useRef<ColumnObject[]>([]);\n  const virtualRows = useRef<RowObject[]>([]);\n  const virtualCells = useRef<CellObject[]>([]);\n\n  const freezedStartColumns = freezedColumns.start ?? 0;\n  const freezedEndColumns = freezedColumns.end ?? 0;\n  const freezedStartRows = freezedRows.start ?? 0;\n  const freezedEndRows = freezedRows.end ?? 0;\n\n  /**\n   * 左上角的坐标\n   */\n  const coordinate = useRef(new Animated.ValueXY({ x: 0, y: 0 }));\n  const containerSize = useRef(new Animated.ValueXY({ x: 0, y: 0 }));\n\n  /**\n   * 获取当前的rowIndex范围和columnIndex范围\n   */\n  const getRange = useCallback(() => {\n    let minColumn = virtualColumns.current[0];\n    let maxColumn = virtualColumns.current[0];\n    let minRow = virtualRows.current[0];\n    let maxRow = virtualRows.current[0];\n    let freezedStartColumnWidth = 0;\n    let freezedStartRowHeight = 0;\n\n    for (let i = 0; i < virtualColumns.current.length; i++) {\n      const column = virtualColumns.current[i];\n      if (column.freezed) {\n        freezedStartColumnWidth += column.width;\n        continue;\n      }\n\n      if (minColumn.freezed) {\n        minColumn = column;\n      } else if (column.columnIndex < minColumn.columnIndex) {\n        minColumn = column;\n      }\n\n      if (maxColumn.freezed) {\n        maxColumn = column;\n      } else if (column.columnIndex > maxColumn.columnIndex) {\n        maxColumn = column;\n      }\n    }\n\n    for (let i = 0; i < virtualRows.current.length; i++) {\n      const row = virtualRows.current[i];\n      if (row.freezed) {\n        freezedStartRowHeight += row.height;\n        continue;\n      }\n\n      if (minRow.freezed) {\n        minRow = row;\n      } else if (row.rowIndex < minRow.rowIndex) {\n        minRow = row;\n      }\n\n      if (maxRow.freezed) {\n        maxRow = row;\n      } else if (row.rowIndex > maxRow.rowIndex) {\n        maxRow = row;\n      }\n    }\n\n    return {\n      minColumn,\n      minRow,\n      maxColumn,\n      maxRow,\n      freezedStartRowHeight,\n      freezedStartColumnWidth,\n    };\n  }, []);\n\n  /**\n   * init containerSize, virtualColumns, virtualRows\n   */\n  const onContainerLayout = useCallback(\n    (event) => {\n      const { x: currentWidth, y: currentHeight } = JSON.parse(\n        JSON.stringify(containerSize.current)\n      );\n      const { width, height } = event.nativeEvent.layout;\n\n      containerSize.current.setValue({ x: width, y: height });\n\n      const { minRow, minColumn, maxRow, maxColumn } = getRange();\n\n      let virtualColumnsTotalWidth = 0;\n      let virtualRowsTotalHeight = 0;\n\n      /**\n       * ===0的时候minRow,minColumn,maxRow,maxColumn是null，不能不处理\n       */\n      if (virtualColumns.current.length > 0 && virtualRows.current.length > 0) {\n        // container变小的时候不做任何处理\n        if (currentWidth >= width && currentHeight >= height) {\n          return;\n        }\n\n        virtualColumnsTotalWidth = maxColumn.x - minColumn.x + maxColumn.width;\n        virtualRowsTotalHeight = maxRow.y - minRow.y + maxRow.height;\n\n        // container小于虚拟列行的大小时不做处理\n        if (\n          virtualColumnsTotalWidth >= width &&\n          virtualRowsTotalHeight >= height\n        ) {\n          return;\n        }\n      }\n\n      /**\n       * 填满virtualRows和virtualColumns\n       */\n      let rowIndex = maxRow?.rowIndex ?? -1;\n      while (virtualRowsTotalHeight < height) {\n        if (rowIndex >= rowCount - 1) {\n          break;\n        }\n        rowIndex++;\n        const rowHeight = getRowHeight({ rowIndex });\n        virtualRowsTotalHeight += rowHeight;\n        if (virtualRows.current.length === 0) {\n          virtualRows.current.push(\n            new RowObject({\n              y: 0,\n              height: rowHeight,\n              rowIndex,\n              freezed: rowIndex < freezedStartRows,\n            })\n          );\n        } else {\n          const prev = virtualRows.current[virtualRows.current.length - 1];\n          virtualRows.current.push(\n            new RowObject({\n              y: prev.y + prev.height,\n              height: rowHeight,\n              rowIndex,\n              freezed: rowIndex < freezedStartRows,\n            })\n          );\n        }\n      }\n      let columnIndex = maxColumn?.columnIndex ?? -1;\n      while (virtualColumnsTotalWidth < width) {\n        if (columnIndex >= columnCount - 1) {\n          break;\n        }\n        columnIndex++;\n        const columnWidth = getColumnWidth({ columnIndex });\n        virtualColumnsTotalWidth += columnWidth;\n        if (virtualColumns.current.length === 0) {\n          virtualColumns.current.push(\n            new ColumnObject({\n              x: 0,\n              width: columnWidth,\n              columnIndex,\n              freezed: columnIndex < freezedStartColumns,\n            })\n          );\n        } else {\n          const prev =\n            virtualColumns.current[virtualColumns.current.length - 1];\n          virtualColumns.current.push(\n            new ColumnObject({\n              width: columnWidth,\n              x: prev.x + prev.width,\n              columnIndex,\n              freezed: columnIndex < freezedStartColumns,\n            })\n          );\n        }\n      }\n\n      /**\n       * 增加额外的column和row,\n       * 1. 避免出现空白列/行\n       * 2. 补充freezed的空缺\n       */\n      let extraRows = freezedStartRows + 1;\n      while (extraRows > 0) {\n        if (rowIndex >= rowCount - 1) {\n          break;\n        }\n        rowIndex++;\n        const rowHeight = getRowHeight({ rowIndex });\n        const prevRow = virtualRows.current[virtualRows.current.length - 1];\n        virtualRows.current.push(\n          new RowObject({\n            y: prevRow.y + prevRow.height,\n            height: rowHeight,\n            rowIndex,\n          })\n        );\n        extraRows--;\n      }\n\n      let extraColumns = freezedStartColumns + 1;\n      while (extraColumns > 0) {\n        if (columnIndex >= columnCount - 1) {\n          break;\n        }\n        columnIndex++;\n        const prevColumn =\n          virtualColumns.current[virtualColumns.current.length - 1];\n        const columnWidth = getColumnWidth({ columnIndex });\n        virtualColumns.current.push(\n          new ColumnObject({\n            width: columnWidth,\n            x: prevColumn.x + prevColumn.width,\n            columnIndex,\n          })\n        );\n\n        extraColumns--;\n      }\n\n      /**\n       * 重置cells\n       * cells的数量是 (rowCount+1) * (columnCount+1)，因为\n       * 会出现左边的cell还没消失\n       */\n      virtualCells.current = [];\n      for (let i = 0; i < virtualRows.current.length; i++) {\n        const row = virtualRows.current[i];\n        for (let j = 0; j < virtualColumns.current.length; j++) {\n          const column = virtualColumns.current[j];\n          virtualCells.current.push(\n            new CellObject({\n              column,\n              row,\n            })\n          );\n        }\n      }\n\n      setLayoutCount((prev) => prev + 1);\n    },\n    [\n      rowCount,\n      columnCount,\n      getColumnWidth,\n      getRowHeight,\n      getRange,\n      freezedStartColumns,\n      freezedStartRows,\n    ]\n  );\n\n  const onContainerLayoutDebounced = useMemo(() => {\n    let timer = null;\n    return (event: LayoutChangeEvent) => {\n      const { layout } = event.nativeEvent;\n      if (timer) {\n        clearTimeout(timer);\n      }\n      timer = setTimeout(() => {\n        onContainerLayout({ nativeEvent: { layout } });\n      }, 500);\n    };\n  }, [onContainerLayout]);\n\n  const updateCoordinate = useCallback(\n    (event: { deltaX: number; deltaY: number }) => {\n      const { x, y } = JSON.parse(JSON.stringify(coordinate.current));\n      const { x: containerWidth, y: containerHeight } = JSON.parse(\n        JSON.stringify(containerSize.current)\n      );\n\n      /**\n       * 如果移动过快，超过了逐次迁移元素的速度，那么拆分成多次操作，重复\n       * 调用updateCoordinate\n       */\n      let shouldSplitAction = false;\n      const splitAction = { deltaX: 0, deltaY: 0 };\n\n      /**\n       * (1/5)\n       * 获取当前的rowIndex范围和columnIndex范围\n       * 如果现在已经到最左边column或最右边column了，那就不再继续移动column，\n       * 同时coordinate.x最小值不能小于 containerWidth - (maxColumn.x+column.width)\n       * 也就是说coordinate.x区间是：[containerWidth - (maxColumn.x+column.width), 0]\n       *\n       * row同理\n       */\n      let {\n        minColumn,\n        maxColumn,\n        minRow,\n        maxRow,\n        freezedStartRowHeight,\n        freezedStartColumnWidth,\n      } = getRange();\n      // __DEV__ && console.log(`maxColumn is ${maxColumn?.columnIndex}`);\n\n      if (!(minColumn && maxColumn && minRow && maxRow)) {\n        return;\n      }\n\n      const originalMaxColumnIndex = maxColumn.columnIndex;\n\n      /**\n       * (2/5)\n       * 计算出minX,minY\n       * 根据deltaX位移计算需要展示的column,\n       * 逐个通过消耗deltaX，通过getColumnWidth获取宽度，直到deltaX额度用完\n       * 1. 判断maxColumn是否已经完全展示，\n       *    a. 未完全展示：deltaX -= maxColumn未完全展示的部分(deltaX等于0结束)\n       *       nextX -= maxColumn未完全展示的部分；-> 2\n       *    b. 完全展示：-> 2\n       * 2. 获取下一个maxColumn，判断deltaX剩余额度是否大于maxColumn宽度\n       *    a. 大于: deltaX -= maxColumn宽度，\n       *            nextX -= maxColumn宽度，-> 2\n       *    b. 小于等于：结束\n       *\n       * deltaY同理\n       *\n       * deltaX > 0 左移\n       * deltaX < 0 右移\n       * deltaY > 0 上移\n       * deltaY < 0 下移\n       */\n\n      let deltaX = event.deltaX;\n      let deltaY = event.deltaY;\n      let finalMaxColumnIndex = maxColumn.columnIndex;\n      let finalMinColumnIndex = minColumn.columnIndex;\n      let finalMaxRowIndex = maxRow.rowIndex;\n      let finalMinRowIndex = minRow.rowIndex;\n\n      // 右移补头\n      if (deltaX < 0) {\n        // minColumn.x + x 修正maxColumn位置误差\n        // let deltaX0 = -containerWidth;\n        let deltaX0 = x + minColumn.x - containerWidth;\n\n        while (deltaX < deltaX0) {\n          if (finalMinColumnIndex === 0) {\n            break;\n          }\n          finalMinColumnIndex--;\n          if (\n            minColumn.columnIndex - finalMinColumnIndex >=\n            virtualColumns.current.length - 2\n          ) {\n            shouldSplitAction = true;\n            break;\n          }\n          const minColumnWidth = getColumnWidth({\n            columnIndex: finalMinColumnIndex,\n          });\n          deltaX0 += minColumnWidth;\n        }\n        deltaX = Math.max(deltaX0, deltaX);\n        if (shouldSplitAction) {\n          splitAction.deltaX = event.deltaX - deltaX;\n        }\n      }\n      // 左移补尾\n      if (deltaX > 0) {\n        // 修正位置误差: x + maxColumn.x + maxColumn.width\n        // let deltaX0 = containerWidth;\n        let deltaX0 = maxColumn.x + maxColumn.width + x - containerWidth;\n        while (deltaX > deltaX0) {\n          if (finalMaxColumnIndex >= columnCount - 1) {\n            break;\n          }\n          finalMaxColumnIndex++;\n          if (\n            finalMaxColumnIndex - maxColumn.columnIndex >=\n            virtualColumns.current.length - 2\n          ) {\n            shouldSplitAction = true;\n            break;\n          }\n          const maxColumnWidth = getColumnWidth({\n            columnIndex: finalMaxColumnIndex,\n          });\n          deltaX0 += maxColumnWidth;\n        }\n        deltaX = Math.min(deltaX0, deltaX);\n        if (shouldSplitAction) {\n          splitAction.deltaX = event.deltaX - deltaX;\n        }\n      }\n\n      // 下移补头\n      if (deltaY < 0) {\n        // minRow.y !== -y，因为minRow有可能一半在屏幕外面，\n        // 所以这里要修正这个误差\n        let deltaY0 = y + minRow.y - containerHeight;\n\n        while (deltaY < deltaY0) {\n          if (finalMinRowIndex === 0) {\n            break;\n          }\n          finalMinRowIndex--;\n          if (\n            minRow.rowIndex - finalMinRowIndex >=\n            virtualRows.current.length - 2\n          ) {\n            shouldSplitAction = true;\n            break;\n          }\n          const minRowHeight = getRowHeight({\n            rowIndex: finalMinRowIndex,\n          });\n          deltaY0 += minRowHeight;\n        }\n        deltaY = Math.max(deltaY0, deltaY);\n        if (shouldSplitAction) {\n          splitAction.deltaY = event.deltaY - deltaY;\n        }\n      }\n\n      // 上移补尾\n      if (deltaY > 0) {\n        let deltaY0 = maxRow.y + maxRow.height + y - containerHeight;\n\n        while (deltaY > deltaY0) {\n          if (finalMaxRowIndex >= rowCount - 1) {\n            break;\n          }\n          finalMaxRowIndex++;\n          if (\n            finalMaxRowIndex - maxRow.rowIndex >=\n            virtualRows.current.length - 2\n          ) {\n            shouldSplitAction = true;\n            break;\n          }\n          const maxRowHeight = getRowHeight({\n            rowIndex: finalMaxRowIndex,\n          });\n          deltaY0 += maxRowHeight;\n        }\n        deltaY = Math.min(deltaY0, deltaY);\n        if (shouldSplitAction) {\n          splitAction.deltaY = event.deltaY - deltaY;\n        }\n      }\n\n      /**\n       * (3/5)\n       * 更新左上角坐标，其他所有位置都依据这个坐标进行位移\n       * x值区间：[containerWidth - contentWidth, 0]\n       * y值区间：[containerHeight - contentHeight, 0]\n       */\n      if (x - deltaX > 0) {\n        deltaX = x;\n      }\n      if (y - deltaY > 0) {\n        deltaY = y;\n      }\n\n      if (deltaX === 0 && deltaY === 0) {\n        return;\n      }\n\n      const nextX = x - deltaX;\n      const nextY = y - deltaY;\n\n      coordinate.current.setValue({\n        x: nextX,\n        y: nextY,\n      });\n\n      /**\n       * (4/5)\n       * 更新virtualColumns和virtualRows\n       * 如果deltaX > 0 (往左边移), 将最左边在可视范围外的columns依次移动到末尾\n       * 如果deltaX < 0（往右边移）, 将最右边在可视范围外的columns倒序依次移动到头部\n       * rows同理。\n       */\n      const outsideColumns: ColumnObject[] = [];\n      const outsideRows: RowObject[] = [];\n      const outsideCells: CellObject[] = [];\n\n      // 左移，在末尾增加\n      if (deltaX > 0) {\n        for (let i = 0; i < virtualColumns.current.length; i++) {\n          const column = virtualColumns.current[i];\n          if (column.freezed) {\n            continue;\n          }\n\n          /**\n           * 判断超出范围的依据是列的*右侧*小于0\n           */\n          const isOutOfView =\n            column.x + column.width + nextX < freezedStartColumnWidth;\n          if (isOutOfView) {\n            outsideColumns.push(column);\n          }\n        }\n\n        /**\n         * 所有column均已超出屏幕，此时根据finalMaxIndex重新计算\n         * 所有的column的位置\n         */\n\n        if (outsideColumns.length === virtualColumns.current.length) {\n          console.error(\"This shoud not happen\");\n        }\n        // console.log({ outsideColumns, maxColumnValue });\n        if (outsideColumns.length > 0) {\n          for (let i = 0; i < outsideColumns.length; i++) {\n            /**\n             * 先更新columnIndex\n             * 通过columnIndex拿到columnWidth\n             * 再更新maxColumnValue以供下一个column使用\n             */\n            const column = outsideColumns[i];\n            // 虽然超出屏幕但是已经到了底部，所以终止\n            if (maxColumn.columnIndex === columnCount - 1) {\n              if (__DEV__) {\n                console.log(\n                  `break move out of view columns because end reached`\n                );\n              }\n              break;\n            }\n\n            column.xAnimated.setValue(maxColumn.x + maxColumn.width);\n            // __DEV__ &&\n            //   console.log(\n            //     `move column from ${column.columnIndex} to ${\n            //       maxColumn.columnIndex + 1\n            //     }`\n            //   );\n            column.columnIndex = maxColumn.columnIndex + 1;\n            const columnWidth = getColumnWidth(column);\n            column.widthAnimated.setValue(columnWidth);\n            maxColumn = column;\n          }\n        }\n      }\n\n      // 右移，在头部增加\n      if (deltaX < 0) {\n        for (let i = 0; i < virtualColumns.current.length; i++) {\n          const column = virtualColumns.current[i];\n          if (column.freezed) {\n            continue;\n          }\n\n          /**\n           * 判断超出范围的依据是列的*左侧*大于containerWidth\n           */\n          const isOutOfView = column.x + nextX > containerWidth;\n          if (isOutOfView) {\n            outsideColumns.unshift(column);\n          }\n        }\n        // console.log({ outsideColumns, minColumnValue });\n        if (outsideColumns.length > 0) {\n          for (let i = 0; i < outsideColumns.length; i++) {\n            if (minColumn.columnIndex <= freezedStartColumns) {\n              break;\n            }\n            /**\n             * 先更新columnIndex\n             * 通过columnIndex拿到columnWidth\n             * 再更新minColumnValue以供下一个column使用\n             */\n            const column = outsideColumns[i];\n            column.columnIndex = minColumn.columnIndex - 1;\n            const columnWidth = getColumnWidth(column);\n            column.widthAnimated.setValue(columnWidth);\n            column.xAnimated.setValue(minColumn.x - columnWidth);\n            minColumn = column;\n          }\n        }\n      }\n\n      // 上移，在尾部增加\n      if (deltaY > 0) {\n        for (let i = 0; i < virtualRows.current.length; i++) {\n          const row = virtualRows.current[i];\n          if (row.freezed) {\n            continue;\n          }\n\n          /**\n           * 判断超出范围的依据是行的*下侧*小于0\n           */\n          const isOutOfView =\n            row.y + row.height + nextY < freezedStartRowHeight;\n          __DEV__ &&\n            console.log(\n              `out of view check ${row.y} ${row.height}, ${nextY} ${freezedStartRowHeight} ${isOutOfView}`\n            );\n          if (isOutOfView) {\n            outsideRows.push(row);\n          }\n        }\n\n        // console.log(outsideRows);\n        // console.log({ outsideRows, maxRowValue });\n        /**\n         * 所有column均已超出屏幕，此时根据finalMaxIndex重新计算\n         * 所有的column的位置\n         */\n        if (outsideRows.length === virtualRows.current.length) {\n          console.error(\"Warning: This shoud not happen\");\n        }\n\n        if (outsideRows.length > 0) {\n          for (let i = 0; i < outsideRows.length; i++) {\n            const row = outsideRows[i];\n            // 虽然超出屏幕但是已经到了底部，所以终止\n            if (maxRow.rowIndex === rowCount - 1) {\n              break;\n            }\n            row.rowIndex = maxRow.rowIndex + 1;\n            row.yAnimated.setValue(maxRow.y + maxRow.height);\n            const rowHeight = getRowHeight(row);\n            row.heightAnimated.setValue(rowHeight);\n            maxRow = row;\n          }\n        }\n      }\n\n      // 下移，在头部增加\n      if (deltaY < 0) {\n        for (let i = 0; i < virtualRows.current.length; i++) {\n          const row = virtualRows.current[i];\n          if (row.freezed) {\n            continue;\n          }\n          /**\n           * 判断超出范围的依据是行的*上侧*大于容器高度\n           */\n          const isOutOfView = row.y + nextY > containerHeight;\n          if (isOutOfView) {\n            outsideRows.unshift(row);\n          }\n        }\n        // console.log({ outsideRows, minRowValue });\n        if (outsideRows.length > 0) {\n          for (let i = 0; i < outsideRows.length; i++) {\n            if (minRow.rowIndex <= freezedStartRows) {\n              break;\n            }\n            const row = outsideRows[i];\n            row.rowIndex = minRow.rowIndex - 1;\n            const rowHeight = getRowHeight(row);\n            row.heightAnimated.setValue(rowHeight);\n            row.yAnimated.setValue(minRow.y - row.height);\n            minRow = row;\n          }\n        }\n      }\n\n      /**\n       * (5/5)\n       * 计算需要更新的cell，并调用update方法更新cell\n       */\n      if (__DEV__) {\n        // 检查是否有重复的index\n        const columnIndexSet = new Set();\n        for (const column of virtualColumns.current) {\n          if (columnIndexSet.has(column.columnIndex)) {\n            console.error(\n              \"Duplicated column: \" +\n                column.columnIndex +\n                \"original\" +\n                originalMaxColumnIndex\n            );\n          }\n          columnIndexSet.add(column.columnIndex);\n        }\n\n        const rowIndexSet = new Set();\n        for (const row of virtualRows.current) {\n          if (rowIndexSet.has(row.rowIndex)) {\n            console.error(\"Duplicated row: \" + row.rowIndex);\n          }\n          rowIndexSet.add(row.rowIndex);\n        }\n      }\n\n      for (let i = 0; i < virtualCells.current.length; i++) {\n        const cell = virtualCells.current[i];\n        if (!outsideCells.includes(cell)) {\n          if (outsideColumns.includes(cell.column)) {\n            outsideCells.push(cell);\n          } else if (outsideRows.includes(cell.row)) {\n            outsideCells.push(cell);\n          }\n        }\n      }\n\n      if (!shouldSplitAction) {\n        for (const cell of outsideCells) {\n          cell.ref.current.update({\n            rowIndex: cell.row.rowIndex,\n            columnIndex: cell.column.columnIndex,\n          });\n        }\n      }\n\n      // 继续未完成action\n      if (shouldSplitAction) {\n        if (__DEV__) {\n          console.log(\"[DEV] splitAction\", {\n            ...splitAction,\n            prevDeltaY: deltaY,\n            prevDeltaX: deltaX,\n            containerWidth,\n            containerHeight,\n          });\n        }\n        requestAnimationFrame(() => {\n          updateCoordinate(splitAction);\n        });\n      }\n    },\n    [\n      getColumnWidth,\n      getRange,\n      freezedStartColumns,\n      freezedStartRows,\n      columnCount,\n      rowCount,\n      getRowHeight,\n    ]\n  );\n\n  const onWheel = useCallback(\n    (event) => {\n      const { deltaX, deltaY } = event;\n      updateCoordinate({ deltaX, deltaY });\n    },\n    [updateCoordinate]\n  );\n\n  useEffect(() => {\n    if (Platform.OS === \"web\") {\n      const el = view.current as any;\n\n      el.addEventListener(\"wheel\", onWheel);\n      return () => {\n        el.removeEventListener(\"wheel\", onWheel);\n      };\n    }\n  }, [onWheel]);\n\n  const panResponder = useMemo(() => {\n    let prevGestureState = null;\n    return PanResponder.create({\n      onPanResponderGrant: (event, gestureState) => {\n        prevGestureState = { ...gestureState };\n      },\n      onMoveShouldSetPanResponder: () => {\n        return true;\n      },\n      onPanResponderMove: (event, gestureState) => {\n        const deltaX = -gestureState.dx + prevGestureState.dx;\n        const deltaY = -gestureState.dy + prevGestureState.dy;\n        prevGestureState = { ...gestureState };\n        updateCoordinate({\n          deltaX,\n          deltaY,\n        });\n      },\n    });\n  }, [updateCoordinate]);\n\n  return (\n    <VirtualizedGridContext.Provider\n      value={{\n        onChangeColumn,\n        onChangeRow,\n        virtualColumns,\n        virtualCells,\n        virtualRows,\n        coordinate,\n        containerSize,\n        updateCoordinate,\n        onChangeColumnOrder,\n        onChangeRowOrder,\n      }}\n    >\n      <View\n        ref={view}\n        style={[style, { overflow: \"hidden\" }]}\n        onLayout={\n          layoutCount === 0 ? onContainerLayout : onContainerLayoutDebounced\n        }\n        {...panResponder.panHandlers}\n      >\n        {showColumnLine && (\n          <Fragment key={`columns-${layoutCount}`}>\n            {virtualColumns.current.map((column, index) => {\n              return (\n                <Animated.View\n                  key={index}\n                  style={{\n                    position: \"absolute\",\n                    width: 1,\n                    backgroundColor: \"#ccc\",\n                    transform: [\n                      {\n                        translateX: Animated.add(\n                          column.xAnimated,\n                          coordinate.current.x\n                        ),\n                      },\n                    ],\n                    height: containerSize.current.y,\n                  }}\n                />\n              );\n            })}\n          </Fragment>\n        )}\n        {showRowLine && (\n          <Fragment key={`rows-${layoutCount}`}>\n            {virtualRows.current.map((row, index) => {\n              return (\n                <Animated.View\n                  key={index}\n                  style={{\n                    position: \"absolute\",\n                    backgroundColor: \"#ccc\",\n                    transform: [\n                      {\n                        translateY: Animated.add(\n                          row.yAnimated,\n                          coordinate.current.y\n                        ),\n                      },\n                    ],\n                    width: containerSize.current.x,\n                    height: 1,\n                  }}\n                />\n              );\n            })}\n          </Fragment>\n        )}\n        <Fragment key={`cells-${layoutCount}`}>\n          {virtualCells.current.map((cell, index) => {\n            return (\n              <Cell\n                coordinate={coordinate.current}\n                ref={cell.ref}\n                key={index}\n                column={cell.column}\n                row={cell.row}\n                renderCell={renderCell}\n              />\n            );\n          })}\n        </Fragment>\n      </View>\n    </VirtualizedGridContext.Provider>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Pressable, Animated, PanResponder } from \"react-native\";\n\nimport { useGrid } from \"./VirtualizedGridContext\";\nimport { ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport function ColumnResizer({\n  column,\n  row,\n}: {\n  column: ColumnObject;\n  row: RowObject;\n}) {\n  const { virtualColumns, onChangeColumn } = useGrid();\n\n  const panResponder = useMemo(() => {\n    let rightColumns = [];\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminate\");\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminationRequest\");\n        return false;\n      },\n      onPanResponderReject: () => {\n        __DEV__ && console.log(\"[resizer] onPanResponderReject\");\n      },\n\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onMoveShouldSetPanResponder\");\n        return true;\n      },\n\n      onPanResponderGrant: () => {\n        __DEV__ && console.log(\"[resizer] grant\");\n        column.widthAnimated.setOffset(column.width);\n        rightColumns = [];\n        for (const item of virtualColumns.current) {\n          if (item.columnIndex > column.columnIndex) {\n            rightColumns.push(item);\n            item.xAnimated.setOffset(item.x);\n          }\n        }\n      },\n\n      onPanResponderMove: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] move\");\n        for (const item of rightColumns) {\n          item.xAnimated.setValue(gestureState.dx);\n        }\n        column.widthAnimated.setValue(gestureState.dx);\n        onChangeColumn(column);\n      },\n\n      onPanResponderRelease: () => {\n        __DEV__ && console.log(\"[resizer] release\");\n        column.widthAnimated.flattenOffset();\n        for (const item of rightColumns) {\n          item.xAnimated.flattenOffset();\n        }\n        rightColumns = [];\n      },\n    });\n  }, [column, virtualColumns, onChangeColumn]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n          zIndex: 10,\n          height: row.height,\n          width: 20,\n        },\n      ]}\n    >\n      <Pressable\n        style={[\n          {\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            height: row.height,\n          },\n        ]}\n      >\n        {(state) => {\n          const hovered = (state as unknown as any).hovered;\n          return (\n            <Animated.View\n              style={[\n                {\n                  height: row.heightAnimated,\n                  width: 1,\n                  backgroundColor: \"#ccc\",\n                },\n                hovered && {\n                  width: 5,\n                  backgroundColor: \"blue\",\n                },\n              ]}\n            />\n          );\n        }}\n      </Pressable>\n    </Animated.View>\n  );\n}\n","import React, { ReactNode, useMemo } from \"react\";\nimport { Animated, PanResponder } from \"react-native\";\n\nimport { useGrid } from \"./VirtualizedGridContext\";\nimport { ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport function ColumnReorder({\n  column,\n  row,\n  children,\n}: {\n  column: ColumnObject;\n  row: RowObject;\n  children?: ReactNode;\n}) {\n  const { virtualColumns, onChangeColumnOrder } = useGrid();\n\n  const panResponder = useMemo(() => {\n    let startX = 0;\n    let highlightColumn: ColumnObject | null = null;\n    let startColumnIndex = 0;\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        __DEV__ && console.log(\"[reorder] onPanResponderTerminate\");\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        __DEV__ && console.log(\"[reorder] onPanResponderTerminationRequest\");\n        return false;\n      },\n      onPanResponderReject: () => {\n        __DEV__ && console.log(\"[reorder] onPanResponderReject\");\n      },\n\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        __DEV__ && console.log(\"[reorder] onMoveShouldSetPanResponder\");\n        return true;\n      },\n\n      onPanResponderGrant: (event) => {\n        __DEV__ && console.log(\"[reorder] grant\");\n        startX = column.x + event.nativeEvent.locationX;\n        startColumnIndex = column.columnIndex;\n      },\n\n      onPanResponderMove: (event, gestureState) => {\n        __DEV__ && console.log(\"[reorder] move\", gestureState.dx);\n        for (const item of virtualColumns.current) {\n          const itemCenterX = item.x + item.width / 2;\n          if (\n            Math.abs(itemCenterX - startX - gestureState.dx) <\n            item.width / 2\n          ) {\n            console.log(\"highlightcolumn\", item.columnIndex);\n            if (highlightColumn === item) {\n              break;\n            }\n            if (highlightColumn) {\n              highlightColumn.highlightOpacityAnimated.setValue(0);\n            }\n            highlightColumn = item;\n            highlightColumn.highlightOpacityAnimated.setValue(1);\n            break;\n          }\n        }\n      },\n\n      onPanResponderRelease: () => {\n        __DEV__ && console.log(\"[reorder] release\");\n        if (highlightColumn) {\n          highlightColumn.highlightOpacityAnimated.setValue(0);\n          if (startColumnIndex !== highlightColumn.columnIndex) {\n            onChangeColumnOrder({\n              fromIndex: startColumnIndex,\n              toIndex: highlightColumn.columnIndex,\n            });\n          }\n        }\n      },\n    });\n  }, [column, onChangeColumnOrder, virtualColumns]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          zIndex: 8,\n          top: 0,\n          left: 0,\n          height: row.height,\n          width: column.width,\n        },\n      ]}\n    >\n      {children}\n    </Animated.View>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Pressable, Animated, PanResponder } from \"react-native\";\n\nimport { useGrid } from \"./VirtualizedGridContext\";\nimport { ColumnObject, RowObject } from \"./VirtualizedGridUtils\";\n\nexport function RowResizer({\n  column,\n  row,\n}: {\n  column: ColumnObject;\n  row: RowObject;\n}) {\n  const { virtualRows, onChangeRow } = useGrid();\n\n  const panResponder = useMemo(() => {\n    let bottomRows = [];\n\n    return PanResponder.create({\n      onPanResponderTerminate: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminate\");\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onPanResponderTerminationRequest\");\n        return false;\n      },\n      onPanResponderReject: () => {\n        __DEV__ && console.log(\"[resizer] onPanResponderReject\");\n      },\n\n      onMoveShouldSetPanResponder: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] onMoveShouldSetPanResponder\");\n        return true;\n      },\n\n      onPanResponderGrant: () => {\n        __DEV__ && console.log(\"[resizer] grant\");\n        row.heightAnimated.setOffset(row.height);\n        bottomRows = [];\n        for (const item of virtualRows.current) {\n          if (item.rowIndex > row.rowIndex) {\n            bottomRows.push(item);\n            item.yAnimated.setOffset(item.y);\n          }\n        }\n      },\n\n      onPanResponderMove: (event, gestureState) => {\n        __DEV__ && console.log(\"[resizer] move\");\n        for (const item of bottomRows) {\n          item.yAnimated.setValue(gestureState.dy);\n        }\n        row.heightAnimated.setValue(gestureState.dy);\n        onChangeRow(row);\n      },\n\n      onPanResponderRelease: () => {\n        __DEV__ && console.log(\"[resizer] release\");\n        row.heightAnimated.flattenOffset();\n        for (const item of bottomRows) {\n          item.yAnimated.flattenOffset();\n        }\n        bottomRows = [];\n      },\n    });\n  }, [row, virtualRows, onChangeRow]);\n\n  return (\n    <Animated.View\n      {...panResponder.panHandlers}\n      style={[\n        {\n          position: \"absolute\",\n          bottom: 0,\n          left: 0,\n          zIndex: 10,\n          height: 20,\n          width: column.width,\n        },\n      ]}\n    >\n      <Pressable\n        style={[\n          {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            width: column.width,\n            height: 20,\n          },\n        ]}\n      >\n        {(state) => {\n          const hovered = (state as unknown as any).hovered;\n          return (\n            <Animated.View\n              style={[\n                {\n                  width: column.widthAnimated,\n                  height: 1,\n                  backgroundColor: \"#ccc\",\n                },\n                hovered && {\n                  height: 5,\n                  backgroundColor: \"blue\",\n                },\n              ]}\n            />\n          );\n        }}\n      </Pressable>\n    </Animated.View>\n  );\n}\n","import React, { useCallback, useLayoutEffect, useRef, useState } from \"react\";\nimport {\n  Animated,\n  Platform,\n  Text,\n  useWindowDimensions,\n  View,\n} from \"react-native\";\n\nimport { Header } from \"./docs/Header\";\nimport {\n  VirtualizedGrid,\n  ColumnResizer,\n  ColumnObject,\n  RowObject,\n  RowResizer,\n  ColumnReorder,\n} from \"./src/index\";\n\nexport default function App() {\n  const { width, height } = useWindowDimensions();\n  const columnWidthCache = useRef(new Map<string, number>());\n  const rowHeightCache = useRef(new Map<string, number>());\n\n  const updateColumn = useCallback((column: ColumnObject) => {\n    columnWidthCache.current.set(`${column.columnIndex}`, column.width);\n  }, []);\n  const updateRow = useCallback((row: RowObject) => {\n    rowHeightCache.current.set(`${row.rowIndex}`, row.height);\n  }, []);\n\n  const onChangeColumnOrder = useCallback(\n    (options: { fromIndex: number; toIndex: number }) => {\n      console.log(options);\n    },\n    []\n  );\n\n  useLayoutEffect(() => {\n    if (Platform.OS === \"web\") {\n      document.body.style.overflow = \"hidden\";\n    }\n  }, []);\n  return (\n    <>\n      <Header />\n\n      <VirtualizedGrid\n        columnCount={Number.MAX_SAFE_INTEGER}\n        rowCount={Number.MAX_SAFE_INTEGER}\n        freezedColumns={{ start: 1 }}\n        freezedRows={{ start: 1 }}\n        style={[\n          {\n            // borderWidth: 1,\n            borderColor: \"#fff\",\n            width,\n            height: height - 56,\n          },\n          Platform.select({\n            web: {\n              userSelect: \"none\",\n            },\n          }) as unknown,\n        ]}\n        getColumnWidth={(info: { columnIndex: number }) => {\n          if (columnWidthCache.current.has(`${info.columnIndex}`)) {\n            return columnWidthCache.current.get(`${info.columnIndex}`);\n          }\n          return [50, 140, 200, 120][info.columnIndex % 4];\n        }}\n        getRowHeight={(info: { rowIndex: number }) => {\n          if (rowHeightCache.current.has(`${info.rowIndex}`)) {\n            return rowHeightCache.current.get(`${info.rowIndex}`);\n          }\n          return [40, 50, 60, 90, 40, 45, 40, 50, 55, 50, 60][\n            info.rowIndex % 10\n          ];\n        }}\n        onChangeColumn={updateColumn}\n        onChangeColumnOrder={onChangeColumnOrder}\n        onChangeRow={updateRow}\n        renderCell={(info) => {\n          return (\n            <View\n              style={{\n                flex: 1,\n                backgroundColor:\n                  info.rowIndex % 2 === 1 ? \"rgb(246, 248, 250)\" : \"#fff\",\n                borderTopWidth: 1,\n                borderLeftWidth: 1,\n                borderColor: \"rgb(216, 222, 228)\",\n                padding: 4,\n                borderRightWidth: info.columnIndex === 0 ? 1 : 0,\n                borderBottomWidth: info.rowIndex === 0 ? 1 : 0,\n              }}\n            >\n              {info.columnIndex === 0 && info.rowIndex === 0 && null}\n              {info.rowIndex === 0 && info.columnIndex > 0 && (\n                <>\n                  <ColumnReorder row={info.row} column={info.column}>\n                    <>\n                      <Text>c: {info.columnIndex}</Text>\n                      <Text>r: {info.rowIndex}</Text>\n                    </>\n                  </ColumnReorder>\n                  <ColumnResizer row={info.row} column={info.column} />\n                </>\n              )}\n              {info.columnIndex === 0 && info.rowIndex > 0 && (\n                <>\n                  <>\n                    <Text>c: {info.columnIndex}</Text>\n                    <Text>r: {info.rowIndex}</Text>\n                  </>\n                  <RowResizer row={info.row} column={info.column} />\n                </>\n              )}\n              {info.columnIndex > 0 && info.rowIndex > 0 && (\n                <>\n                  <Text>c: {info.columnIndex}</Text>\n                  <Text>r: {info.rowIndex}</Text>\n                </>\n              )}\n              <Animated.View\n                style={[\n                  {\n                    position: \"absolute\",\n                    left: 0,\n                    top: -1,\n                    bottom: -1,\n                    width: 2,\n                    backgroundColor: \"blue\",\n                    opacity: info.column.highlightOpacityAnimated,\n                  },\n                  Platform.select({\n                    web: {\n                      pointerEvents: \"none\",\n                    } as unknown as any,\n                  }),\n                ]}\n              />\n            </View>\n          );\n        }}\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}